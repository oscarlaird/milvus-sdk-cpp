// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feder.proto

#include "feder.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValuePair_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MsgBase_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_feder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_feder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_feder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentIndexData_feder_2eproto;
namespace milvus {
namespace proto {
namespace feder {
class SegmentIndexDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentIndexData> _instance;
} _SegmentIndexData_default_instance_;
class FederSegmentSearchResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FederSegmentSearchResult> _instance;
} _FederSegmentSearchResult_default_instance_;
class ListIndexedSegmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListIndexedSegmentRequest> _instance;
} _ListIndexedSegmentRequest_default_instance_;
class ListIndexedSegmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListIndexedSegmentResponse> _instance;
} _ListIndexedSegmentResponse_default_instance_;
class DescribeSegmentIndexDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeSegmentIndexDataRequest> _instance;
} _DescribeSegmentIndexDataRequest_default_instance_;
class DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse> _instance;
} _DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_default_instance_;
class DescribeSegmentIndexDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeSegmentIndexDataResponse> _instance;
} _DescribeSegmentIndexDataResponse_default_instance_;
}  // namespace feder
}  // namespace proto
}  // namespace milvus
static void InitDefaultsscc_info_DescribeSegmentIndexDataRequest_feder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::feder::_DescribeSegmentIndexDataRequest_default_instance_;
    new (ptr) ::milvus::proto::feder::DescribeSegmentIndexDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::feder::DescribeSegmentIndexDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeSegmentIndexDataRequest_feder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescribeSegmentIndexDataRequest_feder_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeSegmentIndexDataResponse_feder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::feder::_DescribeSegmentIndexDataResponse_default_instance_;
    new (ptr) ::milvus::proto::feder::DescribeSegmentIndexDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::feder::DescribeSegmentIndexDataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DescribeSegmentIndexDataResponse_feder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DescribeSegmentIndexDataResponse_feder_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_feder_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_feder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::feder::_DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse();
  }
  ::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_feder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_feder_2eproto}, {
      &scc_info_SegmentIndexData_feder_2eproto.base,}};

static void InitDefaultsscc_info_FederSegmentSearchResult_feder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::feder::_FederSegmentSearchResult_default_instance_;
    new (ptr) ::milvus::proto::feder::FederSegmentSearchResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::feder::FederSegmentSearchResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FederSegmentSearchResult_feder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FederSegmentSearchResult_feder_2eproto}, {}};

static void InitDefaultsscc_info_ListIndexedSegmentRequest_feder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::feder::_ListIndexedSegmentRequest_default_instance_;
    new (ptr) ::milvus::proto::feder::ListIndexedSegmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::feder::ListIndexedSegmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListIndexedSegmentRequest_feder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListIndexedSegmentRequest_feder_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ListIndexedSegmentResponse_feder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::feder::_ListIndexedSegmentResponse_default_instance_;
    new (ptr) ::milvus::proto::feder::ListIndexedSegmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::feder::ListIndexedSegmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListIndexedSegmentResponse_feder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListIndexedSegmentResponse_feder_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_SegmentIndexData_feder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::feder::_SegmentIndexData_default_instance_;
    new (ptr) ::milvus::proto::feder::SegmentIndexData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::feder::SegmentIndexData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentIndexData_feder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SegmentIndexData_feder_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_feder_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_feder_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_feder_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_feder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::SegmentIndexData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::SegmentIndexData, segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::SegmentIndexData, index_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::FederSegmentSearchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::FederSegmentSearchResult, segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::FederSegmentSearchResult, visit_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::ListIndexedSegmentResponse, segmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataRequest, index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataRequest, segmentsids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse, index_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::feder::DescribeSegmentIndexDataResponse, index_params_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::milvus::proto::feder::SegmentIndexData)},
  { 7, -1, sizeof(::milvus::proto::feder::FederSegmentSearchResult)},
  { 14, -1, sizeof(::milvus::proto::feder::ListIndexedSegmentRequest)},
  { 22, -1, sizeof(::milvus::proto::feder::ListIndexedSegmentResponse)},
  { 29, -1, sizeof(::milvus::proto::feder::DescribeSegmentIndexDataRequest)},
  { 38, 45, sizeof(::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse)},
  { 47, -1, sizeof(::milvus::proto::feder::DescribeSegmentIndexDataResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::feder::_SegmentIndexData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::feder::_FederSegmentSearchResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::feder::_ListIndexedSegmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::feder::_ListIndexedSegmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::feder::_DescribeSegmentIndexDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::feder::_DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::feder::_DescribeSegmentIndexDataResponse_default_instance_),
};

const char descriptor_table_protodef_feder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013feder.proto\022\022milvus.proto.feder\032\014commo"
  "n.proto\"9\n\020SegmentIndexData\022\021\n\tsegmentID"
  "\030\001 \001(\003\022\022\n\nindex_data\030\002 \001(\t\"A\n\030FederSegme"
  "ntSearchResult\022\021\n\tsegmentID\030\001 \001(\003\022\022\n\nvis"
  "it_info\030\002 \001(\t\"t\n\031ListIndexedSegmentReque"
  "st\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.M"
  "sgBase\022\027\n\017collection_name\030\002 \001(\t\022\022\n\nindex"
  "_name\030\003 \001(\t\"]\n\032ListIndexedSegmentRespons"
  "e\022+\n\006status\030\001 \001(\0132\033.milvus.proto.common."
  "Status\022\022\n\nsegmentIDs\030\002 \003(\003\"\217\001\n\037DescribeS"
  "egmentIndexDataRequest\022*\n\004base\030\001 \001(\0132\034.m"
  "ilvus.proto.common.MsgBase\022\027\n\017collection"
  "_name\030\002 \001(\t\022\022\n\nindex_name\030\003 \001(\t\022\023\n\013segme"
  "ntsIDs\030\004 \003(\003\"\271\002\n DescribeSegmentIndexDat"
  "aResponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto"
  ".common.Status\022W\n\nindex_data\030\002 \003(\0132C.mil"
  "vus.proto.feder.DescribeSegmentIndexData"
  "Response.IndexDataEntry\0227\n\014index_params\030"
  "\003 \003(\0132!.milvus.proto.common.KeyValuePair"
  "\032V\n\016IndexDataEntry\022\013\n\003key\030\001 \001(\003\0223\n\005value"
  "\030\002 \001(\0132$.milvus.proto.feder.SegmentIndex"
  "Data:\0028\001B5Z3github.com/milvus-io/milvus-"
  "proto/go-api/v2/federpbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_feder_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_feder_2eproto_sccs[7] = {
  &scc_info_DescribeSegmentIndexDataRequest_feder_2eproto.base,
  &scc_info_DescribeSegmentIndexDataResponse_feder_2eproto.base,
  &scc_info_DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_feder_2eproto.base,
  &scc_info_FederSegmentSearchResult_feder_2eproto.base,
  &scc_info_ListIndexedSegmentRequest_feder_2eproto.base,
  &scc_info_ListIndexedSegmentResponse_feder_2eproto.base,
  &scc_info_SegmentIndexData_feder_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_feder_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_feder_2eproto = {
  false, false, descriptor_table_protodef_feder_2eproto, "feder.proto", 911,
  &descriptor_table_feder_2eproto_once, descriptor_table_feder_2eproto_sccs, descriptor_table_feder_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_feder_2eproto::offsets,
  file_level_metadata_feder_2eproto, 7, file_level_enum_descriptors_feder_2eproto, file_level_service_descriptors_feder_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_feder_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_feder_2eproto)), true);
namespace milvus {
namespace proto {
namespace feder {

// ===================================================================

void SegmentIndexData::InitAsDefaultInstance() {
}
class SegmentIndexData::_Internal {
 public:
};

SegmentIndexData::SegmentIndexData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.SegmentIndexData)
}
SegmentIndexData::SegmentIndexData(const SegmentIndexData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_data().empty()) {
    index_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_data(),
      GetArena());
  }
  segmentid_ = from.segmentid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.SegmentIndexData)
}

void SegmentIndexData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegmentIndexData_feder_2eproto.base);
  index_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  segmentid_ = PROTOBUF_LONGLONG(0);
}

SegmentIndexData::~SegmentIndexData() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.SegmentIndexData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SegmentIndexData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SegmentIndexData::ArenaDtor(void* object) {
  SegmentIndexData* _this = reinterpret_cast< SegmentIndexData* >(object);
  (void)_this;
}
void SegmentIndexData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegmentIndexData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentIndexData& SegmentIndexData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentIndexData_feder_2eproto.base);
  return *internal_default_instance();
}


void SegmentIndexData::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.SegmentIndexData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  segmentid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentIndexData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_index_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.feder.SegmentIndexData.index_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentIndexData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.SegmentIndexData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // string index_data = 2;
  if (this->index_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_data().data(), static_cast<int>(this->_internal_index_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.SegmentIndexData.index_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.SegmentIndexData)
  return target;
}

size_t SegmentIndexData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.SegmentIndexData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_data = 2;
  if (this->index_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_data());
  }

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_segmentid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentIndexData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.feder.SegmentIndexData)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentIndexData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentIndexData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.feder.SegmentIndexData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.feder.SegmentIndexData)
    MergeFrom(*source);
  }
}

void SegmentIndexData::MergeFrom(const SegmentIndexData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.SegmentIndexData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index_data().size() > 0) {
    _internal_set_index_data(from._internal_index_data());
  }
  if (from.segmentid() != 0) {
    _internal_set_segmentid(from._internal_segmentid());
  }
}

void SegmentIndexData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.feder.SegmentIndexData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentIndexData::CopyFrom(const SegmentIndexData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.SegmentIndexData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentIndexData::IsInitialized() const {
  return true;
}

void SegmentIndexData::InternalSwap(SegmentIndexData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_data_.Swap(&other->index_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(segmentid_, other->segmentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentIndexData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FederSegmentSearchResult::InitAsDefaultInstance() {
}
class FederSegmentSearchResult::_Internal {
 public:
};

FederSegmentSearchResult::FederSegmentSearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.FederSegmentSearchResult)
}
FederSegmentSearchResult::FederSegmentSearchResult(const FederSegmentSearchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  visit_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_visit_info().empty()) {
    visit_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_visit_info(),
      GetArena());
  }
  segmentid_ = from.segmentid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.FederSegmentSearchResult)
}

void FederSegmentSearchResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FederSegmentSearchResult_feder_2eproto.base);
  visit_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  segmentid_ = PROTOBUF_LONGLONG(0);
}

FederSegmentSearchResult::~FederSegmentSearchResult() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.FederSegmentSearchResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FederSegmentSearchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  visit_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FederSegmentSearchResult::ArenaDtor(void* object) {
  FederSegmentSearchResult* _this = reinterpret_cast< FederSegmentSearchResult* >(object);
  (void)_this;
}
void FederSegmentSearchResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FederSegmentSearchResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FederSegmentSearchResult& FederSegmentSearchResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FederSegmentSearchResult_feder_2eproto.base);
  return *internal_default_instance();
}


void FederSegmentSearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.FederSegmentSearchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visit_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  segmentid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FederSegmentSearchResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string visit_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_visit_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.feder.FederSegmentSearchResult.visit_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FederSegmentSearchResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.FederSegmentSearchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // string visit_info = 2;
  if (this->visit_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_visit_info().data(), static_cast<int>(this->_internal_visit_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.FederSegmentSearchResult.visit_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_visit_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.FederSegmentSearchResult)
  return target;
}

size_t FederSegmentSearchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.FederSegmentSearchResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string visit_info = 2;
  if (this->visit_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visit_info());
  }

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_segmentid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FederSegmentSearchResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.feder.FederSegmentSearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FederSegmentSearchResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FederSegmentSearchResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.feder.FederSegmentSearchResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.feder.FederSegmentSearchResult)
    MergeFrom(*source);
  }
}

void FederSegmentSearchResult::MergeFrom(const FederSegmentSearchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.FederSegmentSearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.visit_info().size() > 0) {
    _internal_set_visit_info(from._internal_visit_info());
  }
  if (from.segmentid() != 0) {
    _internal_set_segmentid(from._internal_segmentid());
  }
}

void FederSegmentSearchResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.feder.FederSegmentSearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FederSegmentSearchResult::CopyFrom(const FederSegmentSearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.FederSegmentSearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FederSegmentSearchResult::IsInitialized() const {
  return true;
}

void FederSegmentSearchResult::InternalSwap(FederSegmentSearchResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  visit_info_.Swap(&other->visit_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(segmentid_, other->segmentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FederSegmentSearchResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListIndexedSegmentRequest::InitAsDefaultInstance() {
  ::milvus::proto::feder::_ListIndexedSegmentRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ListIndexedSegmentRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ListIndexedSegmentRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ListIndexedSegmentRequest::_Internal::base(const ListIndexedSegmentRequest* msg) {
  return *msg->base_;
}
void ListIndexedSegmentRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ListIndexedSegmentRequest::ListIndexedSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.ListIndexedSegmentRequest)
}
ListIndexedSegmentRequest::ListIndexedSegmentRequest(const ListIndexedSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.ListIndexedSegmentRequest)
}

void ListIndexedSegmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListIndexedSegmentRequest_feder_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

ListIndexedSegmentRequest::~ListIndexedSegmentRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.ListIndexedSegmentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListIndexedSegmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ListIndexedSegmentRequest::ArenaDtor(void* object) {
  ListIndexedSegmentRequest* _this = reinterpret_cast< ListIndexedSegmentRequest* >(object);
  (void)_this;
}
void ListIndexedSegmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListIndexedSegmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListIndexedSegmentRequest& ListIndexedSegmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListIndexedSegmentRequest_feder_2eproto.base);
  return *internal_default_instance();
}


void ListIndexedSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.ListIndexedSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListIndexedSegmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.feder.ListIndexedSegmentRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.feder.ListIndexedSegmentRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListIndexedSegmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.ListIndexedSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string collection_name = 2;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.ListIndexedSegmentRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection_name(), target);
  }

  // string index_name = 3;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.ListIndexedSegmentRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.ListIndexedSegmentRequest)
  return target;
}

size_t ListIndexedSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.ListIndexedSegmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection_name = 2;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string index_name = 3;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListIndexedSegmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.feder.ListIndexedSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListIndexedSegmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListIndexedSegmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.feder.ListIndexedSegmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.feder.ListIndexedSegmentRequest)
    MergeFrom(*source);
  }
}

void ListIndexedSegmentRequest::MergeFrom(const ListIndexedSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.ListIndexedSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void ListIndexedSegmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.feder.ListIndexedSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListIndexedSegmentRequest::CopyFrom(const ListIndexedSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.ListIndexedSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIndexedSegmentRequest::IsInitialized() const {
  return true;
}

void ListIndexedSegmentRequest::InternalSwap(ListIndexedSegmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListIndexedSegmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListIndexedSegmentResponse::InitAsDefaultInstance() {
  ::milvus::proto::feder::_ListIndexedSegmentResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ListIndexedSegmentResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListIndexedSegmentResponse* msg);
};

const ::milvus::proto::common::Status&
ListIndexedSegmentResponse::_Internal::status(const ListIndexedSegmentResponse* msg) {
  return *msg->status_;
}
void ListIndexedSegmentResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ListIndexedSegmentResponse::ListIndexedSegmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segmentids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.ListIndexedSegmentResponse)
}
ListIndexedSegmentResponse::ListIndexedSegmentResponse(const ListIndexedSegmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segmentids_(from.segmentids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.ListIndexedSegmentResponse)
}

void ListIndexedSegmentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListIndexedSegmentResponse_feder_2eproto.base);
  status_ = nullptr;
}

ListIndexedSegmentResponse::~ListIndexedSegmentResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.ListIndexedSegmentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListIndexedSegmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ListIndexedSegmentResponse::ArenaDtor(void* object) {
  ListIndexedSegmentResponse* _this = reinterpret_cast< ListIndexedSegmentResponse* >(object);
  (void)_this;
}
void ListIndexedSegmentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListIndexedSegmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListIndexedSegmentResponse& ListIndexedSegmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListIndexedSegmentResponse_feder_2eproto.base);
  return *internal_default_instance();
}


void ListIndexedSegmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.ListIndexedSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segmentids_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListIndexedSegmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListIndexedSegmentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.ListIndexedSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated int64 segmentIDs = 2;
  {
    int byte_size = _segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segmentids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.ListIndexedSegmentResponse)
  return target;
}

size_t ListIndexedSegmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.ListIndexedSegmentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListIndexedSegmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.feder.ListIndexedSegmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListIndexedSegmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListIndexedSegmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.feder.ListIndexedSegmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.feder.ListIndexedSegmentResponse)
    MergeFrom(*source);
  }
}

void ListIndexedSegmentResponse::MergeFrom(const ListIndexedSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.ListIndexedSegmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segmentids_.MergeFrom(from.segmentids_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ListIndexedSegmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.feder.ListIndexedSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListIndexedSegmentResponse::CopyFrom(const ListIndexedSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.ListIndexedSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIndexedSegmentResponse::IsInitialized() const {
  return true;
}

void ListIndexedSegmentResponse::InternalSwap(ListIndexedSegmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segmentids_.InternalSwap(&other->segmentids_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListIndexedSegmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeSegmentIndexDataRequest::InitAsDefaultInstance() {
  ::milvus::proto::feder::_DescribeSegmentIndexDataRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DescribeSegmentIndexDataRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeSegmentIndexDataRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeSegmentIndexDataRequest::_Internal::base(const DescribeSegmentIndexDataRequest* msg) {
  return *msg->base_;
}
void DescribeSegmentIndexDataRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DescribeSegmentIndexDataRequest::DescribeSegmentIndexDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segmentsids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.DescribeSegmentIndexDataRequest)
}
DescribeSegmentIndexDataRequest::DescribeSegmentIndexDataRequest(const DescribeSegmentIndexDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segmentsids_(from.segmentsids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.DescribeSegmentIndexDataRequest)
}

void DescribeSegmentIndexDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeSegmentIndexDataRequest_feder_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DescribeSegmentIndexDataRequest::~DescribeSegmentIndexDataRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeSegmentIndexDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DescribeSegmentIndexDataRequest::ArenaDtor(void* object) {
  DescribeSegmentIndexDataRequest* _this = reinterpret_cast< DescribeSegmentIndexDataRequest* >(object);
  (void)_this;
}
void DescribeSegmentIndexDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeSegmentIndexDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeSegmentIndexDataRequest& DescribeSegmentIndexDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeSegmentIndexDataRequest_feder_2eproto.base);
  return *internal_default_instance();
}


void DescribeSegmentIndexDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segmentsids_.Clear();
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeSegmentIndexDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 segmentsIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentsids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_segmentsids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeSegmentIndexDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string collection_name = 2;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection_name(), target);
  }

  // string index_name = 3;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_index_name(), target);
  }

  // repeated int64 segmentsIDs = 4;
  {
    int byte_size = _segmentsids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_segmentsids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  return target;
}

size_t DescribeSegmentIndexDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentsIDs = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->segmentsids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _segmentsids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string collection_name = 2;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string index_name = 3;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeSegmentIndexDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeSegmentIndexDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeSegmentIndexDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.feder.DescribeSegmentIndexDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.feder.DescribeSegmentIndexDataRequest)
    MergeFrom(*source);
  }
}

void DescribeSegmentIndexDataRequest::MergeFrom(const DescribeSegmentIndexDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segmentsids_.MergeFrom(from.segmentsids_);
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DescribeSegmentIndexDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeSegmentIndexDataRequest::CopyFrom(const DescribeSegmentIndexDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.DescribeSegmentIndexDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeSegmentIndexDataRequest::IsInitialized() const {
  return true;
}

void DescribeSegmentIndexDataRequest::InternalSwap(DescribeSegmentIndexDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segmentsids_.InternalSwap(&other->segmentsids_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentIndexDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse() {}
DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::MergeFrom(const DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DescribeSegmentIndexDataResponse::InitAsDefaultInstance() {
  ::milvus::proto::feder::_DescribeSegmentIndexDataResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class DescribeSegmentIndexDataResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeSegmentIndexDataResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeSegmentIndexDataResponse::_Internal::status(const DescribeSegmentIndexDataResponse* msg) {
  return *msg->status_;
}
void DescribeSegmentIndexDataResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void DescribeSegmentIndexDataResponse::clear_index_params() {
  index_params_.Clear();
}
DescribeSegmentIndexDataResponse::DescribeSegmentIndexDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  index_data_(arena),
  index_params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.feder.DescribeSegmentIndexDataResponse)
}
DescribeSegmentIndexDataResponse::DescribeSegmentIndexDataResponse(const DescribeSegmentIndexDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      index_params_(from.index_params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_data_.MergeFrom(from.index_data_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.feder.DescribeSegmentIndexDataResponse)
}

void DescribeSegmentIndexDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeSegmentIndexDataResponse_feder_2eproto.base);
  status_ = nullptr;
}

DescribeSegmentIndexDataResponse::~DescribeSegmentIndexDataResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeSegmentIndexDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DescribeSegmentIndexDataResponse::ArenaDtor(void* object) {
  DescribeSegmentIndexDataResponse* _this = reinterpret_cast< DescribeSegmentIndexDataResponse* >(object);
  (void)_this;
}
void DescribeSegmentIndexDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeSegmentIndexDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeSegmentIndexDataResponse& DescribeSegmentIndexDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeSegmentIndexDataResponse_feder_2eproto.base);
  return *internal_default_instance();
}


void DescribeSegmentIndexDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_data_.Clear();
  index_params_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeSegmentIndexDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, .milvus.proto.feder.SegmentIndexData> index_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&index_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair index_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeSegmentIndexDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // map<int64, .milvus.proto.feder.SegmentIndexData> index_data = 2;
  if (!this->_internal_index_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_index_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_index_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >::const_iterator
          it = this->_internal_index_data().begin();
          it != this->_internal_index_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >::const_iterator
          it = this->_internal_index_data().begin();
          it != this->_internal_index_data().end(); ++it) {
        target = DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_index_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_index_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  return target;
}

size_t DescribeSegmentIndexDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .milvus.proto.feder.SegmentIndexData> index_data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_index_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >::const_iterator
      it = this->_internal_index_data().begin();
      it != this->_internal_index_data().end(); ++it) {
    total_size += DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 3;
  total_size += 1UL * this->_internal_index_params_size();
  for (const auto& msg : this->index_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeSegmentIndexDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeSegmentIndexDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeSegmentIndexDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.feder.DescribeSegmentIndexDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.feder.DescribeSegmentIndexDataResponse)
    MergeFrom(*source);
  }
}

void DescribeSegmentIndexDataResponse::MergeFrom(const DescribeSegmentIndexDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_data_.MergeFrom(from.index_data_);
  index_params_.MergeFrom(from.index_params_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void DescribeSegmentIndexDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeSegmentIndexDataResponse::CopyFrom(const DescribeSegmentIndexDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.feder.DescribeSegmentIndexDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeSegmentIndexDataResponse::IsInitialized() const {
  return true;
}

void DescribeSegmentIndexDataResponse::InternalSwap(DescribeSegmentIndexDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_data_.Swap(&other->index_data_);
  index_params_.InternalSwap(&other->index_params_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentIndexDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feder
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::SegmentIndexData* Arena::CreateMaybeMessage< ::milvus::proto::feder::SegmentIndexData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::SegmentIndexData >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::FederSegmentSearchResult* Arena::CreateMaybeMessage< ::milvus::proto::feder::FederSegmentSearchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::FederSegmentSearchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::ListIndexedSegmentRequest* Arena::CreateMaybeMessage< ::milvus::proto::feder::ListIndexedSegmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::ListIndexedSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::ListIndexedSegmentResponse* Arena::CreateMaybeMessage< ::milvus::proto::feder::ListIndexedSegmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::ListIndexedSegmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::DescribeSegmentIndexDataRequest* Arena::CreateMaybeMessage< ::milvus::proto::feder::DescribeSegmentIndexDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::DescribeSegmentIndexDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::feder::DescribeSegmentIndexDataResponse* Arena::CreateMaybeMessage< ::milvus::proto::feder::DescribeSegmentIndexDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::feder::DescribeSegmentIndexDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
