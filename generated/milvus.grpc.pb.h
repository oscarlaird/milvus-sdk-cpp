// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: milvus.proto
#ifndef GRPC_milvus_2eproto__INCLUDED
#define GRPC_milvus_2eproto__INCLUDED

#include "milvus.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace milvus {
namespace proto {
namespace milvus {

class MilvusService final {
 public:
  static constexpr char const* service_full_name() {
    return "milvus.proto.milvus.MilvusService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncCreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncCreateCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncCreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncCreateCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status DropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncDropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncDropCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncDropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncDropCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status HasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::milvus::proto::milvus::BoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>> AsyncHasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>>(AsyncHasCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>> PrepareAsyncHasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>>(PrepareAsyncHasCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncLoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncLoadCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncLoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncLoadCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status ReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncReleaseCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncReleaseCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status DescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::milvus::proto::milvus::DescribeCollectionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeCollectionResponse>> AsyncDescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeCollectionResponse>>(AsyncDescribeCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeCollectionResponse>> PrepareAsyncDescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeCollectionResponse>>(PrepareAsyncDescribeCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCollectionStatisticsResponse>> AsyncGetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCollectionStatisticsResponse>>(AsyncGetCollectionStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCollectionStatisticsResponse>> PrepareAsyncGetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCollectionStatisticsResponse>>(PrepareAsyncGetCollectionStatisticsRaw(context, request, cq));
    }
    virtual ::grpc::Status ShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::milvus::proto::milvus::ShowCollectionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowCollectionsResponse>> AsyncShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowCollectionsResponse>>(AsyncShowCollectionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowCollectionsResponse>> PrepareAsyncShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowCollectionsResponse>>(PrepareAsyncShowCollectionsRaw(context, request, cq));
    }
    virtual ::grpc::Status AlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncAlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncAlterCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncAlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncAlterCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status CreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncCreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncCreatePartitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncCreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncCreatePartitionRaw(context, request, cq));
    }
    virtual ::grpc::Status DropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncDropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncDropPartitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncDropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncDropPartitionRaw(context, request, cq));
    }
    virtual ::grpc::Status HasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::milvus::proto::milvus::BoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>> AsyncHasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>>(AsyncHasPartitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>> PrepareAsyncHasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>>(PrepareAsyncHasPartitionRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncLoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncLoadPartitionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncLoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncLoadPartitionsRaw(context, request, cq));
    }
    virtual ::grpc::Status ReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncReleasePartitionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncReleasePartitionsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPartitionStatisticsResponse>> AsyncGetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPartitionStatisticsResponse>>(AsyncGetPartitionStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPartitionStatisticsResponse>> PrepareAsyncGetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPartitionStatisticsResponse>>(PrepareAsyncGetPartitionStatisticsRaw(context, request, cq));
    }
    virtual ::grpc::Status ShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::milvus::proto::milvus::ShowPartitionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowPartitionsResponse>> AsyncShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowPartitionsResponse>>(AsyncShowPartitionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowPartitionsResponse>> PrepareAsyncShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowPartitionsResponse>>(PrepareAsyncShowPartitionsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::milvus::proto::milvus::GetLoadingProgressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadingProgressResponse>> AsyncGetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadingProgressResponse>>(AsyncGetLoadingProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadingProgressResponse>> PrepareAsyncGetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadingProgressResponse>>(PrepareAsyncGetLoadingProgressRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::milvus::proto::milvus::GetLoadStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadStateResponse>> AsyncGetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadStateResponse>>(AsyncGetLoadStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadStateResponse>> PrepareAsyncGetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadStateResponse>>(PrepareAsyncGetLoadStateRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncCreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncCreateAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncCreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncCreateAliasRaw(context, request, cq));
    }
    virtual ::grpc::Status DropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncDropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncDropAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncDropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncDropAliasRaw(context, request, cq));
    }
    virtual ::grpc::Status AlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncAlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncAlterAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncAlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncAlterAliasRaw(context, request, cq));
    }
    virtual ::grpc::Status DescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::milvus::proto::milvus::DescribeAliasResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeAliasResponse>> AsyncDescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeAliasResponse>>(AsyncDescribeAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeAliasResponse>> PrepareAsyncDescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeAliasResponse>>(PrepareAsyncDescribeAliasRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::milvus::proto::milvus::ListAliasesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListAliasesResponse>> AsyncListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListAliasesResponse>>(AsyncListAliasesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListAliasesResponse>> PrepareAsyncListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListAliasesResponse>>(PrepareAsyncListAliasesRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncCreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncCreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncCreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncCreateIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status AlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncAlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncAlterIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncAlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncAlterIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status DescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::milvus::proto::milvus::DescribeIndexResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeIndexResponse>> AsyncDescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeIndexResponse>>(AsyncDescribeIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeIndexResponse>> PrepareAsyncDescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeIndexResponse>>(PrepareAsyncDescribeIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status GetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStatisticsResponse>> AsyncGetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStatisticsResponse>>(AsyncGetIndexStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStatisticsResponse>> PrepareAsyncGetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStatisticsResponse>>(PrepareAsyncGetIndexStatisticsRaw(context, request, cq));
    }
    // Deprecated: use DescribeIndex instead
    virtual ::grpc::Status GetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::milvus::proto::milvus::GetIndexStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStateResponse>> AsyncGetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStateResponse>>(AsyncGetIndexStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStateResponse>> PrepareAsyncGetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStateResponse>>(PrepareAsyncGetIndexStateRaw(context, request, cq));
    }
    // Deprecated: use DescribeIndex instead
    virtual ::grpc::Status GetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexBuildProgressResponse>> AsyncGetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexBuildProgressResponse>>(AsyncGetIndexBuildProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexBuildProgressResponse>> PrepareAsyncGetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexBuildProgressResponse>>(PrepareAsyncGetIndexBuildProgressRaw(context, request, cq));
    }
    virtual ::grpc::Status DropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncDropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncDropIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncDropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncDropIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status Insert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::milvus::proto::milvus::MutationResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>> AsyncInsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>>(AsyncInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>> PrepareAsyncInsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>>(PrepareAsyncInsertRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::milvus::proto::milvus::MutationResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>> AsyncDelete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Upsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::milvus::proto::milvus::MutationResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>> AsyncUpsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>>(AsyncUpsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>> PrepareAsyncUpsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>>(PrepareAsyncUpsertRaw(context, request, cq));
    }
    virtual ::grpc::Status Search(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::milvus::proto::milvus::SearchResults* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>> AsyncSearch(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::milvus::proto::milvus::SearchResults* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>> AsyncSearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>>(AsyncSearchV2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>> PrepareAsyncSearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>>(PrepareAsyncSearchV2Raw(context, request, cq));
    }
    virtual ::grpc::Status Flush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::milvus::proto::milvus::FlushResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushResponse>> AsyncFlush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushResponse>>(AsyncFlushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushResponse>> PrepareAsyncFlush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushResponse>>(PrepareAsyncFlushRaw(context, request, cq));
    }
    virtual ::grpc::Status Query(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::milvus::proto::milvus::QueryResults* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::QueryResults>> AsyncQuery(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::QueryResults>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::QueryResults>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::QueryResults>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status CalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::milvus::proto::milvus::CalcDistanceResults* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CalcDistanceResults>> AsyncCalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CalcDistanceResults>>(AsyncCalcDistanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CalcDistanceResults>> PrepareAsyncCalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CalcDistanceResults>>(PrepareAsyncCalcDistanceRaw(context, request, cq));
    }
    virtual ::grpc::Status FlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::milvus::proto::milvus::FlushAllResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushAllResponse>> AsyncFlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushAllResponse>>(AsyncFlushAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushAllResponse>> PrepareAsyncFlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushAllResponse>>(PrepareAsyncFlushAllRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::milvus::proto::milvus::GetFlushStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushStateResponse>> AsyncGetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushStateResponse>>(AsyncGetFlushStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushStateResponse>> PrepareAsyncGetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushStateResponse>>(PrepareAsyncGetFlushStateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::milvus::proto::milvus::GetFlushAllStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushAllStateResponse>> AsyncGetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushAllStateResponse>>(AsyncGetFlushAllStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushAllStateResponse>> PrepareAsyncGetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushAllStateResponse>>(PrepareAsyncGetFlushAllStateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>> AsyncGetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>>(AsyncGetPersistentSegmentInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>> PrepareAsyncGetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>>(PrepareAsyncGetPersistentSegmentInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>> AsyncGetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>>(AsyncGetQuerySegmentInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>> PrepareAsyncGetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>>(PrepareAsyncGetQuerySegmentInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::milvus::proto::milvus::GetReplicasResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetReplicasResponse>> AsyncGetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetReplicasResponse>>(AsyncGetReplicasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetReplicasResponse>> PrepareAsyncGetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetReplicasResponse>>(PrepareAsyncGetReplicasRaw(context, request, cq));
    }
    virtual ::grpc::Status Dummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::milvus::proto::milvus::DummyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DummyResponse>> AsyncDummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DummyResponse>>(AsyncDummyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DummyResponse>> PrepareAsyncDummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DummyResponse>>(PrepareAsyncDummyRaw(context, request, cq));
    }
    // TODO: remove
    virtual ::grpc::Status RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::milvus::proto::milvus::RegisterLinkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>> AsyncRegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>>(AsyncRegisterLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>> PrepareAsyncRegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>>(PrepareAsyncRegisterLinkRaw(context, request, cq));
    }
    // https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
    virtual ::grpc::Status GetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::milvus::proto::milvus::GetMetricsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetMetricsResponse>> AsyncGetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetMetricsResponse>>(AsyncGetMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetMetricsResponse>> PrepareAsyncGetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetMetricsResponse>>(PrepareAsyncGetMetricsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::milvus::proto::milvus::ComponentStates* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>> AsyncGetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>>(AsyncGetComponentStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>> PrepareAsyncGetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>>(PrepareAsyncGetComponentStatesRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncLoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncLoadBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncLoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncLoadBalanceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::milvus::proto::milvus::GetCompactionStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionStateResponse>> AsyncGetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionStateResponse>>(AsyncGetCompactionStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionStateResponse>> PrepareAsyncGetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionStateResponse>>(PrepareAsyncGetCompactionStateRaw(context, request, cq));
    }
    virtual ::grpc::Status ManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::milvus::proto::milvus::ManualCompactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ManualCompactionResponse>> AsyncManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ManualCompactionResponse>>(AsyncManualCompactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ManualCompactionResponse>> PrepareAsyncManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ManualCompactionResponse>>(PrepareAsyncManualCompactionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::milvus::proto::milvus::GetCompactionPlansResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionPlansResponse>> AsyncGetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionPlansResponse>>(AsyncGetCompactionStateWithPlansRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionPlansResponse>> PrepareAsyncGetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionPlansResponse>>(PrepareAsyncGetCompactionStateWithPlansRaw(context, request, cq));
    }
    // https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
    virtual ::grpc::Status Import(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::milvus::proto::milvus::ImportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ImportResponse>> AsyncImport(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ImportResponse>>(AsyncImportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ImportResponse>> PrepareAsyncImport(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ImportResponse>>(PrepareAsyncImportRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::milvus::proto::milvus::GetImportStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetImportStateResponse>> AsyncGetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetImportStateResponse>>(AsyncGetImportStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetImportStateResponse>> PrepareAsyncGetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetImportStateResponse>>(PrepareAsyncGetImportStateRaw(context, request, cq));
    }
    virtual ::grpc::Status ListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::milvus::proto::milvus::ListImportTasksResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListImportTasksResponse>> AsyncListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListImportTasksResponse>>(AsyncListImportTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListImportTasksResponse>> PrepareAsyncListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListImportTasksResponse>>(PrepareAsyncListImportTasksRaw(context, request, cq));
    }
    // https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
    virtual ::grpc::Status CreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncCreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncCreateCredentialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncCreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncCreateCredentialRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncUpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncUpdateCredentialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncUpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncUpdateCredentialRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncDeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncDeleteCredentialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncDeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncDeleteCredentialRaw(context, request, cq));
    }
    virtual ::grpc::Status ListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::milvus::proto::milvus::ListCredUsersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListCredUsersResponse>> AsyncListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListCredUsersResponse>>(AsyncListCredUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListCredUsersResponse>> PrepareAsyncListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListCredUsersResponse>>(PrepareAsyncListCredUsersRaw(context, request, cq));
    }
    // https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
    virtual ::grpc::Status CreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncCreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncCreateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncCreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncCreateRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status DropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncDropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncDropRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncDropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncDropRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status OperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncOperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncOperateUserRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncOperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncOperateUserRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::milvus::proto::milvus::SelectRoleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectRoleResponse>> AsyncSelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectRoleResponse>>(AsyncSelectRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectRoleResponse>> PrepareAsyncSelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectRoleResponse>>(PrepareAsyncSelectRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::milvus::proto::milvus::SelectUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectUserResponse>> AsyncSelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectUserResponse>>(AsyncSelectUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectUserResponse>> PrepareAsyncSelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectUserResponse>>(PrepareAsyncSelectUserRaw(context, request, cq));
    }
    virtual ::grpc::Status OperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncOperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncOperatePrivilegeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncOperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncOperatePrivilegeRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::milvus::proto::milvus::SelectGrantResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectGrantResponse>> AsyncSelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectGrantResponse>>(AsyncSelectGrantRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectGrantResponse>> PrepareAsyncSelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectGrantResponse>>(PrepareAsyncSelectGrantRaw(context, request, cq));
    }
    virtual ::grpc::Status GetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::milvus::proto::milvus::GetVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetVersionResponse>> AsyncGetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetVersionResponse>>(AsyncGetVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetVersionResponse>> PrepareAsyncGetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetVersionResponse>>(PrepareAsyncGetVersionRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::milvus::proto::milvus::CheckHealthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CheckHealthResponse>> AsyncCheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CheckHealthResponse>>(AsyncCheckHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CheckHealthResponse>> PrepareAsyncCheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CheckHealthResponse>>(PrepareAsyncCheckHealthRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncCreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncCreateResourceGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncCreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncCreateResourceGroupRaw(context, request, cq));
    }
    virtual ::grpc::Status DropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncDropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncDropResourceGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncDropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncDropResourceGroupRaw(context, request, cq));
    }
    virtual ::grpc::Status TransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncTransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncTransferNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncTransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncTransferNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status TransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncTransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncTransferReplicaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncTransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncTransferReplicaRaw(context, request, cq));
    }
    virtual ::grpc::Status ListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::milvus::proto::milvus::ListResourceGroupsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListResourceGroupsResponse>> AsyncListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListResourceGroupsResponse>>(AsyncListResourceGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListResourceGroupsResponse>> PrepareAsyncListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListResourceGroupsResponse>>(PrepareAsyncListResourceGroupsRaw(context, request, cq));
    }
    virtual ::grpc::Status DescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeResourceGroupResponse>> AsyncDescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeResourceGroupResponse>>(AsyncDescribeResourceGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeResourceGroupResponse>> PrepareAsyncDescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeResourceGroupResponse>>(PrepareAsyncDescribeResourceGroupRaw(context, request, cq));
    }
    virtual ::grpc::Status RenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncRenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncRenameCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncRenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncRenameCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status ListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::milvus::proto::feder::ListIndexedSegmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::ListIndexedSegmentResponse>> AsyncListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::ListIndexedSegmentResponse>>(AsyncListIndexedSegmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::ListIndexedSegmentResponse>> PrepareAsyncListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::ListIndexedSegmentResponse>>(PrepareAsyncListIndexedSegmentRaw(context, request, cq));
    }
    virtual ::grpc::Status DescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>> AsyncDescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>>(AsyncDescribeSegmentIndexDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>> PrepareAsyncDescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>>(PrepareAsyncDescribeSegmentIndexDataRaw(context, request, cq));
    }
    virtual ::grpc::Status Connect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::milvus::proto::milvus::ConnectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ConnectResponse>> AsyncConnect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ConnectResponse>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ConnectResponse>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ConnectResponse>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status AllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::milvus::proto::milvus::AllocTimestampResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::AllocTimestampResponse>> AsyncAllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::AllocTimestampResponse>>(AsyncAllocTimestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::AllocTimestampResponse>> PrepareAsyncAllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::AllocTimestampResponse>>(PrepareAsyncAllocTimestampRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncCreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncCreateDatabaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncCreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncCreateDatabaseRaw(context, request, cq));
    }
    virtual ::grpc::Status DropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::milvus::proto::common::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> AsyncDropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(AsyncDropDatabaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>> PrepareAsyncDropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>>(PrepareAsyncDropDatabaseRaw(context, request, cq));
    }
    virtual ::grpc::Status ListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::milvus::proto::milvus::ListDatabasesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListDatabasesResponse>> AsyncListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListDatabasesResponse>>(AsyncListDatabasesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListDatabasesResponse>> PrepareAsyncListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListDatabasesResponse>>(PrepareAsyncListDatabasesRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::milvus::proto::milvus::ReplicateMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ReplicateMessageResponse>> AsyncReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ReplicateMessageResponse>>(AsyncReplicateMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ReplicateMessageResponse>> PrepareAsyncReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ReplicateMessageResponse>>(PrepareAsyncReplicateMessageRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void HasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HasCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HasCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void LoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReleaseCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReleaseCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReleaseCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DescribeCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribeCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribeCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCollectionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCollectionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCollectionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AlterCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AlterCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AlterCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreatePartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreatePartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void HasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HasPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HasPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void LoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReleasePartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReleasePartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReleasePartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPartitionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPartitionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPartitionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShowPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShowPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShowPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLoadingProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLoadingProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLoadingProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest* request, ::milvus::proto::milvus::GetLoadStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLoadState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest* request, ::milvus::proto::milvus::GetLoadStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest* request, ::milvus::proto::milvus::GetLoadStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLoadState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLoadState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AlterAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AlterAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AlterAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest* request, ::milvus::proto::milvus::DescribeAliasResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DescribeAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeAliasResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest* request, ::milvus::proto::milvus::DescribeAliasResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest* request, ::milvus::proto::milvus::DescribeAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribeAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeAliasResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribeAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest* request, ::milvus::proto::milvus::ListAliasesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAliases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListAliasesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest* request, ::milvus::proto::milvus::ListAliasesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest* request, ::milvus::proto::milvus::ListAliasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAliases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListAliasesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAliases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListAliasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AlterIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AlterIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AlterIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest* request, ::milvus::proto::milvus::DescribeIndexResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeIndexResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest* request, ::milvus::proto::milvus::DescribeIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest* request, ::milvus::proto::milvus::DescribeIndexResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeIndexResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIndexStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetIndexStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetIndexStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Deprecated: use DescribeIndex instead
      virtual void GetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest* request, ::milvus::proto::milvus::GetIndexStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIndexState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest* request, ::milvus::proto::milvus::GetIndexStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest* request, ::milvus::proto::milvus::GetIndexStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetIndexState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetIndexState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Deprecated: use DescribeIndex instead
      virtual void GetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIndexBuildProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetIndexBuildProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetIndexBuildProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Insert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Insert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Insert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Insert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Insert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Insert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Delete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Upsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Upsert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Upsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Upsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Upsert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Upsert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Search(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Search(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Search(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SearchV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SearchV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Flush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest* request, ::milvus::proto::milvus::FlushResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Flush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest* request, ::milvus::proto::milvus::FlushResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Flush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest* request, ::milvus::proto::milvus::FlushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Query(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest* request, ::milvus::proto::milvus::QueryResults* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::QueryResults* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Query(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest* request, ::milvus::proto::milvus::QueryResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Query(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest* request, ::milvus::proto::milvus::QueryResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::QueryResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::QueryResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest* request, ::milvus::proto::milvus::CalcDistanceResults* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CalcDistance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CalcDistanceResults* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest* request, ::milvus::proto::milvus::CalcDistanceResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest* request, ::milvus::proto::milvus::CalcDistanceResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CalcDistance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CalcDistanceResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CalcDistance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CalcDistanceResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void FlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest* request, ::milvus::proto::milvus::FlushAllResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FlushAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushAllResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest* request, ::milvus::proto::milvus::FlushAllResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest* request, ::milvus::proto::milvus::FlushAllResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FlushAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushAllResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FlushAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushAllResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest* request, ::milvus::proto::milvus::GetFlushStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFlushState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest* request, ::milvus::proto::milvus::GetFlushStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest* request, ::milvus::proto::milvus::GetFlushStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFlushState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetFlushState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFlushAllState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFlushAllState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetFlushAllState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest* request, ::milvus::proto::milvus::GetReplicasResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetReplicas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetReplicasResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest* request, ::milvus::proto::milvus::GetReplicasResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest* request, ::milvus::proto::milvus::GetReplicasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetReplicas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetReplicasResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetReplicas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetReplicasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Dummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest* request, ::milvus::proto::milvus::DummyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Dummy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DummyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Dummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest* request, ::milvus::proto::milvus::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Dummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest* request, ::milvus::proto::milvus::DummyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Dummy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Dummy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DummyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // TODO: remove
      virtual void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
      virtual void GetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest* request, ::milvus::proto::milvus::GetMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest* request, ::milvus::proto::milvus::GetMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest* request, ::milvus::proto::milvus::GetMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetComponentStates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ComponentStates* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetComponentStates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetComponentStates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void LoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCompactionState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCompactionState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCompactionState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest* request, ::milvus::proto::milvus::ManualCompactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ManualCompaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ManualCompactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest* request, ::milvus::proto::milvus::ManualCompactionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest* request, ::milvus::proto::milvus::ManualCompactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ManualCompaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ManualCompactionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ManualCompaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ManualCompactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
      virtual void Import(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest* request, ::milvus::proto::milvus::ImportResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ImportResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Import(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest* request, ::milvus::proto::milvus::ImportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Import(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest* request, ::milvus::proto::milvus::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ImportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest* request, ::milvus::proto::milvus::GetImportStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImportState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetImportStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest* request, ::milvus::proto::milvus::GetImportStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest* request, ::milvus::proto::milvus::GetImportStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetImportState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetImportStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetImportState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetImportStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest* request, ::milvus::proto::milvus::ListImportTasksResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListImportTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListImportTasksResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest* request, ::milvus::proto::milvus::ListImportTasksResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest* request, ::milvus::proto::milvus::ListImportTasksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListImportTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListImportTasksResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListImportTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListImportTasksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
      virtual void CreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest* request, ::milvus::proto::milvus::ListCredUsersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCredUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListCredUsersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest* request, ::milvus::proto::milvus::ListCredUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest* request, ::milvus::proto::milvus::ListCredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListCredUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListCredUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListCredUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListCredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
      virtual void CreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void OperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OperateUserRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OperateUserRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OperateUserRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest* request, ::milvus::proto::milvus::SelectRoleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SelectRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectRoleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest* request, ::milvus::proto::milvus::SelectRoleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest* request, ::milvus::proto::milvus::SelectRoleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SelectRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectRoleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SelectRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectRoleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest* request, ::milvus::proto::milvus::SelectUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SelectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest* request, ::milvus::proto::milvus::SelectUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest* request, ::milvus::proto::milvus::SelectUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SelectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SelectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void OperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OperatePrivilege(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OperatePrivilege(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OperatePrivilege(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest* request, ::milvus::proto::milvus::SelectGrantResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SelectGrant(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectGrantResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest* request, ::milvus::proto::milvus::SelectGrantResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest* request, ::milvus::proto::milvus::SelectGrantResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SelectGrant(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectGrantResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SelectGrant(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectGrantResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest* request, ::milvus::proto::milvus::GetVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest* request, ::milvus::proto::milvus::GetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest* request, ::milvus::proto::milvus::GetVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest* request, ::milvus::proto::milvus::CheckHealthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CheckHealthResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest* request, ::milvus::proto::milvus::CheckHealthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest* request, ::milvus::proto::milvus::CheckHealthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CheckHealthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CheckHealthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TransferNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TransferNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TransferNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TransferReplica(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TransferReplica(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TransferReplica(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListResourceGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListResourceGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListResourceGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DescribeResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribeResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribeResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RenameCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RenameCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RenameCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListIndexedSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListIndexedSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListIndexedSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Connect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest* request, ::milvus::proto::milvus::ConnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ConnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Connect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest* request, ::milvus::proto::milvus::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Connect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest* request, ::milvus::proto::milvus::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest* request, ::milvus::proto::milvus::AllocTimestampResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AllocTimestamp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::AllocTimestampResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest* request, ::milvus::proto::milvus::AllocTimestampResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest* request, ::milvus::proto::milvus::AllocTimestampResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AllocTimestamp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::AllocTimestampResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AllocTimestamp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::AllocTimestampResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DropDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DropDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest* request, ::milvus::proto::milvus::ListDatabasesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDatabases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListDatabasesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest* request, ::milvus::proto::milvus::ListDatabasesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest* request, ::milvus::proto::milvus::ListDatabasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListDatabases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListDatabasesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListDatabases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListDatabasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplicateMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplicateMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplicateMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncDropCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncDropCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>* AsyncHasCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>* PrepareAsyncHasCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncLoadCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncLoadCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncReleaseCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncReleaseCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeCollectionResponse>* AsyncDescribeCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeCollectionResponse>* PrepareAsyncDescribeCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCollectionStatisticsResponse>* AsyncGetCollectionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCollectionStatisticsResponse>* PrepareAsyncGetCollectionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowCollectionsResponse>* AsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowCollectionsResponse>* PrepareAsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncAlterCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncAlterCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncCreatePartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncCreatePartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncDropPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncDropPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>* AsyncHasPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::BoolResponse>* PrepareAsyncHasPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncLoadPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncLoadPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncReleasePartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncReleasePartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPartitionStatisticsResponse>* AsyncGetPartitionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPartitionStatisticsResponse>* PrepareAsyncGetPartitionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowPartitionsResponse>* AsyncShowPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ShowPartitionsResponse>* PrepareAsyncShowPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadingProgressResponse>* AsyncGetLoadingProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadingProgressResponse>* PrepareAsyncGetLoadingProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadStateResponse>* AsyncGetLoadStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetLoadStateResponse>* PrepareAsyncGetLoadStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncCreateAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncCreateAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncDropAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncDropAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncAlterAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncAlterAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeAliasResponse>* AsyncDescribeAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeAliasResponse>* PrepareAsyncDescribeAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListAliasesResponse>* AsyncListAliasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListAliasesResponse>* PrepareAsyncListAliasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncAlterIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncAlterIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeIndexResponse>* AsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeIndexResponse>* PrepareAsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStatisticsResponse>* AsyncGetIndexStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStatisticsResponse>* PrepareAsyncGetIndexStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStateResponse>* AsyncGetIndexStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexStateResponse>* PrepareAsyncGetIndexStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexBuildProgressResponse>* AsyncGetIndexBuildProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetIndexBuildProgressResponse>* PrepareAsyncGetIndexBuildProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncDropIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncDropIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>* AsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>* PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>* AsyncUpsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::MutationResult>* PrepareAsyncUpsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>* AsyncSearchRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>* AsyncSearchV2Raw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SearchResults>* PrepareAsyncSearchV2Raw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushResponse>* AsyncFlushRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushResponse>* PrepareAsyncFlushRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::QueryResults>* AsyncQueryRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::QueryResults>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CalcDistanceResults>* AsyncCalcDistanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CalcDistanceResults>* PrepareAsyncCalcDistanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushAllResponse>* AsyncFlushAllRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::FlushAllResponse>* PrepareAsyncFlushAllRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushStateResponse>* AsyncGetFlushStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushStateResponse>* PrepareAsyncGetFlushStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushAllStateResponse>* AsyncGetFlushAllStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetFlushAllStateResponse>* PrepareAsyncGetFlushAllStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>* AsyncGetPersistentSegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>* PrepareAsyncGetPersistentSegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>* AsyncGetQuerySegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>* PrepareAsyncGetQuerySegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetReplicasResponse>* AsyncGetReplicasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetReplicasResponse>* PrepareAsyncGetReplicasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DummyResponse>* AsyncDummyRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DummyResponse>* PrepareAsyncDummyRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>* AsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>* PrepareAsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetMetricsResponse>* AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetMetricsResponse>* PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>* AsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ComponentStates>* PrepareAsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncLoadBalanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncLoadBalanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionStateResponse>* AsyncGetCompactionStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionStateResponse>* PrepareAsyncGetCompactionStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ManualCompactionResponse>* AsyncManualCompactionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ManualCompactionResponse>* PrepareAsyncManualCompactionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionPlansResponse>* AsyncGetCompactionStateWithPlansRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetCompactionPlansResponse>* PrepareAsyncGetCompactionStateWithPlansRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ImportResponse>* AsyncImportRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ImportResponse>* PrepareAsyncImportRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetImportStateResponse>* AsyncGetImportStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetImportStateResponse>* PrepareAsyncGetImportStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListImportTasksResponse>* AsyncListImportTasksRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListImportTasksResponse>* PrepareAsyncListImportTasksRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncCreateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncCreateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncUpdateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncUpdateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncDeleteCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncDeleteCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListCredUsersResponse>* AsyncListCredUsersRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListCredUsersResponse>* PrepareAsyncListCredUsersRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncDropRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncDropRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncOperateUserRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncOperateUserRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectRoleResponse>* AsyncSelectRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectRoleResponse>* PrepareAsyncSelectRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectUserResponse>* AsyncSelectUserRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectUserResponse>* PrepareAsyncSelectUserRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncOperatePrivilegeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncOperatePrivilegeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectGrantResponse>* AsyncSelectGrantRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::SelectGrantResponse>* PrepareAsyncSelectGrantRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetVersionResponse>* AsyncGetVersionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::GetVersionResponse>* PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CheckHealthResponse>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::CheckHealthResponse>* PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncCreateResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncCreateResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncDropResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncDropResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncTransferNodeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncTransferNodeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncTransferReplicaRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncTransferReplicaRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListResourceGroupsResponse>* AsyncListResourceGroupsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListResourceGroupsResponse>* PrepareAsyncListResourceGroupsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeResourceGroupResponse>* AsyncDescribeResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::DescribeResourceGroupResponse>* PrepareAsyncDescribeResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncRenameCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncRenameCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::ListIndexedSegmentResponse>* AsyncListIndexedSegmentRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::ListIndexedSegmentResponse>* PrepareAsyncListIndexedSegmentRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>* AsyncDescribeSegmentIndexDataRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>* PrepareAsyncDescribeSegmentIndexDataRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ConnectResponse>* AsyncConnectRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ConnectResponse>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::AllocTimestampResponse>* AsyncAllocTimestampRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::AllocTimestampResponse>* PrepareAsyncAllocTimestampRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* AsyncDropDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::common::Status>* PrepareAsyncDropDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListDatabasesResponse>* AsyncListDatabasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ListDatabasesResponse>* PrepareAsyncListDatabasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ReplicateMessageResponse>* AsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::ReplicateMessageResponse>* PrepareAsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncCreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncCreateCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncCreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncCreateCollectionRaw(context, request, cq));
    }
    ::grpc::Status DropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncDropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncDropCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncDropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncDropCollectionRaw(context, request, cq));
    }
    ::grpc::Status HasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::milvus::proto::milvus::BoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>> AsyncHasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>>(AsyncHasCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>> PrepareAsyncHasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>>(PrepareAsyncHasCollectionRaw(context, request, cq));
    }
    ::grpc::Status LoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncLoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncLoadCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncLoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncLoadCollectionRaw(context, request, cq));
    }
    ::grpc::Status ReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncReleaseCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncReleaseCollectionRaw(context, request, cq));
    }
    ::grpc::Status DescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::milvus::proto::milvus::DescribeCollectionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeCollectionResponse>> AsyncDescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeCollectionResponse>>(AsyncDescribeCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeCollectionResponse>> PrepareAsyncDescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeCollectionResponse>>(PrepareAsyncDescribeCollectionRaw(context, request, cq));
    }
    ::grpc::Status GetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCollectionStatisticsResponse>> AsyncGetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCollectionStatisticsResponse>>(AsyncGetCollectionStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCollectionStatisticsResponse>> PrepareAsyncGetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCollectionStatisticsResponse>>(PrepareAsyncGetCollectionStatisticsRaw(context, request, cq));
    }
    ::grpc::Status ShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::milvus::proto::milvus::ShowCollectionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowCollectionsResponse>> AsyncShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowCollectionsResponse>>(AsyncShowCollectionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowCollectionsResponse>> PrepareAsyncShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowCollectionsResponse>>(PrepareAsyncShowCollectionsRaw(context, request, cq));
    }
    ::grpc::Status AlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncAlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncAlterCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncAlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncAlterCollectionRaw(context, request, cq));
    }
    ::grpc::Status CreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncCreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncCreatePartitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncCreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncCreatePartitionRaw(context, request, cq));
    }
    ::grpc::Status DropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncDropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncDropPartitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncDropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncDropPartitionRaw(context, request, cq));
    }
    ::grpc::Status HasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::milvus::proto::milvus::BoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>> AsyncHasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>>(AsyncHasPartitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>> PrepareAsyncHasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>>(PrepareAsyncHasPartitionRaw(context, request, cq));
    }
    ::grpc::Status LoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncLoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncLoadPartitionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncLoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncLoadPartitionsRaw(context, request, cq));
    }
    ::grpc::Status ReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncReleasePartitionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncReleasePartitionsRaw(context, request, cq));
    }
    ::grpc::Status GetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPartitionStatisticsResponse>> AsyncGetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPartitionStatisticsResponse>>(AsyncGetPartitionStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPartitionStatisticsResponse>> PrepareAsyncGetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPartitionStatisticsResponse>>(PrepareAsyncGetPartitionStatisticsRaw(context, request, cq));
    }
    ::grpc::Status ShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::milvus::proto::milvus::ShowPartitionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowPartitionsResponse>> AsyncShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowPartitionsResponse>>(AsyncShowPartitionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowPartitionsResponse>> PrepareAsyncShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowPartitionsResponse>>(PrepareAsyncShowPartitionsRaw(context, request, cq));
    }
    ::grpc::Status GetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::milvus::proto::milvus::GetLoadingProgressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadingProgressResponse>> AsyncGetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadingProgressResponse>>(AsyncGetLoadingProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadingProgressResponse>> PrepareAsyncGetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadingProgressResponse>>(PrepareAsyncGetLoadingProgressRaw(context, request, cq));
    }
    ::grpc::Status GetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::milvus::proto::milvus::GetLoadStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadStateResponse>> AsyncGetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadStateResponse>>(AsyncGetLoadStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadStateResponse>> PrepareAsyncGetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadStateResponse>>(PrepareAsyncGetLoadStateRaw(context, request, cq));
    }
    ::grpc::Status CreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncCreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncCreateAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncCreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncCreateAliasRaw(context, request, cq));
    }
    ::grpc::Status DropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncDropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncDropAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncDropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncDropAliasRaw(context, request, cq));
    }
    ::grpc::Status AlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncAlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncAlterAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncAlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncAlterAliasRaw(context, request, cq));
    }
    ::grpc::Status DescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::milvus::proto::milvus::DescribeAliasResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeAliasResponse>> AsyncDescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeAliasResponse>>(AsyncDescribeAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeAliasResponse>> PrepareAsyncDescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeAliasResponse>>(PrepareAsyncDescribeAliasRaw(context, request, cq));
    }
    ::grpc::Status ListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::milvus::proto::milvus::ListAliasesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListAliasesResponse>> AsyncListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListAliasesResponse>>(AsyncListAliasesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListAliasesResponse>> PrepareAsyncListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListAliasesResponse>>(PrepareAsyncListAliasesRaw(context, request, cq));
    }
    ::grpc::Status CreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncCreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncCreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncCreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncCreateIndexRaw(context, request, cq));
    }
    ::grpc::Status AlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncAlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncAlterIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncAlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncAlterIndexRaw(context, request, cq));
    }
    ::grpc::Status DescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::milvus::proto::milvus::DescribeIndexResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeIndexResponse>> AsyncDescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeIndexResponse>>(AsyncDescribeIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeIndexResponse>> PrepareAsyncDescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeIndexResponse>>(PrepareAsyncDescribeIndexRaw(context, request, cq));
    }
    ::grpc::Status GetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStatisticsResponse>> AsyncGetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStatisticsResponse>>(AsyncGetIndexStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStatisticsResponse>> PrepareAsyncGetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStatisticsResponse>>(PrepareAsyncGetIndexStatisticsRaw(context, request, cq));
    }
    ::grpc::Status GetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::milvus::proto::milvus::GetIndexStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStateResponse>> AsyncGetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStateResponse>>(AsyncGetIndexStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStateResponse>> PrepareAsyncGetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStateResponse>>(PrepareAsyncGetIndexStateRaw(context, request, cq));
    }
    ::grpc::Status GetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexBuildProgressResponse>> AsyncGetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexBuildProgressResponse>>(AsyncGetIndexBuildProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexBuildProgressResponse>> PrepareAsyncGetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexBuildProgressResponse>>(PrepareAsyncGetIndexBuildProgressRaw(context, request, cq));
    }
    ::grpc::Status DropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncDropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncDropIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncDropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncDropIndexRaw(context, request, cq));
    }
    ::grpc::Status Insert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::milvus::proto::milvus::MutationResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>> AsyncInsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>>(AsyncInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>> PrepareAsyncInsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>>(PrepareAsyncInsertRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::milvus::proto::milvus::MutationResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>> AsyncDelete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Upsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::milvus::proto::milvus::MutationResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>> AsyncUpsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>>(AsyncUpsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>> PrepareAsyncUpsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>>(PrepareAsyncUpsertRaw(context, request, cq));
    }
    ::grpc::Status Search(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::milvus::proto::milvus::SearchResults* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>> AsyncSearch(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    ::grpc::Status SearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::milvus::proto::milvus::SearchResults* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>> AsyncSearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>>(AsyncSearchV2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>> PrepareAsyncSearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>>(PrepareAsyncSearchV2Raw(context, request, cq));
    }
    ::grpc::Status Flush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::milvus::proto::milvus::FlushResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushResponse>> AsyncFlush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushResponse>>(AsyncFlushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushResponse>> PrepareAsyncFlush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushResponse>>(PrepareAsyncFlushRaw(context, request, cq));
    }
    ::grpc::Status Query(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::milvus::proto::milvus::QueryResults* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::QueryResults>> AsyncQuery(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::QueryResults>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::QueryResults>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::QueryResults>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    ::grpc::Status CalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::milvus::proto::milvus::CalcDistanceResults* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CalcDistanceResults>> AsyncCalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CalcDistanceResults>>(AsyncCalcDistanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CalcDistanceResults>> PrepareAsyncCalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CalcDistanceResults>>(PrepareAsyncCalcDistanceRaw(context, request, cq));
    }
    ::grpc::Status FlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::milvus::proto::milvus::FlushAllResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushAllResponse>> AsyncFlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushAllResponse>>(AsyncFlushAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushAllResponse>> PrepareAsyncFlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushAllResponse>>(PrepareAsyncFlushAllRaw(context, request, cq));
    }
    ::grpc::Status GetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::milvus::proto::milvus::GetFlushStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushStateResponse>> AsyncGetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushStateResponse>>(AsyncGetFlushStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushStateResponse>> PrepareAsyncGetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushStateResponse>>(PrepareAsyncGetFlushStateRaw(context, request, cq));
    }
    ::grpc::Status GetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::milvus::proto::milvus::GetFlushAllStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushAllStateResponse>> AsyncGetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushAllStateResponse>>(AsyncGetFlushAllStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushAllStateResponse>> PrepareAsyncGetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushAllStateResponse>>(PrepareAsyncGetFlushAllStateRaw(context, request, cq));
    }
    ::grpc::Status GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>> AsyncGetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>>(AsyncGetPersistentSegmentInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>> PrepareAsyncGetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>>(PrepareAsyncGetPersistentSegmentInfoRaw(context, request, cq));
    }
    ::grpc::Status GetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>> AsyncGetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>>(AsyncGetQuerySegmentInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>> PrepareAsyncGetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>>(PrepareAsyncGetQuerySegmentInfoRaw(context, request, cq));
    }
    ::grpc::Status GetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::milvus::proto::milvus::GetReplicasResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetReplicasResponse>> AsyncGetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetReplicasResponse>>(AsyncGetReplicasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetReplicasResponse>> PrepareAsyncGetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetReplicasResponse>>(PrepareAsyncGetReplicasRaw(context, request, cq));
    }
    ::grpc::Status Dummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::milvus::proto::milvus::DummyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DummyResponse>> AsyncDummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DummyResponse>>(AsyncDummyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DummyResponse>> PrepareAsyncDummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DummyResponse>>(PrepareAsyncDummyRaw(context, request, cq));
    }
    ::grpc::Status RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::milvus::proto::milvus::RegisterLinkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>> AsyncRegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>>(AsyncRegisterLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>> PrepareAsyncRegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>>(PrepareAsyncRegisterLinkRaw(context, request, cq));
    }
    ::grpc::Status GetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::milvus::proto::milvus::GetMetricsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetMetricsResponse>> AsyncGetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetMetricsResponse>>(AsyncGetMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetMetricsResponse>> PrepareAsyncGetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetMetricsResponse>>(PrepareAsyncGetMetricsRaw(context, request, cq));
    }
    ::grpc::Status GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::milvus::proto::milvus::ComponentStates* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>> AsyncGetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>>(AsyncGetComponentStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>> PrepareAsyncGetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>>(PrepareAsyncGetComponentStatesRaw(context, request, cq));
    }
    ::grpc::Status LoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncLoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncLoadBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncLoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncLoadBalanceRaw(context, request, cq));
    }
    ::grpc::Status GetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::milvus::proto::milvus::GetCompactionStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionStateResponse>> AsyncGetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionStateResponse>>(AsyncGetCompactionStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionStateResponse>> PrepareAsyncGetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionStateResponse>>(PrepareAsyncGetCompactionStateRaw(context, request, cq));
    }
    ::grpc::Status ManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::milvus::proto::milvus::ManualCompactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ManualCompactionResponse>> AsyncManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ManualCompactionResponse>>(AsyncManualCompactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ManualCompactionResponse>> PrepareAsyncManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ManualCompactionResponse>>(PrepareAsyncManualCompactionRaw(context, request, cq));
    }
    ::grpc::Status GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::milvus::proto::milvus::GetCompactionPlansResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionPlansResponse>> AsyncGetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionPlansResponse>>(AsyncGetCompactionStateWithPlansRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionPlansResponse>> PrepareAsyncGetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionPlansResponse>>(PrepareAsyncGetCompactionStateWithPlansRaw(context, request, cq));
    }
    ::grpc::Status Import(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::milvus::proto::milvus::ImportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ImportResponse>> AsyncImport(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ImportResponse>>(AsyncImportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ImportResponse>> PrepareAsyncImport(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ImportResponse>>(PrepareAsyncImportRaw(context, request, cq));
    }
    ::grpc::Status GetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::milvus::proto::milvus::GetImportStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetImportStateResponse>> AsyncGetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetImportStateResponse>>(AsyncGetImportStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetImportStateResponse>> PrepareAsyncGetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetImportStateResponse>>(PrepareAsyncGetImportStateRaw(context, request, cq));
    }
    ::grpc::Status ListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::milvus::proto::milvus::ListImportTasksResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListImportTasksResponse>> AsyncListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListImportTasksResponse>>(AsyncListImportTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListImportTasksResponse>> PrepareAsyncListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListImportTasksResponse>>(PrepareAsyncListImportTasksRaw(context, request, cq));
    }
    ::grpc::Status CreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncCreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncCreateCredentialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncCreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncCreateCredentialRaw(context, request, cq));
    }
    ::grpc::Status UpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncUpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncUpdateCredentialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncUpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncUpdateCredentialRaw(context, request, cq));
    }
    ::grpc::Status DeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncDeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncDeleteCredentialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncDeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncDeleteCredentialRaw(context, request, cq));
    }
    ::grpc::Status ListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::milvus::proto::milvus::ListCredUsersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListCredUsersResponse>> AsyncListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListCredUsersResponse>>(AsyncListCredUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListCredUsersResponse>> PrepareAsyncListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListCredUsersResponse>>(PrepareAsyncListCredUsersRaw(context, request, cq));
    }
    ::grpc::Status CreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncCreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncCreateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncCreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncCreateRoleRaw(context, request, cq));
    }
    ::grpc::Status DropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncDropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncDropRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncDropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncDropRoleRaw(context, request, cq));
    }
    ::grpc::Status OperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncOperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncOperateUserRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncOperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncOperateUserRoleRaw(context, request, cq));
    }
    ::grpc::Status SelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::milvus::proto::milvus::SelectRoleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectRoleResponse>> AsyncSelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectRoleResponse>>(AsyncSelectRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectRoleResponse>> PrepareAsyncSelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectRoleResponse>>(PrepareAsyncSelectRoleRaw(context, request, cq));
    }
    ::grpc::Status SelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::milvus::proto::milvus::SelectUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectUserResponse>> AsyncSelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectUserResponse>>(AsyncSelectUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectUserResponse>> PrepareAsyncSelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectUserResponse>>(PrepareAsyncSelectUserRaw(context, request, cq));
    }
    ::grpc::Status OperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncOperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncOperatePrivilegeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncOperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncOperatePrivilegeRaw(context, request, cq));
    }
    ::grpc::Status SelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::milvus::proto::milvus::SelectGrantResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectGrantResponse>> AsyncSelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectGrantResponse>>(AsyncSelectGrantRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectGrantResponse>> PrepareAsyncSelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectGrantResponse>>(PrepareAsyncSelectGrantRaw(context, request, cq));
    }
    ::grpc::Status GetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::milvus::proto::milvus::GetVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetVersionResponse>> AsyncGetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetVersionResponse>>(AsyncGetVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetVersionResponse>> PrepareAsyncGetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetVersionResponse>>(PrepareAsyncGetVersionRaw(context, request, cq));
    }
    ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::milvus::proto::milvus::CheckHealthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CheckHealthResponse>> AsyncCheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CheckHealthResponse>>(AsyncCheckHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CheckHealthResponse>> PrepareAsyncCheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CheckHealthResponse>>(PrepareAsyncCheckHealthRaw(context, request, cq));
    }
    ::grpc::Status CreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncCreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncCreateResourceGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncCreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncCreateResourceGroupRaw(context, request, cq));
    }
    ::grpc::Status DropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncDropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncDropResourceGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncDropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncDropResourceGroupRaw(context, request, cq));
    }
    ::grpc::Status TransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncTransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncTransferNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncTransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncTransferNodeRaw(context, request, cq));
    }
    ::grpc::Status TransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncTransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncTransferReplicaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncTransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncTransferReplicaRaw(context, request, cq));
    }
    ::grpc::Status ListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::milvus::proto::milvus::ListResourceGroupsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListResourceGroupsResponse>> AsyncListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListResourceGroupsResponse>>(AsyncListResourceGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListResourceGroupsResponse>> PrepareAsyncListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListResourceGroupsResponse>>(PrepareAsyncListResourceGroupsRaw(context, request, cq));
    }
    ::grpc::Status DescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeResourceGroupResponse>> AsyncDescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeResourceGroupResponse>>(AsyncDescribeResourceGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeResourceGroupResponse>> PrepareAsyncDescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeResourceGroupResponse>>(PrepareAsyncDescribeResourceGroupRaw(context, request, cq));
    }
    ::grpc::Status RenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncRenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncRenameCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncRenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncRenameCollectionRaw(context, request, cq));
    }
    ::grpc::Status ListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::milvus::proto::feder::ListIndexedSegmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::ListIndexedSegmentResponse>> AsyncListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::ListIndexedSegmentResponse>>(AsyncListIndexedSegmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::ListIndexedSegmentResponse>> PrepareAsyncListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::ListIndexedSegmentResponse>>(PrepareAsyncListIndexedSegmentRaw(context, request, cq));
    }
    ::grpc::Status DescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>> AsyncDescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>>(AsyncDescribeSegmentIndexDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>> PrepareAsyncDescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>>(PrepareAsyncDescribeSegmentIndexDataRaw(context, request, cq));
    }
    ::grpc::Status Connect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::milvus::proto::milvus::ConnectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ConnectResponse>> AsyncConnect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ConnectResponse>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ConnectResponse>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ConnectResponse>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    ::grpc::Status AllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::milvus::proto::milvus::AllocTimestampResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::AllocTimestampResponse>> AsyncAllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::AllocTimestampResponse>>(AsyncAllocTimestampRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::AllocTimestampResponse>> PrepareAsyncAllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::AllocTimestampResponse>>(PrepareAsyncAllocTimestampRaw(context, request, cq));
    }
    ::grpc::Status CreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncCreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncCreateDatabaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncCreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncCreateDatabaseRaw(context, request, cq));
    }
    ::grpc::Status DropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::milvus::proto::common::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> AsyncDropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(AsyncDropDatabaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>> PrepareAsyncDropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>>(PrepareAsyncDropDatabaseRaw(context, request, cq));
    }
    ::grpc::Status ListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::milvus::proto::milvus::ListDatabasesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListDatabasesResponse>> AsyncListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListDatabasesResponse>>(AsyncListDatabasesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListDatabasesResponse>> PrepareAsyncListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListDatabasesResponse>>(PrepareAsyncListDatabasesRaw(context, request, cq));
    }
    ::grpc::Status ReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::milvus::proto::milvus::ReplicateMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ReplicateMessageResponse>> AsyncReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ReplicateMessageResponse>>(AsyncReplicateMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ReplicateMessageResponse>> PrepareAsyncReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ReplicateMessageResponse>>(PrepareAsyncReplicateMessageRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void HasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      void HasCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HasCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HasCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void LoadCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void ReleaseCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReleaseCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReleaseCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, std::function<void(::grpc::Status)>) override;
      void DescribeCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribeCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribeCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCollectionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCollectionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCollectionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, std::function<void(::grpc::Status)>) override;
      void ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void AlterCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AlterCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AlterCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void CreatePartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreatePartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreatePartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void DropPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void HasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      void HasPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HasPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HasPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void LoadPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void ReleasePartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReleasePartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReleasePartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPartitionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPartitionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPartitionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, std::function<void(::grpc::Status)>) override;
      void ShowPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShowPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShowPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLoadingProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLoadingProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLoadingProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest* request, ::milvus::proto::milvus::GetLoadStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLoadState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadStateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest* request, ::milvus::proto::milvus::GetLoadStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest* request, ::milvus::proto::milvus::GetLoadStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLoadState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLoadState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void DropAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void AlterAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AlterAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AlterAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest* request, ::milvus::proto::milvus::DescribeAliasResponse* response, std::function<void(::grpc::Status)>) override;
      void DescribeAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeAliasResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest* request, ::milvus::proto::milvus::DescribeAliasResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest* request, ::milvus::proto::milvus::DescribeAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribeAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeAliasResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribeAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest* request, ::milvus::proto::milvus::ListAliasesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAliases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListAliasesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest* request, ::milvus::proto::milvus::ListAliasesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest* request, ::milvus::proto::milvus::ListAliasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAliases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListAliasesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAliases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListAliasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void AlterIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AlterIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AlterIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest* request, ::milvus::proto::milvus::DescribeIndexResponse* response, std::function<void(::grpc::Status)>) override;
      void DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeIndexResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest* request, ::milvus::proto::milvus::DescribeIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest* request, ::milvus::proto::milvus::DescribeIndexResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeIndexResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetIndexStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetIndexStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetIndexStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest* request, ::milvus::proto::milvus::GetIndexStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetIndexState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest* request, ::milvus::proto::milvus::GetIndexStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest* request, ::milvus::proto::milvus::GetIndexStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetIndexState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetIndexState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetIndexBuildProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetIndexBuildProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetIndexBuildProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Insert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) override;
      void Insert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Insert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Insert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Insert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Insert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Delete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Upsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) override;
      void Upsert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Upsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Upsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Upsert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Upsert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Search(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)>) override;
      void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Search(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Search(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)>) override;
      void SearchV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SearchV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SearchV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Flush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest* request, ::milvus::proto::milvus::FlushResponse* response, std::function<void(::grpc::Status)>) override;
      void Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Flush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest* request, ::milvus::proto::milvus::FlushResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Flush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest* request, ::milvus::proto::milvus::FlushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Query(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest* request, ::milvus::proto::milvus::QueryResults* response, std::function<void(::grpc::Status)>) override;
      void Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::QueryResults* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Query(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest* request, ::milvus::proto::milvus::QueryResults* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Query(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest* request, ::milvus::proto::milvus::QueryResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::QueryResults* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::QueryResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest* request, ::milvus::proto::milvus::CalcDistanceResults* response, std::function<void(::grpc::Status)>) override;
      void CalcDistance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CalcDistanceResults* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest* request, ::milvus::proto::milvus::CalcDistanceResults* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest* request, ::milvus::proto::milvus::CalcDistanceResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CalcDistance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CalcDistanceResults* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CalcDistance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CalcDistanceResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void FlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest* request, ::milvus::proto::milvus::FlushAllResponse* response, std::function<void(::grpc::Status)>) override;
      void FlushAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushAllResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest* request, ::milvus::proto::milvus::FlushAllResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest* request, ::milvus::proto::milvus::FlushAllResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FlushAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushAllResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FlushAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushAllResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest* request, ::milvus::proto::milvus::GetFlushStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFlushState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushStateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest* request, ::milvus::proto::milvus::GetFlushStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest* request, ::milvus::proto::milvus::GetFlushStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFlushState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetFlushState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFlushAllState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFlushAllState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetFlushAllState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetQuerySegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest* request, ::milvus::proto::milvus::GetReplicasResponse* response, std::function<void(::grpc::Status)>) override;
      void GetReplicas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetReplicasResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest* request, ::milvus::proto::milvus::GetReplicasResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest* request, ::milvus::proto::milvus::GetReplicasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetReplicas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetReplicasResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetReplicas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetReplicasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Dummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest* request, ::milvus::proto::milvus::DummyResponse* response, std::function<void(::grpc::Status)>) override;
      void Dummy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DummyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Dummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest* request, ::milvus::proto::milvus::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Dummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest* request, ::milvus::proto::milvus::DummyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Dummy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DummyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Dummy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DummyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest* request, ::milvus::proto::milvus::GetMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest* request, ::milvus::proto::milvus::GetMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest* request, ::milvus::proto::milvus::GetMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, std::function<void(::grpc::Status)>) override;
      void GetComponentStates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ComponentStates* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetComponentStates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetComponentStates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void LoadBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCompactionState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCompactionState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCompactionState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest* request, ::milvus::proto::milvus::ManualCompactionResponse* response, std::function<void(::grpc::Status)>) override;
      void ManualCompaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ManualCompactionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest* request, ::milvus::proto::milvus::ManualCompactionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest* request, ::milvus::proto::milvus::ManualCompactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ManualCompaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ManualCompactionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ManualCompaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ManualCompactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Import(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest* request, ::milvus::proto::milvus::ImportResponse* response, std::function<void(::grpc::Status)>) override;
      void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ImportResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Import(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest* request, ::milvus::proto::milvus::ImportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Import(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest* request, ::milvus::proto::milvus::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ImportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest* request, ::milvus::proto::milvus::GetImportStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetImportState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetImportStateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest* request, ::milvus::proto::milvus::GetImportStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest* request, ::milvus::proto::milvus::GetImportStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetImportState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetImportStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetImportState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetImportStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest* request, ::milvus::proto::milvus::ListImportTasksResponse* response, std::function<void(::grpc::Status)>) override;
      void ListImportTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListImportTasksResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest* request, ::milvus::proto::milvus::ListImportTasksResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest* request, ::milvus::proto::milvus::ListImportTasksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListImportTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListImportTasksResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListImportTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListImportTasksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void CreateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void UpdateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void DeleteCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest* request, ::milvus::proto::milvus::ListCredUsersResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCredUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListCredUsersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest* request, ::milvus::proto::milvus::ListCredUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest* request, ::milvus::proto::milvus::ListCredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListCredUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListCredUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListCredUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListCredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void DropRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void OperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void OperateUserRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OperateUserRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OperateUserRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest* request, ::milvus::proto::milvus::SelectRoleResponse* response, std::function<void(::grpc::Status)>) override;
      void SelectRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectRoleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest* request, ::milvus::proto::milvus::SelectRoleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest* request, ::milvus::proto::milvus::SelectRoleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SelectRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectRoleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SelectRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectRoleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest* request, ::milvus::proto::milvus::SelectUserResponse* response, std::function<void(::grpc::Status)>) override;
      void SelectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectUserResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest* request, ::milvus::proto::milvus::SelectUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest* request, ::milvus::proto::milvus::SelectUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SelectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SelectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void OperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void OperatePrivilege(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OperatePrivilege(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OperatePrivilege(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest* request, ::milvus::proto::milvus::SelectGrantResponse* response, std::function<void(::grpc::Status)>) override;
      void SelectGrant(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectGrantResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest* request, ::milvus::proto::milvus::SelectGrantResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest* request, ::milvus::proto::milvus::SelectGrantResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SelectGrant(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectGrantResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SelectGrant(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectGrantResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest* request, ::milvus::proto::milvus::GetVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetVersionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest* request, ::milvus::proto::milvus::GetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest* request, ::milvus::proto::milvus::GetVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest* request, ::milvus::proto::milvus::CheckHealthResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CheckHealthResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest* request, ::milvus::proto::milvus::CheckHealthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest* request, ::milvus::proto::milvus::CheckHealthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CheckHealthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CheckHealthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void CreateResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void DropResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void TransferNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TransferNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TransferNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void TransferReplica(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TransferReplica(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TransferReplica(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListResourceGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListResourceGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListResourceGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, std::function<void(::grpc::Status)>) override;
      void DescribeResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribeResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribeResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void RenameCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RenameCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RenameCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, std::function<void(::grpc::Status)>) override;
      void ListIndexedSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListIndexedSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListIndexedSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, std::function<void(::grpc::Status)>) override;
      void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribeSegmentIndexData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Connect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest* request, ::milvus::proto::milvus::ConnectResponse* response, std::function<void(::grpc::Status)>) override;
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ConnectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Connect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest* request, ::milvus::proto::milvus::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Connect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest* request, ::milvus::proto::milvus::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest* request, ::milvus::proto::milvus::AllocTimestampResponse* response, std::function<void(::grpc::Status)>) override;
      void AllocTimestamp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::AllocTimestampResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest* request, ::milvus::proto::milvus::AllocTimestampResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest* request, ::milvus::proto::milvus::AllocTimestampResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AllocTimestamp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::AllocTimestampResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AllocTimestamp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::AllocTimestampResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      void DropDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DropDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DropDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest* request, ::milvus::proto::milvus::ListDatabasesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDatabases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListDatabasesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest* request, ::milvus::proto::milvus::ListDatabasesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest* request, ::milvus::proto::milvus::ListDatabasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListDatabases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListDatabasesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListDatabases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListDatabasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void ReplicateMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplicateMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplicateMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncDropCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncDropCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>* AsyncHasCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>* PrepareAsyncHasCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncLoadCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncLoadCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncReleaseCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncReleaseCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeCollectionResponse>* AsyncDescribeCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeCollectionResponse>* PrepareAsyncDescribeCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCollectionStatisticsResponse>* AsyncGetCollectionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCollectionStatisticsResponse>* PrepareAsyncGetCollectionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowCollectionsResponse>* AsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowCollectionsResponse>* PrepareAsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncAlterCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncAlterCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncCreatePartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncCreatePartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncDropPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncDropPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>* AsyncHasPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>* PrepareAsyncHasPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncLoadPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncLoadPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncReleasePartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncReleasePartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPartitionStatisticsResponse>* AsyncGetPartitionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPartitionStatisticsResponse>* PrepareAsyncGetPartitionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowPartitionsResponse>* AsyncShowPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowPartitionsResponse>* PrepareAsyncShowPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadingProgressResponse>* AsyncGetLoadingProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadingProgressResponse>* PrepareAsyncGetLoadingProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadStateResponse>* AsyncGetLoadStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadStateResponse>* PrepareAsyncGetLoadStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncCreateAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncCreateAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncDropAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncDropAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncAlterAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncAlterAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeAliasResponse>* AsyncDescribeAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeAliasResponse>* PrepareAsyncDescribeAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListAliasesResponse>* AsyncListAliasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListAliasesResponse>* PrepareAsyncListAliasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncAlterIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncAlterIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeIndexResponse>* AsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeIndexResponse>* PrepareAsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStatisticsResponse>* AsyncGetIndexStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStatisticsResponse>* PrepareAsyncGetIndexStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStateResponse>* AsyncGetIndexStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStateResponse>* PrepareAsyncGetIndexStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexBuildProgressResponse>* AsyncGetIndexBuildProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexBuildProgressResponse>* PrepareAsyncGetIndexBuildProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncDropIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncDropIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* AsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* AsyncUpsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* PrepareAsyncUpsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>* AsyncSearchRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>* AsyncSearchV2Raw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>* PrepareAsyncSearchV2Raw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushResponse>* AsyncFlushRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushResponse>* PrepareAsyncFlushRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::QueryResults>* AsyncQueryRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::QueryResults>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CalcDistanceResults>* AsyncCalcDistanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CalcDistanceResults>* PrepareAsyncCalcDistanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushAllResponse>* AsyncFlushAllRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushAllResponse>* PrepareAsyncFlushAllRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushStateResponse>* AsyncGetFlushStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushStateResponse>* PrepareAsyncGetFlushStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushAllStateResponse>* AsyncGetFlushAllStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushAllStateResponse>* PrepareAsyncGetFlushAllStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>* AsyncGetPersistentSegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>* PrepareAsyncGetPersistentSegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>* AsyncGetQuerySegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>* PrepareAsyncGetQuerySegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetReplicasResponse>* AsyncGetReplicasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetReplicasResponse>* PrepareAsyncGetReplicasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DummyResponse>* AsyncDummyRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DummyResponse>* PrepareAsyncDummyRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>* AsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>* PrepareAsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetMetricsResponse>* AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetMetricsResponse>* PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>* AsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>* PrepareAsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncLoadBalanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncLoadBalanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionStateResponse>* AsyncGetCompactionStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionStateResponse>* PrepareAsyncGetCompactionStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ManualCompactionResponse>* AsyncManualCompactionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ManualCompactionResponse>* PrepareAsyncManualCompactionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionPlansResponse>* AsyncGetCompactionStateWithPlansRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionPlansResponse>* PrepareAsyncGetCompactionStateWithPlansRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ImportResponse>* AsyncImportRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ImportResponse>* PrepareAsyncImportRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetImportStateResponse>* AsyncGetImportStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetImportStateResponse>* PrepareAsyncGetImportStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListImportTasksResponse>* AsyncListImportTasksRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListImportTasksResponse>* PrepareAsyncListImportTasksRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncCreateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncCreateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncUpdateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncUpdateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncDeleteCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncDeleteCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListCredUsersResponse>* AsyncListCredUsersRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListCredUsersResponse>* PrepareAsyncListCredUsersRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncDropRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncDropRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncOperateUserRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncOperateUserRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectRoleResponse>* AsyncSelectRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectRoleResponse>* PrepareAsyncSelectRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectUserResponse>* AsyncSelectUserRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectUserResponse>* PrepareAsyncSelectUserRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncOperatePrivilegeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncOperatePrivilegeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectGrantResponse>* AsyncSelectGrantRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectGrantResponse>* PrepareAsyncSelectGrantRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetVersionResponse>* AsyncGetVersionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetVersionResponse>* PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CheckHealthResponse>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CheckHealthResponse>* PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncCreateResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncCreateResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncDropResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncDropResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncTransferNodeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncTransferNodeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncTransferReplicaRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncTransferReplicaRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListResourceGroupsResponse>* AsyncListResourceGroupsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListResourceGroupsResponse>* PrepareAsyncListResourceGroupsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeResourceGroupResponse>* AsyncDescribeResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeResourceGroupResponse>* PrepareAsyncDescribeResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncRenameCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncRenameCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::ListIndexedSegmentResponse>* AsyncListIndexedSegmentRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::ListIndexedSegmentResponse>* PrepareAsyncListIndexedSegmentRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>* AsyncDescribeSegmentIndexDataRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>* PrepareAsyncDescribeSegmentIndexDataRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ConnectResponse>* AsyncConnectRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ConnectResponse>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::AllocTimestampResponse>* AsyncAllocTimestampRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::AllocTimestampResponse>* PrepareAsyncAllocTimestampRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* AsyncDropDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* PrepareAsyncDropDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListDatabasesResponse>* AsyncListDatabasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListDatabasesResponse>* PrepareAsyncListDatabasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ReplicateMessageResponse>* AsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ReplicateMessageResponse>* PrepareAsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_DropCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_HasCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_ReleaseCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_DescribeCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCollectionStatistics_;
    const ::grpc::internal::RpcMethod rpcmethod_ShowCollections_;
    const ::grpc::internal::RpcMethod rpcmethod_AlterCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePartition_;
    const ::grpc::internal::RpcMethod rpcmethod_DropPartition_;
    const ::grpc::internal::RpcMethod rpcmethod_HasPartition_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadPartitions_;
    const ::grpc::internal::RpcMethod rpcmethod_ReleasePartitions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPartitionStatistics_;
    const ::grpc::internal::RpcMethod rpcmethod_ShowPartitions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLoadingProgress_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLoadState_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAlias_;
    const ::grpc::internal::RpcMethod rpcmethod_DropAlias_;
    const ::grpc::internal::RpcMethod rpcmethod_AlterAlias_;
    const ::grpc::internal::RpcMethod rpcmethod_DescribeAlias_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAliases_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_AlterIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_DescribeIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIndexStatistics_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIndexState_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIndexBuildProgress_;
    const ::grpc::internal::RpcMethod rpcmethod_DropIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_Insert_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Upsert_;
    const ::grpc::internal::RpcMethod rpcmethod_Search_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchV2_;
    const ::grpc::internal::RpcMethod rpcmethod_Flush_;
    const ::grpc::internal::RpcMethod rpcmethod_Query_;
    const ::grpc::internal::RpcMethod rpcmethod_CalcDistance_;
    const ::grpc::internal::RpcMethod rpcmethod_FlushAll_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFlushState_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFlushAllState_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPersistentSegmentInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetQuerySegmentInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetReplicas_;
    const ::grpc::internal::RpcMethod rpcmethod_Dummy_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterLink_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_GetComponentStates_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCompactionState_;
    const ::grpc::internal::RpcMethod rpcmethod_ManualCompaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCompactionStateWithPlans_;
    const ::grpc::internal::RpcMethod rpcmethod_Import_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImportState_;
    const ::grpc::internal::RpcMethod rpcmethod_ListImportTasks_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCredential_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCredential_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCredential_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCredUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRole_;
    const ::grpc::internal::RpcMethod rpcmethod_DropRole_;
    const ::grpc::internal::RpcMethod rpcmethod_OperateUserRole_;
    const ::grpc::internal::RpcMethod rpcmethod_SelectRole_;
    const ::grpc::internal::RpcMethod rpcmethod_SelectUser_;
    const ::grpc::internal::RpcMethod rpcmethod_OperatePrivilege_;
    const ::grpc::internal::RpcMethod rpcmethod_SelectGrant_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckHealth_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateResourceGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_DropResourceGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferNode_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferReplica_;
    const ::grpc::internal::RpcMethod rpcmethod_ListResourceGroups_;
    const ::grpc::internal::RpcMethod rpcmethod_DescribeResourceGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_RenameCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_ListIndexedSegment_;
    const ::grpc::internal::RpcMethod rpcmethod_DescribeSegmentIndexData_;
    const ::grpc::internal::RpcMethod rpcmethod_Connect_;
    const ::grpc::internal::RpcMethod rpcmethod_AllocTimestamp_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDatabase_;
    const ::grpc::internal::RpcMethod rpcmethod_DropDatabase_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDatabases_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplicateMessage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateCollectionRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status DropCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropCollectionRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status HasCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::HasCollectionRequest* request, ::milvus::proto::milvus::BoolResponse* response);
    virtual ::grpc::Status LoadCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::LoadCollectionRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status ReleaseCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status DescribeCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest* request, ::milvus::proto::milvus::DescribeCollectionResponse* response);
    virtual ::grpc::Status GetCollectionStatistics(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response);
    virtual ::grpc::Status ShowCollections(::grpc::ServerContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest* request, ::milvus::proto::milvus::ShowCollectionsResponse* response);
    virtual ::grpc::Status AlterCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::AlterCollectionRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status CreatePartition(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreatePartitionRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status DropPartition(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropPartitionRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status HasPartition(::grpc::ServerContext* context, const ::milvus::proto::milvus::HasPartitionRequest* request, ::milvus::proto::milvus::BoolResponse* response);
    virtual ::grpc::Status LoadPartitions(::grpc::ServerContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status ReleasePartitions(::grpc::ServerContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status GetPartitionStatistics(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response);
    virtual ::grpc::Status ShowPartitions(::grpc::ServerContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest* request, ::milvus::proto::milvus::ShowPartitionsResponse* response);
    virtual ::grpc::Status GetLoadingProgress(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response);
    virtual ::grpc::Status GetLoadState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetLoadStateRequest* request, ::milvus::proto::milvus::GetLoadStateResponse* response);
    virtual ::grpc::Status CreateAlias(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateAliasRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status DropAlias(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropAliasRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status AlterAlias(::grpc::ServerContext* context, const ::milvus::proto::milvus::AlterAliasRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status DescribeAlias(::grpc::ServerContext* context, const ::milvus::proto::milvus::DescribeAliasRequest* request, ::milvus::proto::milvus::DescribeAliasResponse* response);
    virtual ::grpc::Status ListAliases(::grpc::ServerContext* context, const ::milvus::proto::milvus::ListAliasesRequest* request, ::milvus::proto::milvus::ListAliasesResponse* response);
    virtual ::grpc::Status CreateIndex(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateIndexRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status AlterIndex(::grpc::ServerContext* context, const ::milvus::proto::milvus::AlterIndexRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status DescribeIndex(::grpc::ServerContext* context, const ::milvus::proto::milvus::DescribeIndexRequest* request, ::milvus::proto::milvus::DescribeIndexResponse* response);
    virtual ::grpc::Status GetIndexStatistics(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response);
    // Deprecated: use DescribeIndex instead
    virtual ::grpc::Status GetIndexState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetIndexStateRequest* request, ::milvus::proto::milvus::GetIndexStateResponse* response);
    // Deprecated: use DescribeIndex instead
    virtual ::grpc::Status GetIndexBuildProgress(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response);
    virtual ::grpc::Status DropIndex(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropIndexRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status Insert(::grpc::ServerContext* context, const ::milvus::proto::milvus::InsertRequest* request, ::milvus::proto::milvus::MutationResult* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::milvus::proto::milvus::DeleteRequest* request, ::milvus::proto::milvus::MutationResult* response);
    virtual ::grpc::Status Upsert(::grpc::ServerContext* context, const ::milvus::proto::milvus::UpsertRequest* request, ::milvus::proto::milvus::MutationResult* response);
    virtual ::grpc::Status Search(::grpc::ServerContext* context, const ::milvus::proto::milvus::SearchRequest* request, ::milvus::proto::milvus::SearchResults* response);
    virtual ::grpc::Status SearchV2(::grpc::ServerContext* context, const ::milvus::proto::milvus::SearchRequestV2* request, ::milvus::proto::milvus::SearchResults* response);
    virtual ::grpc::Status Flush(::grpc::ServerContext* context, const ::milvus::proto::milvus::FlushRequest* request, ::milvus::proto::milvus::FlushResponse* response);
    virtual ::grpc::Status Query(::grpc::ServerContext* context, const ::milvus::proto::milvus::QueryRequest* request, ::milvus::proto::milvus::QueryResults* response);
    virtual ::grpc::Status CalcDistance(::grpc::ServerContext* context, const ::milvus::proto::milvus::CalcDistanceRequest* request, ::milvus::proto::milvus::CalcDistanceResults* response);
    virtual ::grpc::Status FlushAll(::grpc::ServerContext* context, const ::milvus::proto::milvus::FlushAllRequest* request, ::milvus::proto::milvus::FlushAllResponse* response);
    virtual ::grpc::Status GetFlushState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetFlushStateRequest* request, ::milvus::proto::milvus::GetFlushStateResponse* response);
    virtual ::grpc::Status GetFlushAllState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response);
    virtual ::grpc::Status GetPersistentSegmentInfo(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response);
    virtual ::grpc::Status GetQuerySegmentInfo(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response);
    virtual ::grpc::Status GetReplicas(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetReplicasRequest* request, ::milvus::proto::milvus::GetReplicasResponse* response);
    virtual ::grpc::Status Dummy(::grpc::ServerContext* context, const ::milvus::proto::milvus::DummyRequest* request, ::milvus::proto::milvus::DummyResponse* response);
    // TODO: remove
    virtual ::grpc::Status RegisterLink(::grpc::ServerContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response);
    // https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
    virtual ::grpc::Status GetMetrics(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetMetricsRequest* request, ::milvus::proto::milvus::GetMetricsResponse* response);
    virtual ::grpc::Status GetComponentStates(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response);
    virtual ::grpc::Status LoadBalance(::grpc::ServerContext* context, const ::milvus::proto::milvus::LoadBalanceRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status GetCompactionState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest* request, ::milvus::proto::milvus::GetCompactionStateResponse* response);
    virtual ::grpc::Status ManualCompaction(::grpc::ServerContext* context, const ::milvus::proto::milvus::ManualCompactionRequest* request, ::milvus::proto::milvus::ManualCompactionResponse* response);
    virtual ::grpc::Status GetCompactionStateWithPlans(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response);
    // https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
    virtual ::grpc::Status Import(::grpc::ServerContext* context, const ::milvus::proto::milvus::ImportRequest* request, ::milvus::proto::milvus::ImportResponse* response);
    virtual ::grpc::Status GetImportState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetImportStateRequest* request, ::milvus::proto::milvus::GetImportStateResponse* response);
    virtual ::grpc::Status ListImportTasks(::grpc::ServerContext* context, const ::milvus::proto::milvus::ListImportTasksRequest* request, ::milvus::proto::milvus::ListImportTasksResponse* response);
    // https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
    virtual ::grpc::Status CreateCredential(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateCredentialRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status UpdateCredential(::grpc::ServerContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status DeleteCredential(::grpc::ServerContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status ListCredUsers(::grpc::ServerContext* context, const ::milvus::proto::milvus::ListCredUsersRequest* request, ::milvus::proto::milvus::ListCredUsersResponse* response);
    // https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
    virtual ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateRoleRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status DropRole(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropRoleRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status OperateUserRole(::grpc::ServerContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status SelectRole(::grpc::ServerContext* context, const ::milvus::proto::milvus::SelectRoleRequest* request, ::milvus::proto::milvus::SelectRoleResponse* response);
    virtual ::grpc::Status SelectUser(::grpc::ServerContext* context, const ::milvus::proto::milvus::SelectUserRequest* request, ::milvus::proto::milvus::SelectUserResponse* response);
    virtual ::grpc::Status OperatePrivilege(::grpc::ServerContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status SelectGrant(::grpc::ServerContext* context, const ::milvus::proto::milvus::SelectGrantRequest* request, ::milvus::proto::milvus::SelectGrantResponse* response);
    virtual ::grpc::Status GetVersion(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetVersionRequest* request, ::milvus::proto::milvus::GetVersionResponse* response);
    virtual ::grpc::Status CheckHealth(::grpc::ServerContext* context, const ::milvus::proto::milvus::CheckHealthRequest* request, ::milvus::proto::milvus::CheckHealthResponse* response);
    virtual ::grpc::Status CreateResourceGroup(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status DropResourceGroup(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status TransferNode(::grpc::ServerContext* context, const ::milvus::proto::milvus::TransferNodeRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status TransferReplica(::grpc::ServerContext* context, const ::milvus::proto::milvus::TransferReplicaRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status ListResourceGroups(::grpc::ServerContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response);
    virtual ::grpc::Status DescribeResourceGroup(::grpc::ServerContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response);
    virtual ::grpc::Status RenameCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::RenameCollectionRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status ListIndexedSegment(::grpc::ServerContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response);
    virtual ::grpc::Status DescribeSegmentIndexData(::grpc::ServerContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response);
    virtual ::grpc::Status Connect(::grpc::ServerContext* context, const ::milvus::proto::milvus::ConnectRequest* request, ::milvus::proto::milvus::ConnectResponse* response);
    virtual ::grpc::Status AllocTimestamp(::grpc::ServerContext* context, const ::milvus::proto::milvus::AllocTimestampRequest* request, ::milvus::proto::milvus::AllocTimestampResponse* response);
    virtual ::grpc::Status CreateDatabase(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status DropDatabase(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropDatabaseRequest* request, ::milvus::proto::common::Status* response);
    virtual ::grpc::Status ListDatabases(::grpc::ServerContext* context, const ::milvus::proto::milvus::ListDatabasesRequest* request, ::milvus::proto::milvus::ListDatabasesResponse* response);
    virtual ::grpc::Status ReplicateMessage(::grpc::ServerContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest* request, ::milvus::proto::milvus::ReplicateMessageResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCollection() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCollection(::grpc::ServerContext* context, ::milvus::proto::milvus::CreateCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DropCollection() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropCollection(::grpc::ServerContext* context, ::milvus::proto::milvus::DropCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HasCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HasCollection() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_HasCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasCollectionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasCollection(::grpc::ServerContext* context, ::milvus::proto::milvus::HasCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::BoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadCollection() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LoadCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadCollection(::grpc::ServerContext* context, ::milvus::proto::milvus::LoadCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReleaseCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReleaseCollection() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReleaseCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleaseCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReleaseCollection(::grpc::ServerContext* context, ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DescribeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DescribeCollection() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DescribeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeCollectionRequest* /*request*/, ::milvus::proto::milvus::DescribeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeCollection(::grpc::ServerContext* context, ::milvus::proto::milvus::DescribeCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::DescribeCollectionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCollectionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCollectionStatistics() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetCollectionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetCollectionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCollectionStatistics(::grpc::ServerContext* context, ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetCollectionStatisticsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShowCollections() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowCollectionsRequest* /*request*/, ::milvus::proto::milvus::ShowCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShowCollections(::grpc::ServerContext* context, ::milvus::proto::milvus::ShowCollectionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ShowCollectionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AlterCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AlterCollection() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_AlterCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAlterCollection(::grpc::ServerContext* context, ::milvus::proto::milvus::AlterCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePartition() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CreatePartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreatePartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePartition(::grpc::ServerContext* context, ::milvus::proto::milvus::CreatePartitionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DropPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DropPartition() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DropPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropPartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropPartition(::grpc::ServerContext* context, ::milvus::proto::milvus::DropPartitionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HasPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HasPartition() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_HasPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasPartitionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasPartition(::grpc::ServerContext* context, ::milvus::proto::milvus::HasPartitionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::BoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadPartitions() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_LoadPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadPartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadPartitions(::grpc::ServerContext* context, ::milvus::proto::milvus::LoadPartitionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReleasePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReleasePartitions() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ReleasePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleasePartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleasePartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReleasePartitions(::grpc::ServerContext* context, ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPartitionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPartitionStatistics() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetPartitionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPartitionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetPartitionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPartitionStatistics(::grpc::ServerContext* context, ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetPartitionStatisticsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShowPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShowPartitions() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_ShowPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowPartitionsRequest* /*request*/, ::milvus::proto::milvus::ShowPartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShowPartitions(::grpc::ServerContext* context, ::milvus::proto::milvus::ShowPartitionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ShowPartitionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLoadingProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLoadingProgress() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetLoadingProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLoadingProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadingProgressRequest* /*request*/, ::milvus::proto::milvus::GetLoadingProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLoadingProgress(::grpc::ServerContext* context, ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetLoadingProgressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLoadState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLoadState() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetLoadState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLoadState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadStateRequest* /*request*/, ::milvus::proto::milvus::GetLoadStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLoadState(::grpc::ServerContext* context, ::milvus::proto::milvus::GetLoadStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetLoadStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAlias() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAlias(::grpc::ServerContext* context, ::milvus::proto::milvus::CreateAliasRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DropAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DropAlias() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_DropAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropAlias(::grpc::ServerContext* context, ::milvus::proto::milvus::DropAliasRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AlterAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AlterAlias() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_AlterAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAlterAlias(::grpc::ServerContext* context, ::milvus::proto::milvus::AlterAliasRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DescribeAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DescribeAlias() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_DescribeAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeAliasRequest* /*request*/, ::milvus::proto::milvus::DescribeAliasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeAlias(::grpc::ServerContext* context, ::milvus::proto::milvus::DescribeAliasRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::DescribeAliasResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAliases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAliases() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_ListAliases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAliases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListAliasesRequest* /*request*/, ::milvus::proto::milvus::ListAliasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAliases(::grpc::ServerContext* context, ::milvus::proto::milvus::ListAliasesRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ListAliasesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateIndex() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIndex(::grpc::ServerContext* context, ::milvus::proto::milvus::CreateIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AlterIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AlterIndex() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_AlterIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAlterIndex(::grpc::ServerContext* context, ::milvus::proto::milvus::AlterIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DescribeIndex() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeIndexRequest* /*request*/, ::milvus::proto::milvus::DescribeIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeIndex(::grpc::ServerContext* context, ::milvus::proto::milvus::DescribeIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::DescribeIndexResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIndexStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIndexStatistics() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_GetIndexStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetIndexStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIndexStatistics(::grpc::ServerContext* context, ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetIndexStatisticsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIndexState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIndexState() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_GetIndexState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStateRequest* /*request*/, ::milvus::proto::milvus::GetIndexStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIndexState(::grpc::ServerContext* context, ::milvus::proto::milvus::GetIndexStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetIndexStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIndexBuildProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIndexBuildProgress() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_GetIndexBuildProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexBuildProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* /*request*/, ::milvus::proto::milvus::GetIndexBuildProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIndexBuildProgress(::grpc::ServerContext* context, ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetIndexBuildProgressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DropIndex() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropIndex(::grpc::ServerContext* context, ::milvus::proto::milvus::DropIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Insert() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::InsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsert(::grpc::ServerContext* context, ::milvus::proto::milvus::InsertRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::MutationResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::milvus::proto::milvus::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::MutationResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Upsert() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsert(::grpc::ServerContext* context, ::milvus::proto::milvus::UpsertRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::MutationResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Search() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequest* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::milvus::proto::milvus::SearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::SearchResults>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchV2() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_SearchV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchV2(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequestV2* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchV2(::grpc::ServerContext* context, ::milvus::proto::milvus::SearchRequestV2* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::SearchResults>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Flush() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushRequest* /*request*/, ::milvus::proto::milvus::FlushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlush(::grpc::ServerContext* context, ::milvus::proto::milvus::FlushRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::FlushResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Query() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::QueryRequest* /*request*/, ::milvus::proto::milvus::QueryResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::milvus::proto::milvus::QueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::QueryResults>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CalcDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CalcDistance() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_CalcDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalcDistance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CalcDistanceRequest* /*request*/, ::milvus::proto::milvus::CalcDistanceResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCalcDistance(::grpc::ServerContext* context, ::milvus::proto::milvus::CalcDistanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::CalcDistanceResults>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FlushAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FlushAll() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_FlushAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushAll(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushAllRequest* /*request*/, ::milvus::proto::milvus::FlushAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlushAll(::grpc::ServerContext* context, ::milvus::proto::milvus::FlushAllRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::FlushAllResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFlushState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFlushState() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_GetFlushState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlushState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFlushState(::grpc::ServerContext* context, ::milvus::proto::milvus::GetFlushStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetFlushStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFlushAllState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFlushAllState() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_GetFlushAllState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlushAllState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushAllStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushAllStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFlushAllState(::grpc::ServerContext* context, ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetFlushAllStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPersistentSegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPersistentSegmentInfo() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_GetPersistentSegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPersistentSegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPersistentSegmentInfo(::grpc::ServerContext* context, ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetQuerySegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetQuerySegmentInfo() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_GetQuerySegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuerySegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQuerySegmentInfo(::grpc::ServerContext* context, ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetReplicas() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_GetReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplicas(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetReplicasRequest* /*request*/, ::milvus::proto::milvus::GetReplicasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplicas(::grpc::ServerContext* context, ::milvus::proto::milvus::GetReplicasRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetReplicasResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Dummy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Dummy() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_Dummy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dummy(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DummyRequest* /*request*/, ::milvus::proto::milvus::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDummy(::grpc::ServerContext* context, ::milvus::proto::milvus::DummyRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::DummyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterLink() {
      ::grpc::Service::MarkMethodAsync(45);
    }
    ~WithAsyncMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterLink(::grpc::ServerContext* context, ::milvus::proto::milvus::RegisterLinkRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::RegisterLinkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMetrics() {
      ::grpc::Service::MarkMethodAsync(46);
    }
    ~WithAsyncMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetMetricsRequest* /*request*/, ::milvus::proto::milvus::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetrics(::grpc::ServerContext* context, ::milvus::proto::milvus::GetMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetMetricsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetComponentStates() {
      ::grpc::Service::MarkMethodAsync(47);
    }
    ~WithAsyncMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetComponentStates(::grpc::ServerContext* context, ::milvus::proto::milvus::GetComponentStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ComponentStates>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadBalance() {
      ::grpc::Service::MarkMethodAsync(48);
    }
    ~WithAsyncMethod_LoadBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadBalance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadBalanceRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadBalance(::grpc::ServerContext* context, ::milvus::proto::milvus::LoadBalanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCompactionState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCompactionState() {
      ::grpc::Service::MarkMethodAsync(49);
    }
    ~WithAsyncMethod_GetCompactionState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompactionState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionStateRequest* /*request*/, ::milvus::proto::milvus::GetCompactionStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCompactionState(::grpc::ServerContext* context, ::milvus::proto::milvus::GetCompactionStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetCompactionStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ManualCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ManualCompaction() {
      ::grpc::Service::MarkMethodAsync(50);
    }
    ~WithAsyncMethod_ManualCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ManualCompaction(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ManualCompactionRequest* /*request*/, ::milvus::proto::milvus::ManualCompactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestManualCompaction(::grpc::ServerContext* context, ::milvus::proto::milvus::ManualCompactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ManualCompactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCompactionStateWithPlans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCompactionStateWithPlans() {
      ::grpc::Service::MarkMethodAsync(51);
    }
    ~WithAsyncMethod_GetCompactionStateWithPlans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompactionStateWithPlans(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionPlansRequest* /*request*/, ::milvus::proto::milvus::GetCompactionPlansResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCompactionStateWithPlans(::grpc::ServerContext* context, ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetCompactionPlansResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Import() {
      ::grpc::Service::MarkMethodAsync(52);
    }
    ~WithAsyncMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ImportRequest* /*request*/, ::milvus::proto::milvus::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImport(::grpc::ServerContext* context, ::milvus::proto::milvus::ImportRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ImportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImportState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImportState() {
      ::grpc::Service::MarkMethodAsync(53);
    }
    ~WithAsyncMethod_GetImportState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImportState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetImportStateRequest* /*request*/, ::milvus::proto::milvus::GetImportStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImportState(::grpc::ServerContext* context, ::milvus::proto::milvus::GetImportStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetImportStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(53, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListImportTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListImportTasks() {
      ::grpc::Service::MarkMethodAsync(54);
    }
    ~WithAsyncMethod_ListImportTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListImportTasks(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListImportTasksRequest* /*request*/, ::milvus::proto::milvus::ListImportTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListImportTasks(::grpc::ServerContext* context, ::milvus::proto::milvus::ListImportTasksRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ListImportTasksResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(54, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCredential() {
      ::grpc::Service::MarkMethodAsync(55);
    }
    ~WithAsyncMethod_CreateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCredential(::grpc::ServerContext* context, ::milvus::proto::milvus::CreateCredentialRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(55, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCredential() {
      ::grpc::Service::MarkMethodAsync(56);
    }
    ~WithAsyncMethod_UpdateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpdateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCredential(::grpc::ServerContext* context, ::milvus::proto::milvus::UpdateCredentialRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(56, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCredential() {
      ::grpc::Service::MarkMethodAsync(57);
    }
    ~WithAsyncMethod_DeleteCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCredential(::grpc::ServerContext* context, ::milvus::proto::milvus::DeleteCredentialRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(57, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCredUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListCredUsers() {
      ::grpc::Service::MarkMethodAsync(58);
    }
    ~WithAsyncMethod_ListCredUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCredUsers(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListCredUsersRequest* /*request*/, ::milvus::proto::milvus::ListCredUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCredUsers(::grpc::ServerContext* context, ::milvus::proto::milvus::ListCredUsersRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ListCredUsersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(58, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRole() {
      ::grpc::Service::MarkMethodAsync(59);
    }
    ~WithAsyncMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRole(::grpc::ServerContext* context, ::milvus::proto::milvus::CreateRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(59, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DropRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DropRole() {
      ::grpc::Service::MarkMethodAsync(60);
    }
    ~WithAsyncMethod_DropRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropRole(::grpc::ServerContext* context, ::milvus::proto::milvus::DropRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(60, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OperateUserRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OperateUserRole() {
      ::grpc::Service::MarkMethodAsync(61);
    }
    ~WithAsyncMethod_OperateUserRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateUserRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperateUserRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperateUserRole(::grpc::ServerContext* context, ::milvus::proto::milvus::OperateUserRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(61, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SelectRole() {
      ::grpc::Service::MarkMethodAsync(62);
    }
    ~WithAsyncMethod_SelectRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectRoleRequest* /*request*/, ::milvus::proto::milvus::SelectRoleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectRole(::grpc::ServerContext* context, ::milvus::proto::milvus::SelectRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::SelectRoleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(62, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SelectUser() {
      ::grpc::Service::MarkMethodAsync(63);
    }
    ~WithAsyncMethod_SelectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectUser(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectUserRequest* /*request*/, ::milvus::proto::milvus::SelectUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectUser(::grpc::ServerContext* context, ::milvus::proto::milvus::SelectUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::SelectUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(63, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OperatePrivilege : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OperatePrivilege() {
      ::grpc::Service::MarkMethodAsync(64);
    }
    ~WithAsyncMethod_OperatePrivilege() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperatePrivilege(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperatePrivilegeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperatePrivilege(::grpc::ServerContext* context, ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(64, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectGrant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SelectGrant() {
      ::grpc::Service::MarkMethodAsync(65);
    }
    ~WithAsyncMethod_SelectGrant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectGrant(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectGrantRequest* /*request*/, ::milvus::proto::milvus::SelectGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectGrant(::grpc::ServerContext* context, ::milvus::proto::milvus::SelectGrantRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::SelectGrantResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(65, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVersion() {
      ::grpc::Service::MarkMethodAsync(66);
    }
    ~WithAsyncMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetVersionRequest* /*request*/, ::milvus::proto::milvus::GetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVersion(::grpc::ServerContext* context, ::milvus::proto::milvus::GetVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::GetVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(66, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckHealth() {
      ::grpc::Service::MarkMethodAsync(67);
    }
    ~WithAsyncMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CheckHealthRequest* /*request*/, ::milvus::proto::milvus::CheckHealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHealth(::grpc::ServerContext* context, ::milvus::proto::milvus::CheckHealthRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::CheckHealthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(67, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateResourceGroup() {
      ::grpc::Service::MarkMethodAsync(68);
    }
    ~WithAsyncMethod_CreateResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateResourceGroup(::grpc::ServerContext* context, ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(68, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DropResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DropResourceGroup() {
      ::grpc::Service::MarkMethodAsync(69);
    }
    ~WithAsyncMethod_DropResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropResourceGroup(::grpc::ServerContext* context, ::milvus::proto::milvus::DropResourceGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(69, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferNode() {
      ::grpc::Service::MarkMethodAsync(70);
    }
    ~WithAsyncMethod_TransferNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferNode(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferNodeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferNode(::grpc::ServerContext* context, ::milvus::proto::milvus::TransferNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(70, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferReplica() {
      ::grpc::Service::MarkMethodAsync(71);
    }
    ~WithAsyncMethod_TransferReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferReplica(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferReplicaRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferReplica(::grpc::ServerContext* context, ::milvus::proto::milvus::TransferReplicaRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(71, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListResourceGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListResourceGroups() {
      ::grpc::Service::MarkMethodAsync(72);
    }
    ~WithAsyncMethod_ListResourceGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResourceGroups(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListResourceGroupsRequest* /*request*/, ::milvus::proto::milvus::ListResourceGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListResourceGroups(::grpc::ServerContext* context, ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ListResourceGroupsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(72, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DescribeResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DescribeResourceGroup() {
      ::grpc::Service::MarkMethodAsync(73);
    }
    ~WithAsyncMethod_DescribeResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeResourceGroupRequest* /*request*/, ::milvus::proto::milvus::DescribeResourceGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeResourceGroup(::grpc::ServerContext* context, ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::DescribeResourceGroupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(73, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RenameCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RenameCollection() {
      ::grpc::Service::MarkMethodAsync(74);
    }
    ~WithAsyncMethod_RenameCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RenameCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenameCollection(::grpc::ServerContext* context, ::milvus::proto::milvus::RenameCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(74, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListIndexedSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListIndexedSegment() {
      ::grpc::Service::MarkMethodAsync(75);
    }
    ~WithAsyncMethod_ListIndexedSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexedSegment(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::ListIndexedSegmentRequest* /*request*/, ::milvus::proto::feder::ListIndexedSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListIndexedSegment(::grpc::ServerContext* context, ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::feder::ListIndexedSegmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(75, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DescribeSegmentIndexData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DescribeSegmentIndexData() {
      ::grpc::Service::MarkMethodAsync(76);
    }
    ~WithAsyncMethod_DescribeSegmentIndexData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeSegmentIndexData(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* /*request*/, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeSegmentIndexData(::grpc::ServerContext* context, ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(76, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Connect() {
      ::grpc::Service::MarkMethodAsync(77);
    }
    ~WithAsyncMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ConnectRequest* /*request*/, ::milvus::proto::milvus::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::milvus::proto::milvus::ConnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ConnectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(77, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AllocTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AllocTimestamp() {
      ::grpc::Service::MarkMethodAsync(78);
    }
    ~WithAsyncMethod_AllocTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocTimestamp(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AllocTimestampRequest* /*request*/, ::milvus::proto::milvus::AllocTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocTimestamp(::grpc::ServerContext* context, ::milvus::proto::milvus::AllocTimestampRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::AllocTimestampResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(78, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDatabase() {
      ::grpc::Service::MarkMethodAsync(79);
    }
    ~WithAsyncMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDatabase(::grpc::ServerContext* context, ::milvus::proto::milvus::CreateDatabaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(79, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DropDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DropDatabase() {
      ::grpc::Service::MarkMethodAsync(80);
    }
    ~WithAsyncMethod_DropDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropDatabase(::grpc::ServerContext* context, ::milvus::proto::milvus::DropDatabaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::common::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(80, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDatabases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDatabases() {
      ::grpc::Service::MarkMethodAsync(81);
    }
    ~WithAsyncMethod_ListDatabases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatabases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListDatabasesRequest* /*request*/, ::milvus::proto::milvus::ListDatabasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDatabases(::grpc::ServerContext* context, ::milvus::proto::milvus::ListDatabasesRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ListDatabasesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(81, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplicateMessage() {
      ::grpc::Service::MarkMethodAsync(82);
    }
    ~WithAsyncMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReplicateMessageRequest* /*request*/, ::milvus::proto::milvus::ReplicateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateMessage(::grpc::ServerContext* context, ::milvus::proto::milvus::ReplicateMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::ReplicateMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(82, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateCollection<WithAsyncMethod_DropCollection<WithAsyncMethod_HasCollection<WithAsyncMethod_LoadCollection<WithAsyncMethod_ReleaseCollection<WithAsyncMethod_DescribeCollection<WithAsyncMethod_GetCollectionStatistics<WithAsyncMethod_ShowCollections<WithAsyncMethod_AlterCollection<WithAsyncMethod_CreatePartition<WithAsyncMethod_DropPartition<WithAsyncMethod_HasPartition<WithAsyncMethod_LoadPartitions<WithAsyncMethod_ReleasePartitions<WithAsyncMethod_GetPartitionStatistics<WithAsyncMethod_ShowPartitions<WithAsyncMethod_GetLoadingProgress<WithAsyncMethod_GetLoadState<WithAsyncMethod_CreateAlias<WithAsyncMethod_DropAlias<WithAsyncMethod_AlterAlias<WithAsyncMethod_DescribeAlias<WithAsyncMethod_ListAliases<WithAsyncMethod_CreateIndex<WithAsyncMethod_AlterIndex<WithAsyncMethod_DescribeIndex<WithAsyncMethod_GetIndexStatistics<WithAsyncMethod_GetIndexState<WithAsyncMethod_GetIndexBuildProgress<WithAsyncMethod_DropIndex<WithAsyncMethod_Insert<WithAsyncMethod_Delete<WithAsyncMethod_Upsert<WithAsyncMethod_Search<WithAsyncMethod_SearchV2<WithAsyncMethod_Flush<WithAsyncMethod_Query<WithAsyncMethod_CalcDistance<WithAsyncMethod_FlushAll<WithAsyncMethod_GetFlushState<WithAsyncMethod_GetFlushAllState<WithAsyncMethod_GetPersistentSegmentInfo<WithAsyncMethod_GetQuerySegmentInfo<WithAsyncMethod_GetReplicas<WithAsyncMethod_Dummy<WithAsyncMethod_RegisterLink<WithAsyncMethod_GetMetrics<WithAsyncMethod_GetComponentStates<WithAsyncMethod_LoadBalance<WithAsyncMethod_GetCompactionState<WithAsyncMethod_ManualCompaction<WithAsyncMethod_GetCompactionStateWithPlans<WithAsyncMethod_Import<WithAsyncMethod_GetImportState<WithAsyncMethod_ListImportTasks<WithAsyncMethod_CreateCredential<WithAsyncMethod_UpdateCredential<WithAsyncMethod_DeleteCredential<WithAsyncMethod_ListCredUsers<WithAsyncMethod_CreateRole<WithAsyncMethod_DropRole<WithAsyncMethod_OperateUserRole<WithAsyncMethod_SelectRole<WithAsyncMethod_SelectUser<WithAsyncMethod_OperatePrivilege<WithAsyncMethod_SelectGrant<WithAsyncMethod_GetVersion<WithAsyncMethod_CheckHealth<WithAsyncMethod_CreateResourceGroup<WithAsyncMethod_DropResourceGroup<WithAsyncMethod_TransferNode<WithAsyncMethod_TransferReplica<WithAsyncMethod_ListResourceGroups<WithAsyncMethod_DescribeResourceGroup<WithAsyncMethod_RenameCollection<WithAsyncMethod_ListIndexedSegment<WithAsyncMethod_DescribeSegmentIndexData<WithAsyncMethod_Connect<WithAsyncMethod_AllocTimestamp<WithAsyncMethod_CreateDatabase<WithAsyncMethod_DropDatabase<WithAsyncMethod_ListDatabases<WithAsyncMethod_ReplicateMessage<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateCollectionRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::CreateCollectionRequest* request, ::milvus::proto::common::Status* response) { return this->CreateCollection(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCollection(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::CreateCollectionRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateCollectionRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DropCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropCollectionRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DropCollectionRequest* request, ::milvus::proto::common::Status* response) { return this->DropCollection(context, request, response); }));}
    void SetMessageAllocatorFor_DropCollection(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DropCollectionRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropCollectionRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HasCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HasCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::HasCollectionRequest, ::milvus::proto::milvus::BoolResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::HasCollectionRequest* request, ::milvus::proto::milvus::BoolResponse* response) { return this->HasCollection(context, request, response); }));}
    void SetMessageAllocatorFor_HasCollection(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::HasCollectionRequest, ::milvus::proto::milvus::BoolResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::HasCollectionRequest, ::milvus::proto::milvus::BoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HasCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasCollectionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HasCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::HasCollectionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HasCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::HasCollectionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoadCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LoadCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::LoadCollectionRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::LoadCollectionRequest* request, ::milvus::proto::common::Status* response) { return this->LoadCollection(context, request, response); }));}
    void SetMessageAllocatorFor_LoadCollection(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::LoadCollectionRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::LoadCollectionRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LoadCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::LoadCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::LoadCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReleaseCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReleaseCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ReleaseCollectionRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::milvus::proto::common::Status* response) { return this->ReleaseCollection(context, request, response); }));}
    void SetMessageAllocatorFor_ReleaseCollection(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ReleaseCollectionRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ReleaseCollectionRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReleaseCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleaseCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReleaseCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ReleaseCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReleaseCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ReleaseCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DescribeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DescribeCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DescribeCollectionRequest, ::milvus::proto::milvus::DescribeCollectionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DescribeCollectionRequest* request, ::milvus::proto::milvus::DescribeCollectionResponse* response) { return this->DescribeCollection(context, request, response); }));}
    void SetMessageAllocatorFor_DescribeCollection(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DescribeCollectionRequest, ::milvus::proto::milvus::DescribeCollectionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DescribeCollectionRequest, ::milvus::proto::milvus::DescribeCollectionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DescribeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeCollectionRequest* /*request*/, ::milvus::proto::milvus::DescribeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribeCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DescribeCollectionRequest* /*request*/, ::milvus::proto::milvus::DescribeCollectionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribeCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DescribeCollectionRequest* /*request*/, ::milvus::proto::milvus::DescribeCollectionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCollectionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCollectionStatistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetCollectionStatisticsRequest, ::milvus::proto::milvus::GetCollectionStatisticsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response) { return this->GetCollectionStatistics(context, request, response); }));}
    void SetMessageAllocatorFor_GetCollectionStatistics(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetCollectionStatisticsRequest, ::milvus::proto::milvus::GetCollectionStatisticsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetCollectionStatisticsRequest, ::milvus::proto::milvus::GetCollectionStatisticsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCollectionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetCollectionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCollectionStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetCollectionStatisticsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCollectionStatistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetCollectionStatisticsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ShowCollections() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ShowCollectionsRequest, ::milvus::proto::milvus::ShowCollectionsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ShowCollectionsRequest* request, ::milvus::proto::milvus::ShowCollectionsResponse* response) { return this->ShowCollections(context, request, response); }));}
    void SetMessageAllocatorFor_ShowCollections(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ShowCollectionsRequest, ::milvus::proto::milvus::ShowCollectionsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ShowCollectionsRequest, ::milvus::proto::milvus::ShowCollectionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowCollectionsRequest* /*request*/, ::milvus::proto::milvus::ShowCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShowCollections(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ShowCollectionsRequest* /*request*/, ::milvus::proto::milvus::ShowCollectionsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShowCollections(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ShowCollectionsRequest* /*request*/, ::milvus::proto::milvus::ShowCollectionsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AlterCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AlterCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::AlterCollectionRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::AlterCollectionRequest* request, ::milvus::proto::common::Status* response) { return this->AlterCollection(context, request, response); }));}
    void SetMessageAllocatorFor_AlterCollection(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::AlterCollectionRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::AlterCollectionRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AlterCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AlterCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::AlterCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AlterCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::AlterCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreatePartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreatePartition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreatePartitionRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::CreatePartitionRequest* request, ::milvus::proto::common::Status* response) { return this->CreatePartition(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePartition(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::CreatePartitionRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreatePartitionRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreatePartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreatePartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreatePartition(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreatePartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreatePartition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreatePartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DropPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DropPartition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropPartitionRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DropPartitionRequest* request, ::milvus::proto::common::Status* response) { return this->DropPartition(context, request, response); }));}
    void SetMessageAllocatorFor_DropPartition(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DropPartitionRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropPartitionRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DropPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropPartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropPartition(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropPartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropPartition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropPartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HasPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HasPartition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::HasPartitionRequest, ::milvus::proto::milvus::BoolResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::HasPartitionRequest* request, ::milvus::proto::milvus::BoolResponse* response) { return this->HasPartition(context, request, response); }));}
    void SetMessageAllocatorFor_HasPartition(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::HasPartitionRequest, ::milvus::proto::milvus::BoolResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::HasPartitionRequest, ::milvus::proto::milvus::BoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HasPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasPartitionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HasPartition(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::HasPartitionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HasPartition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::HasPartitionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoadPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LoadPartitions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::LoadPartitionsRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::LoadPartitionsRequest* request, ::milvus::proto::common::Status* response) { return this->LoadPartitions(context, request, response); }));}
    void SetMessageAllocatorFor_LoadPartitions(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::LoadPartitionsRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::LoadPartitionsRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LoadPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadPartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadPartitions(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::LoadPartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadPartitions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::LoadPartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReleasePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReleasePartitions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ReleasePartitionsRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::milvus::proto::common::Status* response) { return this->ReleasePartitions(context, request, response); }));}
    void SetMessageAllocatorFor_ReleasePartitions(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ReleasePartitionsRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ReleasePartitionsRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReleasePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleasePartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleasePartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReleasePartitions(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ReleasePartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReleasePartitions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ReleasePartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPartitionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPartitionStatistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetPartitionStatisticsRequest, ::milvus::proto::milvus::GetPartitionStatisticsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response) { return this->GetPartitionStatistics(context, request, response); }));}
    void SetMessageAllocatorFor_GetPartitionStatistics(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetPartitionStatisticsRequest, ::milvus::proto::milvus::GetPartitionStatisticsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetPartitionStatisticsRequest, ::milvus::proto::milvus::GetPartitionStatisticsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPartitionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPartitionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetPartitionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPartitionStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetPartitionStatisticsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPartitionStatistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetPartitionStatisticsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShowPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ShowPartitions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ShowPartitionsRequest, ::milvus::proto::milvus::ShowPartitionsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ShowPartitionsRequest* request, ::milvus::proto::milvus::ShowPartitionsResponse* response) { return this->ShowPartitions(context, request, response); }));}
    void SetMessageAllocatorFor_ShowPartitions(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ShowPartitionsRequest, ::milvus::proto::milvus::ShowPartitionsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ShowPartitionsRequest, ::milvus::proto::milvus::ShowPartitionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ShowPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowPartitionsRequest* /*request*/, ::milvus::proto::milvus::ShowPartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShowPartitions(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ShowPartitionsRequest* /*request*/, ::milvus::proto::milvus::ShowPartitionsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShowPartitions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ShowPartitionsRequest* /*request*/, ::milvus::proto::milvus::ShowPartitionsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLoadingProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLoadingProgress() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(16,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetLoadingProgressRequest, ::milvus::proto::milvus::GetLoadingProgressResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response) { return this->GetLoadingProgress(context, request, response); }));}
    void SetMessageAllocatorFor_GetLoadingProgress(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetLoadingProgressRequest, ::milvus::proto::milvus::GetLoadingProgressResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(16);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetLoadingProgressRequest, ::milvus::proto::milvus::GetLoadingProgressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLoadingProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLoadingProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadingProgressRequest* /*request*/, ::milvus::proto::milvus::GetLoadingProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLoadingProgress(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadingProgressRequest* /*request*/, ::milvus::proto::milvus::GetLoadingProgressResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLoadingProgress(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadingProgressRequest* /*request*/, ::milvus::proto::milvus::GetLoadingProgressResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLoadState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLoadState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(17,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetLoadStateRequest, ::milvus::proto::milvus::GetLoadStateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetLoadStateRequest* request, ::milvus::proto::milvus::GetLoadStateResponse* response) { return this->GetLoadState(context, request, response); }));}
    void SetMessageAllocatorFor_GetLoadState(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetLoadStateRequest, ::milvus::proto::milvus::GetLoadStateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(17);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetLoadStateRequest, ::milvus::proto::milvus::GetLoadStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLoadState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLoadState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadStateRequest* /*request*/, ::milvus::proto::milvus::GetLoadStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLoadState(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadStateRequest* /*request*/, ::milvus::proto::milvus::GetLoadStateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLoadState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadStateRequest* /*request*/, ::milvus::proto::milvus::GetLoadStateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateAlias() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(18,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateAliasRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::CreateAliasRequest* request, ::milvus::proto::common::Status* response) { return this->CreateAlias(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAlias(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::CreateAliasRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(18);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateAliasRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateAlias(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateAlias(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DropAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DropAlias() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(19,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropAliasRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DropAliasRequest* request, ::milvus::proto::common::Status* response) { return this->DropAlias(context, request, response); }));}
    void SetMessageAllocatorFor_DropAlias(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DropAliasRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(19);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropAliasRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DropAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropAlias(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropAlias(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AlterAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AlterAlias() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(20,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::AlterAliasRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::AlterAliasRequest* request, ::milvus::proto::common::Status* response) { return this->AlterAlias(context, request, response); }));}
    void SetMessageAllocatorFor_AlterAlias(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::AlterAliasRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(20);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::AlterAliasRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AlterAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AlterAlias(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::AlterAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AlterAlias(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::AlterAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DescribeAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DescribeAlias() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(21,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DescribeAliasRequest, ::milvus::proto::milvus::DescribeAliasResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DescribeAliasRequest* request, ::milvus::proto::milvus::DescribeAliasResponse* response) { return this->DescribeAlias(context, request, response); }));}
    void SetMessageAllocatorFor_DescribeAlias(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DescribeAliasRequest, ::milvus::proto::milvus::DescribeAliasResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(21);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DescribeAliasRequest, ::milvus::proto::milvus::DescribeAliasResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DescribeAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeAliasRequest* /*request*/, ::milvus::proto::milvus::DescribeAliasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribeAlias(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DescribeAliasRequest* /*request*/, ::milvus::proto::milvus::DescribeAliasResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribeAlias(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DescribeAliasRequest* /*request*/, ::milvus::proto::milvus::DescribeAliasResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListAliases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListAliases() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(22,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ListAliasesRequest, ::milvus::proto::milvus::ListAliasesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ListAliasesRequest* request, ::milvus::proto::milvus::ListAliasesResponse* response) { return this->ListAliases(context, request, response); }));}
    void SetMessageAllocatorFor_ListAliases(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ListAliasesRequest, ::milvus::proto::milvus::ListAliasesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(22);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ListAliasesRequest, ::milvus::proto::milvus::ListAliasesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListAliases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAliases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListAliasesRequest* /*request*/, ::milvus::proto::milvus::ListAliasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAliases(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ListAliasesRequest* /*request*/, ::milvus::proto::milvus::ListAliasesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAliases(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ListAliasesRequest* /*request*/, ::milvus::proto::milvus::ListAliasesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateIndex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(23,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateIndexRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::CreateIndexRequest* request, ::milvus::proto::common::Status* response) { return this->CreateIndex(context, request, response); }));}
    void SetMessageAllocatorFor_CreateIndex(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::CreateIndexRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(23);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateIndexRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateIndex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AlterIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AlterIndex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(24,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::AlterIndexRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::AlterIndexRequest* request, ::milvus::proto::common::Status* response) { return this->AlterIndex(context, request, response); }));}
    void SetMessageAllocatorFor_AlterIndex(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::AlterIndexRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(24);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::AlterIndexRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AlterIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AlterIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::AlterIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AlterIndex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::AlterIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DescribeIndex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(25,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DescribeIndexRequest, ::milvus::proto::milvus::DescribeIndexResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DescribeIndexRequest* request, ::milvus::proto::milvus::DescribeIndexResponse* response) { return this->DescribeIndex(context, request, response); }));}
    void SetMessageAllocatorFor_DescribeIndex(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DescribeIndexRequest, ::milvus::proto::milvus::DescribeIndexResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(25);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DescribeIndexRequest, ::milvus::proto::milvus::DescribeIndexResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeIndexRequest* /*request*/, ::milvus::proto::milvus::DescribeIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribeIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DescribeIndexRequest* /*request*/, ::milvus::proto::milvus::DescribeIndexResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribeIndex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DescribeIndexRequest* /*request*/, ::milvus::proto::milvus::DescribeIndexResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetIndexStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetIndexStatistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(26,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetIndexStatisticsRequest, ::milvus::proto::milvus::GetIndexStatisticsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response) { return this->GetIndexStatistics(context, request, response); }));}
    void SetMessageAllocatorFor_GetIndexStatistics(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetIndexStatisticsRequest, ::milvus::proto::milvus::GetIndexStatisticsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(26);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetIndexStatisticsRequest, ::milvus::proto::milvus::GetIndexStatisticsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetIndexStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetIndexStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetIndexStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetIndexStatisticsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetIndexStatistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetIndexStatisticsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetIndexState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetIndexState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(27,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetIndexStateRequest, ::milvus::proto::milvus::GetIndexStateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetIndexStateRequest* request, ::milvus::proto::milvus::GetIndexStateResponse* response) { return this->GetIndexState(context, request, response); }));}
    void SetMessageAllocatorFor_GetIndexState(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetIndexStateRequest, ::milvus::proto::milvus::GetIndexStateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(27);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetIndexStateRequest, ::milvus::proto::milvus::GetIndexStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetIndexState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStateRequest* /*request*/, ::milvus::proto::milvus::GetIndexStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetIndexState(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStateRequest* /*request*/, ::milvus::proto::milvus::GetIndexStateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetIndexState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStateRequest* /*request*/, ::milvus::proto::milvus::GetIndexStateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetIndexBuildProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetIndexBuildProgress() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(28,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetIndexBuildProgressRequest, ::milvus::proto::milvus::GetIndexBuildProgressResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response) { return this->GetIndexBuildProgress(context, request, response); }));}
    void SetMessageAllocatorFor_GetIndexBuildProgress(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetIndexBuildProgressRequest, ::milvus::proto::milvus::GetIndexBuildProgressResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(28);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetIndexBuildProgressRequest, ::milvus::proto::milvus::GetIndexBuildProgressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetIndexBuildProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexBuildProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* /*request*/, ::milvus::proto::milvus::GetIndexBuildProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetIndexBuildProgress(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* /*request*/, ::milvus::proto::milvus::GetIndexBuildProgressResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetIndexBuildProgress(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* /*request*/, ::milvus::proto::milvus::GetIndexBuildProgressResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DropIndex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(29,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropIndexRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DropIndexRequest* request, ::milvus::proto::common::Status* response) { return this->DropIndex(context, request, response); }));}
    void SetMessageAllocatorFor_DropIndex(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DropIndexRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(29);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropIndexRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropIndex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Insert() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(30,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::InsertRequest, ::milvus::proto::milvus::MutationResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::InsertRequest* request, ::milvus::proto::milvus::MutationResult* response) { return this->Insert(context, request, response); }));}
    void SetMessageAllocatorFor_Insert(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::InsertRequest, ::milvus::proto::milvus::MutationResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(30);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::InsertRequest, ::milvus::proto::milvus::MutationResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::InsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Insert(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::InsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Insert(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::InsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(31,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DeleteRequest, ::milvus::proto::milvus::MutationResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DeleteRequest* request, ::milvus::proto::milvus::MutationResult* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DeleteRequest, ::milvus::proto::milvus::MutationResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(31);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DeleteRequest, ::milvus::proto::milvus::MutationResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DeleteRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DeleteRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Upsert() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(32,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::UpsertRequest, ::milvus::proto::milvus::MutationResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::UpsertRequest* request, ::milvus::proto::milvus::MutationResult* response) { return this->Upsert(context, request, response); }));}
    void SetMessageAllocatorFor_Upsert(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::UpsertRequest, ::milvus::proto::milvus::MutationResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(32);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::UpsertRequest, ::milvus::proto::milvus::MutationResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Upsert(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::UpsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Upsert(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::UpsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Search() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(33,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::SearchRequest, ::milvus::proto::milvus::SearchResults>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::SearchRequest* request, ::milvus::proto::milvus::SearchResults* response) { return this->Search(context, request, response); }));}
    void SetMessageAllocatorFor_Search(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::SearchRequest, ::milvus::proto::milvus::SearchResults>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(33);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::SearchRequest, ::milvus::proto::milvus::SearchResults>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequest* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Search(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequest* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Search(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequest* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SearchV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SearchV2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(34,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::SearchRequestV2, ::milvus::proto::milvus::SearchResults>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::SearchRequestV2* request, ::milvus::proto::milvus::SearchResults* response) { return this->SearchV2(context, request, response); }));}
    void SetMessageAllocatorFor_SearchV2(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::SearchRequestV2, ::milvus::proto::milvus::SearchResults>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(34);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::SearchRequestV2, ::milvus::proto::milvus::SearchResults>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SearchV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchV2(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequestV2* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SearchV2(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequestV2* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SearchV2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequestV2* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Flush() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(35,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::FlushRequest, ::milvus::proto::milvus::FlushResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::FlushRequest* request, ::milvus::proto::milvus::FlushResponse* response) { return this->Flush(context, request, response); }));}
    void SetMessageAllocatorFor_Flush(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::FlushRequest, ::milvus::proto::milvus::FlushResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(35);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::FlushRequest, ::milvus::proto::milvus::FlushResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushRequest* /*request*/, ::milvus::proto::milvus::FlushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Flush(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::FlushRequest* /*request*/, ::milvus::proto::milvus::FlushResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Flush(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::FlushRequest* /*request*/, ::milvus::proto::milvus::FlushResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Query() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(36,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::QueryRequest, ::milvus::proto::milvus::QueryResults>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::QueryRequest* request, ::milvus::proto::milvus::QueryResults* response) { return this->Query(context, request, response); }));}
    void SetMessageAllocatorFor_Query(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::QueryRequest, ::milvus::proto::milvus::QueryResults>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(36);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::QueryRequest, ::milvus::proto::milvus::QueryResults>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::QueryRequest* /*request*/, ::milvus::proto::milvus::QueryResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::QueryRequest* /*request*/, ::milvus::proto::milvus::QueryResults* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Query(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::QueryRequest* /*request*/, ::milvus::proto::milvus::QueryResults* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CalcDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CalcDistance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(37,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CalcDistanceRequest, ::milvus::proto::milvus::CalcDistanceResults>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::CalcDistanceRequest* request, ::milvus::proto::milvus::CalcDistanceResults* response) { return this->CalcDistance(context, request, response); }));}
    void SetMessageAllocatorFor_CalcDistance(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::CalcDistanceRequest, ::milvus::proto::milvus::CalcDistanceResults>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(37);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CalcDistanceRequest, ::milvus::proto::milvus::CalcDistanceResults>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CalcDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalcDistance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CalcDistanceRequest* /*request*/, ::milvus::proto::milvus::CalcDistanceResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CalcDistance(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CalcDistanceRequest* /*request*/, ::milvus::proto::milvus::CalcDistanceResults* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CalcDistance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CalcDistanceRequest* /*request*/, ::milvus::proto::milvus::CalcDistanceResults* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FlushAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FlushAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(38,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::FlushAllRequest, ::milvus::proto::milvus::FlushAllResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::FlushAllRequest* request, ::milvus::proto::milvus::FlushAllResponse* response) { return this->FlushAll(context, request, response); }));}
    void SetMessageAllocatorFor_FlushAll(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::FlushAllRequest, ::milvus::proto::milvus::FlushAllResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(38);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::FlushAllRequest, ::milvus::proto::milvus::FlushAllResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FlushAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushAll(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushAllRequest* /*request*/, ::milvus::proto::milvus::FlushAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FlushAll(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::FlushAllRequest* /*request*/, ::milvus::proto::milvus::FlushAllResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FlushAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::FlushAllRequest* /*request*/, ::milvus::proto::milvus::FlushAllResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFlushState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFlushState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(39,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetFlushStateRequest, ::milvus::proto::milvus::GetFlushStateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetFlushStateRequest* request, ::milvus::proto::milvus::GetFlushStateResponse* response) { return this->GetFlushState(context, request, response); }));}
    void SetMessageAllocatorFor_GetFlushState(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetFlushStateRequest, ::milvus::proto::milvus::GetFlushStateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(39);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(39);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetFlushStateRequest, ::milvus::proto::milvus::GetFlushStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetFlushState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlushState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFlushState(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushStateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFlushState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushStateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFlushAllState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFlushAllState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(40,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetFlushAllStateRequest, ::milvus::proto::milvus::GetFlushAllStateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response) { return this->GetFlushAllState(context, request, response); }));}
    void SetMessageAllocatorFor_GetFlushAllState(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetFlushAllStateRequest, ::milvus::proto::milvus::GetFlushAllStateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(40);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetFlushAllStateRequest, ::milvus::proto::milvus::GetFlushAllStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetFlushAllState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlushAllState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushAllStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushAllStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFlushAllState(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushAllStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushAllStateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFlushAllState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushAllStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushAllStateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPersistentSegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPersistentSegmentInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(41,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetPersistentSegmentInfoRequest, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response) { return this->GetPersistentSegmentInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetPersistentSegmentInfo(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetPersistentSegmentInfoRequest, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(41);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetPersistentSegmentInfoRequest, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPersistentSegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPersistentSegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPersistentSegmentInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPersistentSegmentInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetQuerySegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetQuerySegmentInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(42,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetQuerySegmentInfoRequest, ::milvus::proto::milvus::GetQuerySegmentInfoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response) { return this->GetQuerySegmentInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetQuerySegmentInfo(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetQuerySegmentInfoRequest, ::milvus::proto::milvus::GetQuerySegmentInfoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(42);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetQuerySegmentInfoRequest, ::milvus::proto::milvus::GetQuerySegmentInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetQuerySegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuerySegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetQuerySegmentInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetQuerySegmentInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetReplicas() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(43,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetReplicasRequest, ::milvus::proto::milvus::GetReplicasResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetReplicasRequest* request, ::milvus::proto::milvus::GetReplicasResponse* response) { return this->GetReplicas(context, request, response); }));}
    void SetMessageAllocatorFor_GetReplicas(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetReplicasRequest, ::milvus::proto::milvus::GetReplicasResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(43);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetReplicasRequest, ::milvus::proto::milvus::GetReplicasResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplicas(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetReplicasRequest* /*request*/, ::milvus::proto::milvus::GetReplicasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetReplicas(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetReplicasRequest* /*request*/, ::milvus::proto::milvus::GetReplicasResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetReplicas(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetReplicasRequest* /*request*/, ::milvus::proto::milvus::GetReplicasResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Dummy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Dummy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(44,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DummyRequest, ::milvus::proto::milvus::DummyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DummyRequest* request, ::milvus::proto::milvus::DummyResponse* response) { return this->Dummy(context, request, response); }));}
    void SetMessageAllocatorFor_Dummy(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DummyRequest, ::milvus::proto::milvus::DummyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(44);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DummyRequest, ::milvus::proto::milvus::DummyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Dummy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dummy(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DummyRequest* /*request*/, ::milvus::proto::milvus::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Dummy(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DummyRequest* /*request*/, ::milvus::proto::milvus::DummyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Dummy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DummyRequest* /*request*/, ::milvus::proto::milvus::DummyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterLink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(45,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response) { return this->RegisterLink(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterLink(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(45);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(45);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterLink(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterLink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMetrics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(46,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetMetricsRequest, ::milvus::proto::milvus::GetMetricsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetMetricsRequest* request, ::milvus::proto::milvus::GetMetricsResponse* response) { return this->GetMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_GetMetrics(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetMetricsRequest, ::milvus::proto::milvus::GetMetricsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(46);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(46);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetMetricsRequest, ::milvus::proto::milvus::GetMetricsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetMetricsRequest* /*request*/, ::milvus::proto::milvus::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetMetricsRequest* /*request*/, ::milvus::proto::milvus::GetMetricsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMetrics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetMetricsRequest* /*request*/, ::milvus::proto::milvus::GetMetricsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetComponentStates() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(47,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response) { return this->GetComponentStates(context, request, response); }));}
    void SetMessageAllocatorFor_GetComponentStates(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(47);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(47);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetComponentStates(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetComponentStates(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoadBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LoadBalance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(48,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::LoadBalanceRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::LoadBalanceRequest* request, ::milvus::proto::common::Status* response) { return this->LoadBalance(context, request, response); }));}
    void SetMessageAllocatorFor_LoadBalance(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::LoadBalanceRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(48);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(48);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::LoadBalanceRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LoadBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadBalance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadBalanceRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::LoadBalanceRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadBalance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::LoadBalanceRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCompactionState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCompactionState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(49,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetCompactionStateRequest, ::milvus::proto::milvus::GetCompactionStateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetCompactionStateRequest* request, ::milvus::proto::milvus::GetCompactionStateResponse* response) { return this->GetCompactionState(context, request, response); }));}
    void SetMessageAllocatorFor_GetCompactionState(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetCompactionStateRequest, ::milvus::proto::milvus::GetCompactionStateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(49);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(49);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetCompactionStateRequest, ::milvus::proto::milvus::GetCompactionStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCompactionState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompactionState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionStateRequest* /*request*/, ::milvus::proto::milvus::GetCompactionStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCompactionState(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionStateRequest* /*request*/, ::milvus::proto::milvus::GetCompactionStateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCompactionState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionStateRequest* /*request*/, ::milvus::proto::milvus::GetCompactionStateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ManualCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ManualCompaction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(50,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ManualCompactionRequest, ::milvus::proto::milvus::ManualCompactionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ManualCompactionRequest* request, ::milvus::proto::milvus::ManualCompactionResponse* response) { return this->ManualCompaction(context, request, response); }));}
    void SetMessageAllocatorFor_ManualCompaction(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ManualCompactionRequest, ::milvus::proto::milvus::ManualCompactionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(50);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(50);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ManualCompactionRequest, ::milvus::proto::milvus::ManualCompactionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ManualCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ManualCompaction(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ManualCompactionRequest* /*request*/, ::milvus::proto::milvus::ManualCompactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ManualCompaction(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ManualCompactionRequest* /*request*/, ::milvus::proto::milvus::ManualCompactionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ManualCompaction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ManualCompactionRequest* /*request*/, ::milvus::proto::milvus::ManualCompactionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCompactionStateWithPlans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCompactionStateWithPlans() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(51,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetCompactionPlansRequest, ::milvus::proto::milvus::GetCompactionPlansResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response) { return this->GetCompactionStateWithPlans(context, request, response); }));}
    void SetMessageAllocatorFor_GetCompactionStateWithPlans(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetCompactionPlansRequest, ::milvus::proto::milvus::GetCompactionPlansResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(51);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(51);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetCompactionPlansRequest, ::milvus::proto::milvus::GetCompactionPlansResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCompactionStateWithPlans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompactionStateWithPlans(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionPlansRequest* /*request*/, ::milvus::proto::milvus::GetCompactionPlansResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCompactionStateWithPlans(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionPlansRequest* /*request*/, ::milvus::proto::milvus::GetCompactionPlansResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCompactionStateWithPlans(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionPlansRequest* /*request*/, ::milvus::proto::milvus::GetCompactionPlansResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Import() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(52,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ImportRequest, ::milvus::proto::milvus::ImportResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ImportRequest* request, ::milvus::proto::milvus::ImportResponse* response) { return this->Import(context, request, response); }));}
    void SetMessageAllocatorFor_Import(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ImportRequest, ::milvus::proto::milvus::ImportResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(52);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(52);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ImportRequest, ::milvus::proto::milvus::ImportResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ImportRequest* /*request*/, ::milvus::proto::milvus::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Import(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ImportRequest* /*request*/, ::milvus::proto::milvus::ImportResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Import(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ImportRequest* /*request*/, ::milvus::proto::milvus::ImportResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetImportState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetImportState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(53,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetImportStateRequest, ::milvus::proto::milvus::GetImportStateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetImportStateRequest* request, ::milvus::proto::milvus::GetImportStateResponse* response) { return this->GetImportState(context, request, response); }));}
    void SetMessageAllocatorFor_GetImportState(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetImportStateRequest, ::milvus::proto::milvus::GetImportStateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(53);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(53);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetImportStateRequest, ::milvus::proto::milvus::GetImportStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetImportState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImportState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetImportStateRequest* /*request*/, ::milvus::proto::milvus::GetImportStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetImportState(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetImportStateRequest* /*request*/, ::milvus::proto::milvus::GetImportStateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetImportState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetImportStateRequest* /*request*/, ::milvus::proto::milvus::GetImportStateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListImportTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListImportTasks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(54,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ListImportTasksRequest, ::milvus::proto::milvus::ListImportTasksResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ListImportTasksRequest* request, ::milvus::proto::milvus::ListImportTasksResponse* response) { return this->ListImportTasks(context, request, response); }));}
    void SetMessageAllocatorFor_ListImportTasks(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ListImportTasksRequest, ::milvus::proto::milvus::ListImportTasksResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(54);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(54);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ListImportTasksRequest, ::milvus::proto::milvus::ListImportTasksResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListImportTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListImportTasks(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListImportTasksRequest* /*request*/, ::milvus::proto::milvus::ListImportTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListImportTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ListImportTasksRequest* /*request*/, ::milvus::proto::milvus::ListImportTasksResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListImportTasks(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ListImportTasksRequest* /*request*/, ::milvus::proto::milvus::ListImportTasksResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateCredential() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(55,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateCredentialRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::CreateCredentialRequest* request, ::milvus::proto::common::Status* response) { return this->CreateCredential(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCredential(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::CreateCredentialRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(55);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(55);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateCredentialRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateCredential(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCredential(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateCredential() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(56,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::UpdateCredentialRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::UpdateCredentialRequest* request, ::milvus::proto::common::Status* response) { return this->UpdateCredential(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCredential(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::UpdateCredentialRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(56);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(56);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::UpdateCredentialRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpdateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateCredential(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::UpdateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateCredential(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::UpdateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteCredential() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(57,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DeleteCredentialRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DeleteCredentialRequest* request, ::milvus::proto::common::Status* response) { return this->DeleteCredential(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCredential(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DeleteCredentialRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(57);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(57);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DeleteCredentialRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteCredential(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DeleteCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteCredential(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DeleteCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListCredUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListCredUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(58,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ListCredUsersRequest, ::milvus::proto::milvus::ListCredUsersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ListCredUsersRequest* request, ::milvus::proto::milvus::ListCredUsersResponse* response) { return this->ListCredUsers(context, request, response); }));}
    void SetMessageAllocatorFor_ListCredUsers(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ListCredUsersRequest, ::milvus::proto::milvus::ListCredUsersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(58);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(58);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ListCredUsersRequest, ::milvus::proto::milvus::ListCredUsersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListCredUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCredUsers(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListCredUsersRequest* /*request*/, ::milvus::proto::milvus::ListCredUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListCredUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ListCredUsersRequest* /*request*/, ::milvus::proto::milvus::ListCredUsersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListCredUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ListCredUsersRequest* /*request*/, ::milvus::proto::milvus::ListCredUsersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(59,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateRoleRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::CreateRoleRequest* request, ::milvus::proto::common::Status* response) { return this->CreateRole(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRole(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::CreateRoleRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(59);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(59);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateRoleRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateRole(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DropRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DropRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(60,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropRoleRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DropRoleRequest* request, ::milvus::proto::common::Status* response) { return this->DropRole(context, request, response); }));}
    void SetMessageAllocatorFor_DropRole(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DropRoleRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(60);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(60);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropRoleRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DropRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropRole(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OperateUserRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OperateUserRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(61,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::OperateUserRoleRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::OperateUserRoleRequest* request, ::milvus::proto::common::Status* response) { return this->OperateUserRole(context, request, response); }));}
    void SetMessageAllocatorFor_OperateUserRole(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::OperateUserRoleRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(61);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(61);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::OperateUserRoleRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OperateUserRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateUserRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperateUserRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OperateUserRole(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::OperateUserRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OperateUserRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::OperateUserRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SelectRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SelectRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(62,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::SelectRoleRequest, ::milvus::proto::milvus::SelectRoleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::SelectRoleRequest* request, ::milvus::proto::milvus::SelectRoleResponse* response) { return this->SelectRole(context, request, response); }));}
    void SetMessageAllocatorFor_SelectRole(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::SelectRoleRequest, ::milvus::proto::milvus::SelectRoleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(62);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(62);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::SelectRoleRequest, ::milvus::proto::milvus::SelectRoleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SelectRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectRoleRequest* /*request*/, ::milvus::proto::milvus::SelectRoleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SelectRole(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::SelectRoleRequest* /*request*/, ::milvus::proto::milvus::SelectRoleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SelectRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::SelectRoleRequest* /*request*/, ::milvus::proto::milvus::SelectRoleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SelectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SelectUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(63,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::SelectUserRequest, ::milvus::proto::milvus::SelectUserResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::SelectUserRequest* request, ::milvus::proto::milvus::SelectUserResponse* response) { return this->SelectUser(context, request, response); }));}
    void SetMessageAllocatorFor_SelectUser(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::SelectUserRequest, ::milvus::proto::milvus::SelectUserResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(63);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(63);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::SelectUserRequest, ::milvus::proto::milvus::SelectUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SelectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectUser(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectUserRequest* /*request*/, ::milvus::proto::milvus::SelectUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SelectUser(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::SelectUserRequest* /*request*/, ::milvus::proto::milvus::SelectUserResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SelectUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::SelectUserRequest* /*request*/, ::milvus::proto::milvus::SelectUserResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OperatePrivilege : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OperatePrivilege() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(64,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::OperatePrivilegeRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::milvus::proto::common::Status* response) { return this->OperatePrivilege(context, request, response); }));}
    void SetMessageAllocatorFor_OperatePrivilege(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::OperatePrivilegeRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(64);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(64);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::OperatePrivilegeRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OperatePrivilege() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperatePrivilege(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperatePrivilegeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OperatePrivilege(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::OperatePrivilegeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OperatePrivilege(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::OperatePrivilegeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SelectGrant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SelectGrant() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(65,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::SelectGrantRequest, ::milvus::proto::milvus::SelectGrantResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::SelectGrantRequest* request, ::milvus::proto::milvus::SelectGrantResponse* response) { return this->SelectGrant(context, request, response); }));}
    void SetMessageAllocatorFor_SelectGrant(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::SelectGrantRequest, ::milvus::proto::milvus::SelectGrantResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(65);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(65);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::SelectGrantRequest, ::milvus::proto::milvus::SelectGrantResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SelectGrant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectGrant(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectGrantRequest* /*request*/, ::milvus::proto::milvus::SelectGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SelectGrant(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::SelectGrantRequest* /*request*/, ::milvus::proto::milvus::SelectGrantResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SelectGrant(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::SelectGrantRequest* /*request*/, ::milvus::proto::milvus::SelectGrantResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(66,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetVersionRequest, ::milvus::proto::milvus::GetVersionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::GetVersionRequest* request, ::milvus::proto::milvus::GetVersionResponse* response) { return this->GetVersion(context, request, response); }));}
    void SetMessageAllocatorFor_GetVersion(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::GetVersionRequest, ::milvus::proto::milvus::GetVersionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(66);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(66);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::GetVersionRequest, ::milvus::proto::milvus::GetVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetVersionRequest* /*request*/, ::milvus::proto::milvus::GetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetVersionRequest* /*request*/, ::milvus::proto::milvus::GetVersionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::GetVersionRequest* /*request*/, ::milvus::proto::milvus::GetVersionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CheckHealth() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(67,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CheckHealthRequest, ::milvus::proto::milvus::CheckHealthResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::CheckHealthRequest* request, ::milvus::proto::milvus::CheckHealthResponse* response) { return this->CheckHealth(context, request, response); }));}
    void SetMessageAllocatorFor_CheckHealth(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::CheckHealthRequest, ::milvus::proto::milvus::CheckHealthResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(67);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(67);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CheckHealthRequest, ::milvus::proto::milvus::CheckHealthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CheckHealthRequest* /*request*/, ::milvus::proto::milvus::CheckHealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CheckHealthRequest* /*request*/, ::milvus::proto::milvus::CheckHealthResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckHealth(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CheckHealthRequest* /*request*/, ::milvus::proto::milvus::CheckHealthResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateResourceGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(68,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateResourceGroupRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::milvus::proto::common::Status* response) { return this->CreateResourceGroup(context, request, response); }));}
    void SetMessageAllocatorFor_CreateResourceGroup(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::CreateResourceGroupRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(68);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(68);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateResourceGroupRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateResourceGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateResourceGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DropResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DropResourceGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(69,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropResourceGroupRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DropResourceGroupRequest* request, ::milvus::proto::common::Status* response) { return this->DropResourceGroup(context, request, response); }));}
    void SetMessageAllocatorFor_DropResourceGroup(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DropResourceGroupRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(69);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(69);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropResourceGroupRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DropResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropResourceGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropResourceGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TransferNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TransferNode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(70,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::TransferNodeRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::TransferNodeRequest* request, ::milvus::proto::common::Status* response) { return this->TransferNode(context, request, response); }));}
    void SetMessageAllocatorFor_TransferNode(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::TransferNodeRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(70);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(70);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::TransferNodeRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TransferNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferNode(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferNodeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TransferNode(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::TransferNodeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TransferNode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::TransferNodeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TransferReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TransferReplica() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(71,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::TransferReplicaRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::TransferReplicaRequest* request, ::milvus::proto::common::Status* response) { return this->TransferReplica(context, request, response); }));}
    void SetMessageAllocatorFor_TransferReplica(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::TransferReplicaRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(71);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(71);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::TransferReplicaRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TransferReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferReplica(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferReplicaRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TransferReplica(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::TransferReplicaRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TransferReplica(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::TransferReplicaRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListResourceGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListResourceGroups() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(72,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ListResourceGroupsRequest, ::milvus::proto::milvus::ListResourceGroupsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response) { return this->ListResourceGroups(context, request, response); }));}
    void SetMessageAllocatorFor_ListResourceGroups(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ListResourceGroupsRequest, ::milvus::proto::milvus::ListResourceGroupsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(72);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(72);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ListResourceGroupsRequest, ::milvus::proto::milvus::ListResourceGroupsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListResourceGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResourceGroups(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListResourceGroupsRequest* /*request*/, ::milvus::proto::milvus::ListResourceGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListResourceGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ListResourceGroupsRequest* /*request*/, ::milvus::proto::milvus::ListResourceGroupsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListResourceGroups(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ListResourceGroupsRequest* /*request*/, ::milvus::proto::milvus::ListResourceGroupsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DescribeResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DescribeResourceGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(73,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DescribeResourceGroupRequest, ::milvus::proto::milvus::DescribeResourceGroupResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response) { return this->DescribeResourceGroup(context, request, response); }));}
    void SetMessageAllocatorFor_DescribeResourceGroup(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DescribeResourceGroupRequest, ::milvus::proto::milvus::DescribeResourceGroupResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(73);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(73);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DescribeResourceGroupRequest, ::milvus::proto::milvus::DescribeResourceGroupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DescribeResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeResourceGroupRequest* /*request*/, ::milvus::proto::milvus::DescribeResourceGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribeResourceGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DescribeResourceGroupRequest* /*request*/, ::milvus::proto::milvus::DescribeResourceGroupResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribeResourceGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DescribeResourceGroupRequest* /*request*/, ::milvus::proto::milvus::DescribeResourceGroupResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RenameCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RenameCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(74,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::RenameCollectionRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::RenameCollectionRequest* request, ::milvus::proto::common::Status* response) { return this->RenameCollection(context, request, response); }));}
    void SetMessageAllocatorFor_RenameCollection(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::RenameCollectionRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(74);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(74);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::RenameCollectionRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RenameCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RenameCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RenameCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::RenameCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RenameCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::RenameCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListIndexedSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListIndexedSegment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(75,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::feder::ListIndexedSegmentRequest, ::milvus::proto::feder::ListIndexedSegmentResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response) { return this->ListIndexedSegment(context, request, response); }));}
    void SetMessageAllocatorFor_ListIndexedSegment(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::feder::ListIndexedSegmentRequest, ::milvus::proto::feder::ListIndexedSegmentResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(75);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(75);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::feder::ListIndexedSegmentRequest, ::milvus::proto::feder::ListIndexedSegmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListIndexedSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexedSegment(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::ListIndexedSegmentRequest* /*request*/, ::milvus::proto::feder::ListIndexedSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListIndexedSegment(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::feder::ListIndexedSegmentRequest* /*request*/, ::milvus::proto::feder::ListIndexedSegmentResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListIndexedSegment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::feder::ListIndexedSegmentRequest* /*request*/, ::milvus::proto::feder::ListIndexedSegmentResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DescribeSegmentIndexData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DescribeSegmentIndexData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(76,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::feder::DescribeSegmentIndexDataRequest, ::milvus::proto::feder::DescribeSegmentIndexDataResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response) { return this->DescribeSegmentIndexData(context, request, response); }));}
    void SetMessageAllocatorFor_DescribeSegmentIndexData(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::feder::DescribeSegmentIndexDataRequest, ::milvus::proto::feder::DescribeSegmentIndexDataResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(76);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(76);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::feder::DescribeSegmentIndexDataRequest, ::milvus::proto::feder::DescribeSegmentIndexDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DescribeSegmentIndexData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeSegmentIndexData(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* /*request*/, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribeSegmentIndexData(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* /*request*/, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribeSegmentIndexData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* /*request*/, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Connect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(77,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ConnectRequest, ::milvus::proto::milvus::ConnectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ConnectRequest* request, ::milvus::proto::milvus::ConnectResponse* response) { return this->Connect(context, request, response); }));}
    void SetMessageAllocatorFor_Connect(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ConnectRequest, ::milvus::proto::milvus::ConnectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(77);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(77);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ConnectRequest, ::milvus::proto::milvus::ConnectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ConnectRequest* /*request*/, ::milvus::proto::milvus::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Connect(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ConnectRequest* /*request*/, ::milvus::proto::milvus::ConnectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Connect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ConnectRequest* /*request*/, ::milvus::proto::milvus::ConnectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AllocTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AllocTimestamp() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(78,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::AllocTimestampRequest, ::milvus::proto::milvus::AllocTimestampResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::AllocTimestampRequest* request, ::milvus::proto::milvus::AllocTimestampResponse* response) { return this->AllocTimestamp(context, request, response); }));}
    void SetMessageAllocatorFor_AllocTimestamp(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::AllocTimestampRequest, ::milvus::proto::milvus::AllocTimestampResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(78);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(78);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::AllocTimestampRequest, ::milvus::proto::milvus::AllocTimestampResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AllocTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocTimestamp(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AllocTimestampRequest* /*request*/, ::milvus::proto::milvus::AllocTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AllocTimestamp(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::AllocTimestampRequest* /*request*/, ::milvus::proto::milvus::AllocTimestampResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AllocTimestamp(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::AllocTimestampRequest* /*request*/, ::milvus::proto::milvus::AllocTimestampResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateDatabase() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(79,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateDatabaseRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::CreateDatabaseRequest* request, ::milvus::proto::common::Status* response) { return this->CreateDatabase(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDatabase(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::CreateDatabaseRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(79);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(79);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::CreateDatabaseRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDatabase(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDatabase(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::CreateDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DropDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DropDatabase() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(80,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropDatabaseRequest, ::milvus::proto::common::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::DropDatabaseRequest* request, ::milvus::proto::common::Status* response) { return this->DropDatabase(context, request, response); }));}
    void SetMessageAllocatorFor_DropDatabase(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::DropDatabaseRequest, ::milvus::proto::common::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(80);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(80);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::DropDatabaseRequest, ::milvus::proto::common::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DropDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropDatabase(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropDatabase(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::DropDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListDatabases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListDatabases() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(81,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ListDatabasesRequest, ::milvus::proto::milvus::ListDatabasesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ListDatabasesRequest* request, ::milvus::proto::milvus::ListDatabasesResponse* response) { return this->ListDatabases(context, request, response); }));}
    void SetMessageAllocatorFor_ListDatabases(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ListDatabasesRequest, ::milvus::proto::milvus::ListDatabasesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(81);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(81);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ListDatabasesRequest, ::milvus::proto::milvus::ListDatabasesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListDatabases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatabases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListDatabasesRequest* /*request*/, ::milvus::proto::milvus::ListDatabasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListDatabases(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ListDatabasesRequest* /*request*/, ::milvus::proto::milvus::ListDatabasesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListDatabases(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ListDatabasesRequest* /*request*/, ::milvus::proto::milvus::ListDatabasesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplicateMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(82,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ReplicateMessageRequest, ::milvus::proto::milvus::ReplicateMessageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::ReplicateMessageRequest* request, ::milvus::proto::milvus::ReplicateMessageResponse* response) { return this->ReplicateMessage(context, request, response); }));}
    void SetMessageAllocatorFor_ReplicateMessage(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::ReplicateMessageRequest, ::milvus::proto::milvus::ReplicateMessageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(82);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(82);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::ReplicateMessageRequest, ::milvus::proto::milvus::ReplicateMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReplicateMessageRequest* /*request*/, ::milvus::proto::milvus::ReplicateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplicateMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ReplicateMessageRequest* /*request*/, ::milvus::proto::milvus::ReplicateMessageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplicateMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::ReplicateMessageRequest* /*request*/, ::milvus::proto::milvus::ReplicateMessageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateCollection<ExperimentalWithCallbackMethod_DropCollection<ExperimentalWithCallbackMethod_HasCollection<ExperimentalWithCallbackMethod_LoadCollection<ExperimentalWithCallbackMethod_ReleaseCollection<ExperimentalWithCallbackMethod_DescribeCollection<ExperimentalWithCallbackMethod_GetCollectionStatistics<ExperimentalWithCallbackMethod_ShowCollections<ExperimentalWithCallbackMethod_AlterCollection<ExperimentalWithCallbackMethod_CreatePartition<ExperimentalWithCallbackMethod_DropPartition<ExperimentalWithCallbackMethod_HasPartition<ExperimentalWithCallbackMethod_LoadPartitions<ExperimentalWithCallbackMethod_ReleasePartitions<ExperimentalWithCallbackMethod_GetPartitionStatistics<ExperimentalWithCallbackMethod_ShowPartitions<ExperimentalWithCallbackMethod_GetLoadingProgress<ExperimentalWithCallbackMethod_GetLoadState<ExperimentalWithCallbackMethod_CreateAlias<ExperimentalWithCallbackMethod_DropAlias<ExperimentalWithCallbackMethod_AlterAlias<ExperimentalWithCallbackMethod_DescribeAlias<ExperimentalWithCallbackMethod_ListAliases<ExperimentalWithCallbackMethod_CreateIndex<ExperimentalWithCallbackMethod_AlterIndex<ExperimentalWithCallbackMethod_DescribeIndex<ExperimentalWithCallbackMethod_GetIndexStatistics<ExperimentalWithCallbackMethod_GetIndexState<ExperimentalWithCallbackMethod_GetIndexBuildProgress<ExperimentalWithCallbackMethod_DropIndex<ExperimentalWithCallbackMethod_Insert<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Upsert<ExperimentalWithCallbackMethod_Search<ExperimentalWithCallbackMethod_SearchV2<ExperimentalWithCallbackMethod_Flush<ExperimentalWithCallbackMethod_Query<ExperimentalWithCallbackMethod_CalcDistance<ExperimentalWithCallbackMethod_FlushAll<ExperimentalWithCallbackMethod_GetFlushState<ExperimentalWithCallbackMethod_GetFlushAllState<ExperimentalWithCallbackMethod_GetPersistentSegmentInfo<ExperimentalWithCallbackMethod_GetQuerySegmentInfo<ExperimentalWithCallbackMethod_GetReplicas<ExperimentalWithCallbackMethod_Dummy<ExperimentalWithCallbackMethod_RegisterLink<ExperimentalWithCallbackMethod_GetMetrics<ExperimentalWithCallbackMethod_GetComponentStates<ExperimentalWithCallbackMethod_LoadBalance<ExperimentalWithCallbackMethod_GetCompactionState<ExperimentalWithCallbackMethod_ManualCompaction<ExperimentalWithCallbackMethod_GetCompactionStateWithPlans<ExperimentalWithCallbackMethod_Import<ExperimentalWithCallbackMethod_GetImportState<ExperimentalWithCallbackMethod_ListImportTasks<ExperimentalWithCallbackMethod_CreateCredential<ExperimentalWithCallbackMethod_UpdateCredential<ExperimentalWithCallbackMethod_DeleteCredential<ExperimentalWithCallbackMethod_ListCredUsers<ExperimentalWithCallbackMethod_CreateRole<ExperimentalWithCallbackMethod_DropRole<ExperimentalWithCallbackMethod_OperateUserRole<ExperimentalWithCallbackMethod_SelectRole<ExperimentalWithCallbackMethod_SelectUser<ExperimentalWithCallbackMethod_OperatePrivilege<ExperimentalWithCallbackMethod_SelectGrant<ExperimentalWithCallbackMethod_GetVersion<ExperimentalWithCallbackMethod_CheckHealth<ExperimentalWithCallbackMethod_CreateResourceGroup<ExperimentalWithCallbackMethod_DropResourceGroup<ExperimentalWithCallbackMethod_TransferNode<ExperimentalWithCallbackMethod_TransferReplica<ExperimentalWithCallbackMethod_ListResourceGroups<ExperimentalWithCallbackMethod_DescribeResourceGroup<ExperimentalWithCallbackMethod_RenameCollection<ExperimentalWithCallbackMethod_ListIndexedSegment<ExperimentalWithCallbackMethod_DescribeSegmentIndexData<ExperimentalWithCallbackMethod_Connect<ExperimentalWithCallbackMethod_AllocTimestamp<ExperimentalWithCallbackMethod_CreateDatabase<ExperimentalWithCallbackMethod_DropDatabase<ExperimentalWithCallbackMethod_ListDatabases<ExperimentalWithCallbackMethod_ReplicateMessage<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateCollection<ExperimentalWithCallbackMethod_DropCollection<ExperimentalWithCallbackMethod_HasCollection<ExperimentalWithCallbackMethod_LoadCollection<ExperimentalWithCallbackMethod_ReleaseCollection<ExperimentalWithCallbackMethod_DescribeCollection<ExperimentalWithCallbackMethod_GetCollectionStatistics<ExperimentalWithCallbackMethod_ShowCollections<ExperimentalWithCallbackMethod_AlterCollection<ExperimentalWithCallbackMethod_CreatePartition<ExperimentalWithCallbackMethod_DropPartition<ExperimentalWithCallbackMethod_HasPartition<ExperimentalWithCallbackMethod_LoadPartitions<ExperimentalWithCallbackMethod_ReleasePartitions<ExperimentalWithCallbackMethod_GetPartitionStatistics<ExperimentalWithCallbackMethod_ShowPartitions<ExperimentalWithCallbackMethod_GetLoadingProgress<ExperimentalWithCallbackMethod_GetLoadState<ExperimentalWithCallbackMethod_CreateAlias<ExperimentalWithCallbackMethod_DropAlias<ExperimentalWithCallbackMethod_AlterAlias<ExperimentalWithCallbackMethod_DescribeAlias<ExperimentalWithCallbackMethod_ListAliases<ExperimentalWithCallbackMethod_CreateIndex<ExperimentalWithCallbackMethod_AlterIndex<ExperimentalWithCallbackMethod_DescribeIndex<ExperimentalWithCallbackMethod_GetIndexStatistics<ExperimentalWithCallbackMethod_GetIndexState<ExperimentalWithCallbackMethod_GetIndexBuildProgress<ExperimentalWithCallbackMethod_DropIndex<ExperimentalWithCallbackMethod_Insert<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Upsert<ExperimentalWithCallbackMethod_Search<ExperimentalWithCallbackMethod_SearchV2<ExperimentalWithCallbackMethod_Flush<ExperimentalWithCallbackMethod_Query<ExperimentalWithCallbackMethod_CalcDistance<ExperimentalWithCallbackMethod_FlushAll<ExperimentalWithCallbackMethod_GetFlushState<ExperimentalWithCallbackMethod_GetFlushAllState<ExperimentalWithCallbackMethod_GetPersistentSegmentInfo<ExperimentalWithCallbackMethod_GetQuerySegmentInfo<ExperimentalWithCallbackMethod_GetReplicas<ExperimentalWithCallbackMethod_Dummy<ExperimentalWithCallbackMethod_RegisterLink<ExperimentalWithCallbackMethod_GetMetrics<ExperimentalWithCallbackMethod_GetComponentStates<ExperimentalWithCallbackMethod_LoadBalance<ExperimentalWithCallbackMethod_GetCompactionState<ExperimentalWithCallbackMethod_ManualCompaction<ExperimentalWithCallbackMethod_GetCompactionStateWithPlans<ExperimentalWithCallbackMethod_Import<ExperimentalWithCallbackMethod_GetImportState<ExperimentalWithCallbackMethod_ListImportTasks<ExperimentalWithCallbackMethod_CreateCredential<ExperimentalWithCallbackMethod_UpdateCredential<ExperimentalWithCallbackMethod_DeleteCredential<ExperimentalWithCallbackMethod_ListCredUsers<ExperimentalWithCallbackMethod_CreateRole<ExperimentalWithCallbackMethod_DropRole<ExperimentalWithCallbackMethod_OperateUserRole<ExperimentalWithCallbackMethod_SelectRole<ExperimentalWithCallbackMethod_SelectUser<ExperimentalWithCallbackMethod_OperatePrivilege<ExperimentalWithCallbackMethod_SelectGrant<ExperimentalWithCallbackMethod_GetVersion<ExperimentalWithCallbackMethod_CheckHealth<ExperimentalWithCallbackMethod_CreateResourceGroup<ExperimentalWithCallbackMethod_DropResourceGroup<ExperimentalWithCallbackMethod_TransferNode<ExperimentalWithCallbackMethod_TransferReplica<ExperimentalWithCallbackMethod_ListResourceGroups<ExperimentalWithCallbackMethod_DescribeResourceGroup<ExperimentalWithCallbackMethod_RenameCollection<ExperimentalWithCallbackMethod_ListIndexedSegment<ExperimentalWithCallbackMethod_DescribeSegmentIndexData<ExperimentalWithCallbackMethod_Connect<ExperimentalWithCallbackMethod_AllocTimestamp<ExperimentalWithCallbackMethod_CreateDatabase<ExperimentalWithCallbackMethod_DropDatabase<ExperimentalWithCallbackMethod_ListDatabases<ExperimentalWithCallbackMethod_ReplicateMessage<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCollection() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DropCollection() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HasCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HasCollection() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_HasCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasCollectionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadCollection() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LoadCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReleaseCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReleaseCollection() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReleaseCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleaseCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DescribeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DescribeCollection() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DescribeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeCollectionRequest* /*request*/, ::milvus::proto::milvus::DescribeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCollectionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCollectionStatistics() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetCollectionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetCollectionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShowCollections() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowCollectionsRequest* /*request*/, ::milvus::proto::milvus::ShowCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AlterCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AlterCollection() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_AlterCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePartition() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CreatePartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreatePartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DropPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DropPartition() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DropPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropPartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HasPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HasPartition() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_HasPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasPartitionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadPartitions() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_LoadPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadPartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReleasePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReleasePartitions() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ReleasePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleasePartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleasePartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPartitionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPartitionStatistics() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetPartitionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPartitionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetPartitionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShowPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShowPartitions() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_ShowPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowPartitionsRequest* /*request*/, ::milvus::proto::milvus::ShowPartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLoadingProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLoadingProgress() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetLoadingProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLoadingProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadingProgressRequest* /*request*/, ::milvus::proto::milvus::GetLoadingProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLoadState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLoadState() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetLoadState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLoadState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadStateRequest* /*request*/, ::milvus::proto::milvus::GetLoadStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAlias() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DropAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DropAlias() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_DropAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AlterAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AlterAlias() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_AlterAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DescribeAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DescribeAlias() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_DescribeAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeAliasRequest* /*request*/, ::milvus::proto::milvus::DescribeAliasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAliases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAliases() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_ListAliases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAliases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListAliasesRequest* /*request*/, ::milvus::proto::milvus::ListAliasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateIndex() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AlterIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AlterIndex() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_AlterIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DescribeIndex() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeIndexRequest* /*request*/, ::milvus::proto::milvus::DescribeIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIndexStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIndexStatistics() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_GetIndexStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetIndexStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIndexState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIndexState() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_GetIndexState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStateRequest* /*request*/, ::milvus::proto::milvus::GetIndexStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIndexBuildProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIndexBuildProgress() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_GetIndexBuildProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexBuildProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* /*request*/, ::milvus::proto::milvus::GetIndexBuildProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DropIndex() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Insert() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::InsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Upsert() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Search() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequest* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchV2() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_SearchV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchV2(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequestV2* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Flush() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushRequest* /*request*/, ::milvus::proto::milvus::FlushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Query() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::QueryRequest* /*request*/, ::milvus::proto::milvus::QueryResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CalcDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CalcDistance() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_CalcDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalcDistance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CalcDistanceRequest* /*request*/, ::milvus::proto::milvus::CalcDistanceResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FlushAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FlushAll() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_FlushAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushAll(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushAllRequest* /*request*/, ::milvus::proto::milvus::FlushAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFlushState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFlushState() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_GetFlushState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlushState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFlushAllState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFlushAllState() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_GetFlushAllState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlushAllState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushAllStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushAllStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPersistentSegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPersistentSegmentInfo() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_GetPersistentSegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPersistentSegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetQuerySegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetQuerySegmentInfo() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_GetQuerySegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuerySegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetReplicas() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_GetReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplicas(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetReplicasRequest* /*request*/, ::milvus::proto::milvus::GetReplicasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Dummy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Dummy() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_Dummy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dummy(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DummyRequest* /*request*/, ::milvus::proto::milvus::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterLink() {
      ::grpc::Service::MarkMethodGeneric(45);
    }
    ~WithGenericMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMetrics() {
      ::grpc::Service::MarkMethodGeneric(46);
    }
    ~WithGenericMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetMetricsRequest* /*request*/, ::milvus::proto::milvus::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetComponentStates() {
      ::grpc::Service::MarkMethodGeneric(47);
    }
    ~WithGenericMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadBalance() {
      ::grpc::Service::MarkMethodGeneric(48);
    }
    ~WithGenericMethod_LoadBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadBalance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadBalanceRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCompactionState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCompactionState() {
      ::grpc::Service::MarkMethodGeneric(49);
    }
    ~WithGenericMethod_GetCompactionState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompactionState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionStateRequest* /*request*/, ::milvus::proto::milvus::GetCompactionStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ManualCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ManualCompaction() {
      ::grpc::Service::MarkMethodGeneric(50);
    }
    ~WithGenericMethod_ManualCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ManualCompaction(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ManualCompactionRequest* /*request*/, ::milvus::proto::milvus::ManualCompactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCompactionStateWithPlans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCompactionStateWithPlans() {
      ::grpc::Service::MarkMethodGeneric(51);
    }
    ~WithGenericMethod_GetCompactionStateWithPlans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompactionStateWithPlans(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionPlansRequest* /*request*/, ::milvus::proto::milvus::GetCompactionPlansResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Import() {
      ::grpc::Service::MarkMethodGeneric(52);
    }
    ~WithGenericMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ImportRequest* /*request*/, ::milvus::proto::milvus::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImportState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImportState() {
      ::grpc::Service::MarkMethodGeneric(53);
    }
    ~WithGenericMethod_GetImportState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImportState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetImportStateRequest* /*request*/, ::milvus::proto::milvus::GetImportStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListImportTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListImportTasks() {
      ::grpc::Service::MarkMethodGeneric(54);
    }
    ~WithGenericMethod_ListImportTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListImportTasks(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListImportTasksRequest* /*request*/, ::milvus::proto::milvus::ListImportTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCredential() {
      ::grpc::Service::MarkMethodGeneric(55);
    }
    ~WithGenericMethod_CreateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCredential() {
      ::grpc::Service::MarkMethodGeneric(56);
    }
    ~WithGenericMethod_UpdateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpdateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCredential() {
      ::grpc::Service::MarkMethodGeneric(57);
    }
    ~WithGenericMethod_DeleteCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCredUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListCredUsers() {
      ::grpc::Service::MarkMethodGeneric(58);
    }
    ~WithGenericMethod_ListCredUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCredUsers(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListCredUsersRequest* /*request*/, ::milvus::proto::milvus::ListCredUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRole() {
      ::grpc::Service::MarkMethodGeneric(59);
    }
    ~WithGenericMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DropRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DropRole() {
      ::grpc::Service::MarkMethodGeneric(60);
    }
    ~WithGenericMethod_DropRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OperateUserRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OperateUserRole() {
      ::grpc::Service::MarkMethodGeneric(61);
    }
    ~WithGenericMethod_OperateUserRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateUserRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperateUserRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SelectRole() {
      ::grpc::Service::MarkMethodGeneric(62);
    }
    ~WithGenericMethod_SelectRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectRoleRequest* /*request*/, ::milvus::proto::milvus::SelectRoleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SelectUser() {
      ::grpc::Service::MarkMethodGeneric(63);
    }
    ~WithGenericMethod_SelectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectUser(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectUserRequest* /*request*/, ::milvus::proto::milvus::SelectUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OperatePrivilege : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OperatePrivilege() {
      ::grpc::Service::MarkMethodGeneric(64);
    }
    ~WithGenericMethod_OperatePrivilege() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperatePrivilege(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperatePrivilegeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectGrant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SelectGrant() {
      ::grpc::Service::MarkMethodGeneric(65);
    }
    ~WithGenericMethod_SelectGrant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectGrant(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectGrantRequest* /*request*/, ::milvus::proto::milvus::SelectGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVersion() {
      ::grpc::Service::MarkMethodGeneric(66);
    }
    ~WithGenericMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetVersionRequest* /*request*/, ::milvus::proto::milvus::GetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckHealth() {
      ::grpc::Service::MarkMethodGeneric(67);
    }
    ~WithGenericMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CheckHealthRequest* /*request*/, ::milvus::proto::milvus::CheckHealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateResourceGroup() {
      ::grpc::Service::MarkMethodGeneric(68);
    }
    ~WithGenericMethod_CreateResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DropResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DropResourceGroup() {
      ::grpc::Service::MarkMethodGeneric(69);
    }
    ~WithGenericMethod_DropResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferNode() {
      ::grpc::Service::MarkMethodGeneric(70);
    }
    ~WithGenericMethod_TransferNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferNode(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferNodeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferReplica() {
      ::grpc::Service::MarkMethodGeneric(71);
    }
    ~WithGenericMethod_TransferReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferReplica(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferReplicaRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListResourceGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListResourceGroups() {
      ::grpc::Service::MarkMethodGeneric(72);
    }
    ~WithGenericMethod_ListResourceGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResourceGroups(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListResourceGroupsRequest* /*request*/, ::milvus::proto::milvus::ListResourceGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DescribeResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DescribeResourceGroup() {
      ::grpc::Service::MarkMethodGeneric(73);
    }
    ~WithGenericMethod_DescribeResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeResourceGroupRequest* /*request*/, ::milvus::proto::milvus::DescribeResourceGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RenameCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RenameCollection() {
      ::grpc::Service::MarkMethodGeneric(74);
    }
    ~WithGenericMethod_RenameCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RenameCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListIndexedSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListIndexedSegment() {
      ::grpc::Service::MarkMethodGeneric(75);
    }
    ~WithGenericMethod_ListIndexedSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexedSegment(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::ListIndexedSegmentRequest* /*request*/, ::milvus::proto::feder::ListIndexedSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DescribeSegmentIndexData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DescribeSegmentIndexData() {
      ::grpc::Service::MarkMethodGeneric(76);
    }
    ~WithGenericMethod_DescribeSegmentIndexData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeSegmentIndexData(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* /*request*/, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Connect() {
      ::grpc::Service::MarkMethodGeneric(77);
    }
    ~WithGenericMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ConnectRequest* /*request*/, ::milvus::proto::milvus::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AllocTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AllocTimestamp() {
      ::grpc::Service::MarkMethodGeneric(78);
    }
    ~WithGenericMethod_AllocTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocTimestamp(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AllocTimestampRequest* /*request*/, ::milvus::proto::milvus::AllocTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDatabase() {
      ::grpc::Service::MarkMethodGeneric(79);
    }
    ~WithGenericMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DropDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DropDatabase() {
      ::grpc::Service::MarkMethodGeneric(80);
    }
    ~WithGenericMethod_DropDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDatabases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDatabases() {
      ::grpc::Service::MarkMethodGeneric(81);
    }
    ~WithGenericMethod_ListDatabases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatabases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListDatabasesRequest* /*request*/, ::milvus::proto::milvus::ListDatabasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplicateMessage() {
      ::grpc::Service::MarkMethodGeneric(82);
    }
    ~WithGenericMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReplicateMessageRequest* /*request*/, ::milvus::proto::milvus::ReplicateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCollection() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DropCollection() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HasCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HasCollection() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_HasCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasCollectionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadCollection() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LoadCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReleaseCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReleaseCollection() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReleaseCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleaseCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReleaseCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DescribeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DescribeCollection() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DescribeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeCollectionRequest* /*request*/, ::milvus::proto::milvus::DescribeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCollectionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCollectionStatistics() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetCollectionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetCollectionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCollectionStatistics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShowCollections() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowCollectionsRequest* /*request*/, ::milvus::proto::milvus::ShowCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShowCollections(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AlterCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AlterCollection() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_AlterCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAlterCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePartition() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CreatePartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreatePartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePartition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DropPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DropPartition() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DropPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropPartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropPartition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HasPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HasPartition() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_HasPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasPartitionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasPartition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadPartitions() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_LoadPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadPartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadPartitions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReleasePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReleasePartitions() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ReleasePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleasePartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleasePartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReleasePartitions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPartitionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPartitionStatistics() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetPartitionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPartitionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetPartitionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPartitionStatistics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShowPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShowPartitions() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_ShowPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowPartitionsRequest* /*request*/, ::milvus::proto::milvus::ShowPartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShowPartitions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLoadingProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLoadingProgress() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetLoadingProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLoadingProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadingProgressRequest* /*request*/, ::milvus::proto::milvus::GetLoadingProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLoadingProgress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLoadState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLoadState() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetLoadState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLoadState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadStateRequest* /*request*/, ::milvus::proto::milvus::GetLoadStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLoadState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAlias() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAlias(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DropAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DropAlias() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_DropAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropAlias(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AlterAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AlterAlias() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_AlterAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAlterAlias(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DescribeAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DescribeAlias() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_DescribeAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeAliasRequest* /*request*/, ::milvus::proto::milvus::DescribeAliasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeAlias(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAliases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAliases() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_ListAliases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAliases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListAliasesRequest* /*request*/, ::milvus::proto::milvus::ListAliasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAliases(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateIndex() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AlterIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AlterIndex() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_AlterIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAlterIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DescribeIndex() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeIndexRequest* /*request*/, ::milvus::proto::milvus::DescribeIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIndexStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIndexStatistics() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_GetIndexStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetIndexStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIndexStatistics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIndexState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIndexState() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_GetIndexState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStateRequest* /*request*/, ::milvus::proto::milvus::GetIndexStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIndexState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIndexBuildProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIndexBuildProgress() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_GetIndexBuildProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexBuildProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* /*request*/, ::milvus::proto::milvus::GetIndexBuildProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIndexBuildProgress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DropIndex() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Insert() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::InsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsert(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Upsert() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsert(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Search() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequest* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchV2() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_SearchV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchV2(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequestV2* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchV2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Flush() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushRequest* /*request*/, ::milvus::proto::milvus::FlushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlush(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Query() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::QueryRequest* /*request*/, ::milvus::proto::milvus::QueryResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CalcDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CalcDistance() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_CalcDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalcDistance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CalcDistanceRequest* /*request*/, ::milvus::proto::milvus::CalcDistanceResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCalcDistance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FlushAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FlushAll() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_FlushAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushAll(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushAllRequest* /*request*/, ::milvus::proto::milvus::FlushAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlushAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFlushState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFlushState() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_GetFlushState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlushState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFlushState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFlushAllState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFlushAllState() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_GetFlushAllState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlushAllState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushAllStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushAllStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFlushAllState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPersistentSegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPersistentSegmentInfo() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_GetPersistentSegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPersistentSegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPersistentSegmentInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetQuerySegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetQuerySegmentInfo() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_GetQuerySegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuerySegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQuerySegmentInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetReplicas() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_GetReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplicas(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetReplicasRequest* /*request*/, ::milvus::proto::milvus::GetReplicasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplicas(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Dummy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Dummy() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_Dummy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dummy(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DummyRequest* /*request*/, ::milvus::proto::milvus::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDummy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterLink() {
      ::grpc::Service::MarkMethodRaw(45);
    }
    ~WithRawMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterLink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMetrics() {
      ::grpc::Service::MarkMethodRaw(46);
    }
    ~WithRawMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetMetricsRequest* /*request*/, ::milvus::proto::milvus::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetComponentStates() {
      ::grpc::Service::MarkMethodRaw(47);
    }
    ~WithRawMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetComponentStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadBalance() {
      ::grpc::Service::MarkMethodRaw(48);
    }
    ~WithRawMethod_LoadBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadBalance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadBalanceRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadBalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCompactionState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCompactionState() {
      ::grpc::Service::MarkMethodRaw(49);
    }
    ~WithRawMethod_GetCompactionState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompactionState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionStateRequest* /*request*/, ::milvus::proto::milvus::GetCompactionStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCompactionState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ManualCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ManualCompaction() {
      ::grpc::Service::MarkMethodRaw(50);
    }
    ~WithRawMethod_ManualCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ManualCompaction(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ManualCompactionRequest* /*request*/, ::milvus::proto::milvus::ManualCompactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestManualCompaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCompactionStateWithPlans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCompactionStateWithPlans() {
      ::grpc::Service::MarkMethodRaw(51);
    }
    ~WithRawMethod_GetCompactionStateWithPlans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompactionStateWithPlans(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionPlansRequest* /*request*/, ::milvus::proto::milvus::GetCompactionPlansResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCompactionStateWithPlans(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Import() {
      ::grpc::Service::MarkMethodRaw(52);
    }
    ~WithRawMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ImportRequest* /*request*/, ::milvus::proto::milvus::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImportState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImportState() {
      ::grpc::Service::MarkMethodRaw(53);
    }
    ~WithRawMethod_GetImportState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImportState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetImportStateRequest* /*request*/, ::milvus::proto::milvus::GetImportStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImportState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(53, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListImportTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListImportTasks() {
      ::grpc::Service::MarkMethodRaw(54);
    }
    ~WithRawMethod_ListImportTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListImportTasks(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListImportTasksRequest* /*request*/, ::milvus::proto::milvus::ListImportTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListImportTasks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(54, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCredential() {
      ::grpc::Service::MarkMethodRaw(55);
    }
    ~WithRawMethod_CreateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCredential(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(55, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCredential() {
      ::grpc::Service::MarkMethodRaw(56);
    }
    ~WithRawMethod_UpdateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpdateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCredential(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(56, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCredential() {
      ::grpc::Service::MarkMethodRaw(57);
    }
    ~WithRawMethod_DeleteCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCredential(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(57, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCredUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListCredUsers() {
      ::grpc::Service::MarkMethodRaw(58);
    }
    ~WithRawMethod_ListCredUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCredUsers(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListCredUsersRequest* /*request*/, ::milvus::proto::milvus::ListCredUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCredUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(58, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRole() {
      ::grpc::Service::MarkMethodRaw(59);
    }
    ~WithRawMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(59, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DropRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DropRole() {
      ::grpc::Service::MarkMethodRaw(60);
    }
    ~WithRawMethod_DropRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(60, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OperateUserRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OperateUserRole() {
      ::grpc::Service::MarkMethodRaw(61);
    }
    ~WithRawMethod_OperateUserRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateUserRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperateUserRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperateUserRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(61, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SelectRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SelectRole() {
      ::grpc::Service::MarkMethodRaw(62);
    }
    ~WithRawMethod_SelectRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectRoleRequest* /*request*/, ::milvus::proto::milvus::SelectRoleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(62, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SelectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SelectUser() {
      ::grpc::Service::MarkMethodRaw(63);
    }
    ~WithRawMethod_SelectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectUser(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectUserRequest* /*request*/, ::milvus::proto::milvus::SelectUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(63, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OperatePrivilege : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OperatePrivilege() {
      ::grpc::Service::MarkMethodRaw(64);
    }
    ~WithRawMethod_OperatePrivilege() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperatePrivilege(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperatePrivilegeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperatePrivilege(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(64, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SelectGrant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SelectGrant() {
      ::grpc::Service::MarkMethodRaw(65);
    }
    ~WithRawMethod_SelectGrant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectGrant(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectGrantRequest* /*request*/, ::milvus::proto::milvus::SelectGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectGrant(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(65, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVersion() {
      ::grpc::Service::MarkMethodRaw(66);
    }
    ~WithRawMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetVersionRequest* /*request*/, ::milvus::proto::milvus::GetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(66, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckHealth() {
      ::grpc::Service::MarkMethodRaw(67);
    }
    ~WithRawMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CheckHealthRequest* /*request*/, ::milvus::proto::milvus::CheckHealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHealth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(67, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateResourceGroup() {
      ::grpc::Service::MarkMethodRaw(68);
    }
    ~WithRawMethod_CreateResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateResourceGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(68, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DropResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DropResourceGroup() {
      ::grpc::Service::MarkMethodRaw(69);
    }
    ~WithRawMethod_DropResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropResourceGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(69, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferNode() {
      ::grpc::Service::MarkMethodRaw(70);
    }
    ~WithRawMethod_TransferNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferNode(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferNodeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(70, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferReplica() {
      ::grpc::Service::MarkMethodRaw(71);
    }
    ~WithRawMethod_TransferReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferReplica(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferReplicaRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferReplica(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(71, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListResourceGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListResourceGroups() {
      ::grpc::Service::MarkMethodRaw(72);
    }
    ~WithRawMethod_ListResourceGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResourceGroups(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListResourceGroupsRequest* /*request*/, ::milvus::proto::milvus::ListResourceGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListResourceGroups(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(72, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DescribeResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DescribeResourceGroup() {
      ::grpc::Service::MarkMethodRaw(73);
    }
    ~WithRawMethod_DescribeResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeResourceGroupRequest* /*request*/, ::milvus::proto::milvus::DescribeResourceGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeResourceGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(73, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RenameCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RenameCollection() {
      ::grpc::Service::MarkMethodRaw(74);
    }
    ~WithRawMethod_RenameCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RenameCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenameCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(74, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListIndexedSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListIndexedSegment() {
      ::grpc::Service::MarkMethodRaw(75);
    }
    ~WithRawMethod_ListIndexedSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexedSegment(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::ListIndexedSegmentRequest* /*request*/, ::milvus::proto::feder::ListIndexedSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListIndexedSegment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(75, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DescribeSegmentIndexData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DescribeSegmentIndexData() {
      ::grpc::Service::MarkMethodRaw(76);
    }
    ~WithRawMethod_DescribeSegmentIndexData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeSegmentIndexData(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* /*request*/, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeSegmentIndexData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(76, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Connect() {
      ::grpc::Service::MarkMethodRaw(77);
    }
    ~WithRawMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ConnectRequest* /*request*/, ::milvus::proto::milvus::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(77, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AllocTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AllocTimestamp() {
      ::grpc::Service::MarkMethodRaw(78);
    }
    ~WithRawMethod_AllocTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocTimestamp(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AllocTimestampRequest* /*request*/, ::milvus::proto::milvus::AllocTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocTimestamp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(78, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDatabase() {
      ::grpc::Service::MarkMethodRaw(79);
    }
    ~WithRawMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDatabase(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(79, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DropDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DropDatabase() {
      ::grpc::Service::MarkMethodRaw(80);
    }
    ~WithRawMethod_DropDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropDatabase(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(80, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDatabases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDatabases() {
      ::grpc::Service::MarkMethodRaw(81);
    }
    ~WithRawMethod_ListDatabases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatabases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListDatabasesRequest* /*request*/, ::milvus::proto::milvus::ListDatabasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDatabases(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(81, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplicateMessage() {
      ::grpc::Service::MarkMethodRaw(82);
    }
    ~WithRawMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReplicateMessageRequest* /*request*/, ::milvus::proto::milvus::ReplicateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(82, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DropCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DropCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HasCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HasCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HasCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_HasCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasCollectionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HasCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HasCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoadCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LoadCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LoadCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReleaseCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReleaseCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReleaseCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReleaseCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleaseCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReleaseCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReleaseCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DescribeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DescribeCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DescribeCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DescribeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeCollectionRequest* /*request*/, ::milvus::proto::milvus::DescribeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribeCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribeCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCollectionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCollectionStatistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCollectionStatistics(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCollectionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetCollectionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCollectionStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCollectionStatistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ShowCollections() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShowCollections(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowCollectionsRequest* /*request*/, ::milvus::proto::milvus::ShowCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShowCollections(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShowCollections(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AlterCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AlterCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AlterCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AlterCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AlterCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AlterCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreatePartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreatePartition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePartition(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreatePartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreatePartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreatePartition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreatePartition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DropPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DropPartition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DropPartition(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DropPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropPartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropPartition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropPartition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HasPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HasPartition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HasPartition(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_HasPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasPartitionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HasPartition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HasPartition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoadPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LoadPartitions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadPartitions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LoadPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadPartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadPartitions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadPartitions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReleasePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReleasePartitions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReleasePartitions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReleasePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleasePartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleasePartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReleasePartitions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReleasePartitions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPartitionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPartitionStatistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPartitionStatistics(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPartitionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPartitionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetPartitionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPartitionStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPartitionStatistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShowPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ShowPartitions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShowPartitions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ShowPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowPartitionsRequest* /*request*/, ::milvus::proto::milvus::ShowPartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShowPartitions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShowPartitions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLoadingProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLoadingProgress() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(16,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLoadingProgress(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLoadingProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLoadingProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadingProgressRequest* /*request*/, ::milvus::proto::milvus::GetLoadingProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLoadingProgress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLoadingProgress(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLoadState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLoadState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(17,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLoadState(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLoadState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLoadState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadStateRequest* /*request*/, ::milvus::proto::milvus::GetLoadStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLoadState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLoadState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateAlias() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(18,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAlias(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateAlias(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateAlias(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DropAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DropAlias() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(19,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DropAlias(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DropAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropAlias(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropAlias(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AlterAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AlterAlias() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(20,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AlterAlias(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AlterAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AlterAlias(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AlterAlias(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DescribeAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DescribeAlias() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(21,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DescribeAlias(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DescribeAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeAliasRequest* /*request*/, ::milvus::proto::milvus::DescribeAliasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribeAlias(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribeAlias(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListAliases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListAliases() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(22,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAliases(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListAliases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAliases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListAliasesRequest* /*request*/, ::milvus::proto::milvus::ListAliasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAliases(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAliases(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateIndex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(23,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateIndex(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateIndex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AlterIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AlterIndex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(24,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AlterIndex(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AlterIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AlterIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AlterIndex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DescribeIndex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(25,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DescribeIndex(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeIndexRequest* /*request*/, ::milvus::proto::milvus::DescribeIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribeIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribeIndex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetIndexStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetIndexStatistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(26,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIndexStatistics(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetIndexStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetIndexStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetIndexStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetIndexStatistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetIndexState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetIndexState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(27,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIndexState(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetIndexState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStateRequest* /*request*/, ::milvus::proto::milvus::GetIndexStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetIndexState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetIndexState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetIndexBuildProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetIndexBuildProgress() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(28,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIndexBuildProgress(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetIndexBuildProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndexBuildProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* /*request*/, ::milvus::proto::milvus::GetIndexBuildProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetIndexBuildProgress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetIndexBuildProgress(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DropIndex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(29,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DropIndex(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropIndex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Insert() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(30,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Insert(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::InsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Insert(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Insert(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(31,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Upsert() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(32,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Upsert(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Upsert(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Upsert(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Search() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(33,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Search(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequest* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Search(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Search(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SearchV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SearchV2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(34,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchV2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SearchV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchV2(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequestV2* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SearchV2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SearchV2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Flush() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(35,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Flush(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushRequest* /*request*/, ::milvus::proto::milvus::FlushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Flush(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Flush(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Query() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(36,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Query(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::QueryRequest* /*request*/, ::milvus::proto::milvus::QueryResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Query(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CalcDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CalcDistance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(37,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CalcDistance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CalcDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalcDistance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CalcDistanceRequest* /*request*/, ::milvus::proto::milvus::CalcDistanceResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CalcDistance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CalcDistance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FlushAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FlushAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(38,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FlushAll(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FlushAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushAll(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushAllRequest* /*request*/, ::milvus::proto::milvus::FlushAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FlushAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FlushAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFlushState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFlushState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(39,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFlushState(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFlushState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlushState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFlushState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFlushState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFlushAllState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFlushAllState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(40,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFlushAllState(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFlushAllState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlushAllState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushAllStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushAllStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFlushAllState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFlushAllState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPersistentSegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPersistentSegmentInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(41,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPersistentSegmentInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPersistentSegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPersistentSegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPersistentSegmentInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPersistentSegmentInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetQuerySegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetQuerySegmentInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(42,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetQuerySegmentInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetQuerySegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuerySegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetQuerySegmentInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetQuerySegmentInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetReplicas() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(43,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetReplicas(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplicas(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetReplicasRequest* /*request*/, ::milvus::proto::milvus::GetReplicasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetReplicas(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetReplicas(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Dummy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Dummy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(44,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Dummy(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Dummy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dummy(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DummyRequest* /*request*/, ::milvus::proto::milvus::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Dummy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Dummy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterLink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(45,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterLink(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterLink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterLink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMetrics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(46,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMetrics(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetMetricsRequest* /*request*/, ::milvus::proto::milvus::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMetrics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetComponentStates() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(47,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetComponentStates(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetComponentStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetComponentStates(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoadBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LoadBalance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(48,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadBalance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LoadBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadBalance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadBalanceRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadBalance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCompactionState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCompactionState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(49,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCompactionState(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCompactionState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompactionState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionStateRequest* /*request*/, ::milvus::proto::milvus::GetCompactionStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCompactionState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCompactionState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ManualCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ManualCompaction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(50,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ManualCompaction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ManualCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ManualCompaction(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ManualCompactionRequest* /*request*/, ::milvus::proto::milvus::ManualCompactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ManualCompaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ManualCompaction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCompactionStateWithPlans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCompactionStateWithPlans() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(51,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCompactionStateWithPlans(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCompactionStateWithPlans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompactionStateWithPlans(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionPlansRequest* /*request*/, ::milvus::proto::milvus::GetCompactionPlansResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCompactionStateWithPlans(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCompactionStateWithPlans(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Import() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(52,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Import(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ImportRequest* /*request*/, ::milvus::proto::milvus::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Import(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Import(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetImportState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetImportState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(53,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImportState(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetImportState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImportState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetImportStateRequest* /*request*/, ::milvus::proto::milvus::GetImportStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetImportState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetImportState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListImportTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListImportTasks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(54,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListImportTasks(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListImportTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListImportTasks(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListImportTasksRequest* /*request*/, ::milvus::proto::milvus::ListImportTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListImportTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListImportTasks(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateCredential() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(55,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCredential(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateCredential(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCredential(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateCredential() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(56,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCredential(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpdateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateCredential(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateCredential(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteCredential() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(57,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCredential(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteCredential(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteCredential(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListCredUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListCredUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(58,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListCredUsers(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListCredUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCredUsers(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListCredUsersRequest* /*request*/, ::milvus::proto::milvus::ListCredUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListCredUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListCredUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(59,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DropRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DropRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(60,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DropRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DropRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OperateUserRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OperateUserRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(61,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OperateUserRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OperateUserRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateUserRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperateUserRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OperateUserRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OperateUserRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SelectRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SelectRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(62,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SelectRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SelectRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectRoleRequest* /*request*/, ::milvus::proto::milvus::SelectRoleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SelectRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SelectRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SelectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SelectUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(63,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SelectUser(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SelectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectUser(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectUserRequest* /*request*/, ::milvus::proto::milvus::SelectUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SelectUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SelectUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OperatePrivilege : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OperatePrivilege() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(64,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OperatePrivilege(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OperatePrivilege() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperatePrivilege(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperatePrivilegeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OperatePrivilege(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OperatePrivilege(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SelectGrant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SelectGrant() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(65,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SelectGrant(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SelectGrant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectGrant(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectGrantRequest* /*request*/, ::milvus::proto::milvus::SelectGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SelectGrant(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SelectGrant(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(66,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVersion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetVersionRequest* /*request*/, ::milvus::proto::milvus::GetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckHealth() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(67,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckHealth(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CheckHealthRequest* /*request*/, ::milvus::proto::milvus::CheckHealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckHealth(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateResourceGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(68,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateResourceGroup(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateResourceGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateResourceGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DropResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DropResourceGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(69,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DropResourceGroup(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DropResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropResourceGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropResourceGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TransferNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TransferNode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(70,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferNode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TransferNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferNode(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferNodeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TransferNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TransferNode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TransferReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TransferReplica() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(71,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferReplica(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TransferReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferReplica(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferReplicaRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TransferReplica(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TransferReplica(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListResourceGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListResourceGroups() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(72,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListResourceGroups(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListResourceGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResourceGroups(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListResourceGroupsRequest* /*request*/, ::milvus::proto::milvus::ListResourceGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListResourceGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListResourceGroups(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DescribeResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DescribeResourceGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(73,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DescribeResourceGroup(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DescribeResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeResourceGroupRequest* /*request*/, ::milvus::proto::milvus::DescribeResourceGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribeResourceGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribeResourceGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RenameCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RenameCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(74,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RenameCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RenameCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RenameCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RenameCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RenameCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListIndexedSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListIndexedSegment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(75,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListIndexedSegment(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListIndexedSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexedSegment(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::ListIndexedSegmentRequest* /*request*/, ::milvus::proto::feder::ListIndexedSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListIndexedSegment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListIndexedSegment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DescribeSegmentIndexData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DescribeSegmentIndexData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(76,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DescribeSegmentIndexData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DescribeSegmentIndexData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeSegmentIndexData(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* /*request*/, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribeSegmentIndexData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribeSegmentIndexData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Connect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(77,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Connect(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ConnectRequest* /*request*/, ::milvus::proto::milvus::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Connect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Connect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AllocTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AllocTimestamp() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(78,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AllocTimestamp(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AllocTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocTimestamp(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AllocTimestampRequest* /*request*/, ::milvus::proto::milvus::AllocTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AllocTimestamp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AllocTimestamp(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateDatabase() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(79,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDatabase(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDatabase(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDatabase(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DropDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DropDatabase() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(80,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DropDatabase(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DropDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DropDatabase(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DropDatabase(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListDatabases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListDatabases() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(81,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDatabases(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListDatabases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatabases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListDatabasesRequest* /*request*/, ::milvus::proto::milvus::ListDatabasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListDatabases(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListDatabases(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplicateMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(82,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplicateMessage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReplicateMessageRequest* /*request*/, ::milvus::proto::milvus::ReplicateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplicateMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplicateMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCollection() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::CreateCollectionRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::CreateCollectionRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedCreateCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::CreateCollectionRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DropCollection() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DropCollectionRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DropCollectionRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedDropCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDropCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DropCollectionRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HasCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HasCollection() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::HasCollectionRequest, ::milvus::proto::milvus::BoolResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::HasCollectionRequest, ::milvus::proto::milvus::BoolResponse>* streamer) {
                       return this->StreamedHasCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HasCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HasCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasCollectionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHasCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::HasCollectionRequest,::milvus::proto::milvus::BoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadCollection() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::LoadCollectionRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::LoadCollectionRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedLoadCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::LoadCollectionRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReleaseCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReleaseCollection() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ReleaseCollectionRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ReleaseCollectionRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedReleaseCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReleaseCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReleaseCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleaseCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReleaseCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ReleaseCollectionRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DescribeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DescribeCollection() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DescribeCollectionRequest, ::milvus::proto::milvus::DescribeCollectionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DescribeCollectionRequest, ::milvus::proto::milvus::DescribeCollectionResponse>* streamer) {
                       return this->StreamedDescribeCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DescribeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DescribeCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeCollectionRequest* /*request*/, ::milvus::proto::milvus::DescribeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDescribeCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DescribeCollectionRequest,::milvus::proto::milvus::DescribeCollectionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCollectionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCollectionStatistics() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetCollectionStatisticsRequest, ::milvus::proto::milvus::GetCollectionStatisticsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetCollectionStatisticsRequest, ::milvus::proto::milvus::GetCollectionStatisticsResponse>* streamer) {
                       return this->StreamedGetCollectionStatistics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCollectionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCollectionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetCollectionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCollectionStatistics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetCollectionStatisticsRequest,::milvus::proto::milvus::GetCollectionStatisticsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShowCollections() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ShowCollectionsRequest, ::milvus::proto::milvus::ShowCollectionsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ShowCollectionsRequest, ::milvus::proto::milvus::ShowCollectionsResponse>* streamer) {
                       return this->StreamedShowCollections(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowCollectionsRequest* /*request*/, ::milvus::proto::milvus::ShowCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShowCollections(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ShowCollectionsRequest,::milvus::proto::milvus::ShowCollectionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AlterCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AlterCollection() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::AlterCollectionRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::AlterCollectionRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedAlterCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AlterCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AlterCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAlterCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::AlterCollectionRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePartition() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::CreatePartitionRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::CreatePartitionRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedCreatePartition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatePartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreatePartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePartition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::CreatePartitionRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DropPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DropPartition() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DropPartitionRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DropPartitionRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedDropPartition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DropPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DropPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropPartitionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDropPartition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DropPartitionRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HasPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HasPartition() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::HasPartitionRequest, ::milvus::proto::milvus::BoolResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::HasPartitionRequest, ::milvus::proto::milvus::BoolResponse>* streamer) {
                       return this->StreamedHasPartition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HasPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HasPartition(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::HasPartitionRequest* /*request*/, ::milvus::proto::milvus::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHasPartition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::HasPartitionRequest,::milvus::proto::milvus::BoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadPartitions() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::LoadPartitionsRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::LoadPartitionsRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedLoadPartitions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadPartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadPartitions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::LoadPartitionsRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReleasePartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReleasePartitions() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ReleasePartitionsRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ReleasePartitionsRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedReleasePartitions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReleasePartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReleasePartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReleasePartitionsRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReleasePartitions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ReleasePartitionsRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPartitionStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPartitionStatistics() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetPartitionStatisticsRequest, ::milvus::proto::milvus::GetPartitionStatisticsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetPartitionStatisticsRequest, ::milvus::proto::milvus::GetPartitionStatisticsResponse>* streamer) {
                       return this->StreamedGetPartitionStatistics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPartitionStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPartitionStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetPartitionStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPartitionStatistics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetPartitionStatisticsRequest,::milvus::proto::milvus::GetPartitionStatisticsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShowPartitions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShowPartitions() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ShowPartitionsRequest, ::milvus::proto::milvus::ShowPartitionsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ShowPartitionsRequest, ::milvus::proto::milvus::ShowPartitionsResponse>* streamer) {
                       return this->StreamedShowPartitions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShowPartitions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShowPartitions(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ShowPartitionsRequest* /*request*/, ::milvus::proto::milvus::ShowPartitionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShowPartitions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ShowPartitionsRequest,::milvus::proto::milvus::ShowPartitionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLoadingProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLoadingProgress() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetLoadingProgressRequest, ::milvus::proto::milvus::GetLoadingProgressResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetLoadingProgressRequest, ::milvus::proto::milvus::GetLoadingProgressResponse>* streamer) {
                       return this->StreamedGetLoadingProgress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLoadingProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLoadingProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadingProgressRequest* /*request*/, ::milvus::proto::milvus::GetLoadingProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLoadingProgress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetLoadingProgressRequest,::milvus::proto::milvus::GetLoadingProgressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLoadState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLoadState() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetLoadStateRequest, ::milvus::proto::milvus::GetLoadStateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetLoadStateRequest, ::milvus::proto::milvus::GetLoadStateResponse>* streamer) {
                       return this->StreamedGetLoadState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLoadState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLoadState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetLoadStateRequest* /*request*/, ::milvus::proto::milvus::GetLoadStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLoadState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetLoadStateRequest,::milvus::proto::milvus::GetLoadStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAlias() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::CreateAliasRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::CreateAliasRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedCreateAlias(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAlias(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::CreateAliasRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DropAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DropAlias() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DropAliasRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DropAliasRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedDropAlias(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DropAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DropAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDropAlias(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DropAliasRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AlterAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AlterAlias() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::AlterAliasRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::AlterAliasRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedAlterAlias(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AlterAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AlterAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterAliasRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAlterAlias(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::AlterAliasRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DescribeAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DescribeAlias() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DescribeAliasRequest, ::milvus::proto::milvus::DescribeAliasResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DescribeAliasRequest, ::milvus::proto::milvus::DescribeAliasResponse>* streamer) {
                       return this->StreamedDescribeAlias(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DescribeAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DescribeAlias(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeAliasRequest* /*request*/, ::milvus::proto::milvus::DescribeAliasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDescribeAlias(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DescribeAliasRequest,::milvus::proto::milvus::DescribeAliasResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAliases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAliases() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ListAliasesRequest, ::milvus::proto::milvus::ListAliasesResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ListAliasesRequest, ::milvus::proto::milvus::ListAliasesResponse>* streamer) {
                       return this->StreamedListAliases(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAliases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAliases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListAliasesRequest* /*request*/, ::milvus::proto::milvus::ListAliasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAliases(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ListAliasesRequest,::milvus::proto::milvus::ListAliasesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateIndex() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::CreateIndexRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::CreateIndexRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedCreateIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::CreateIndexRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AlterIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AlterIndex() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::AlterIndexRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::AlterIndexRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedAlterIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AlterIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AlterIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AlterIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAlterIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::AlterIndexRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DescribeIndex() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DescribeIndexRequest, ::milvus::proto::milvus::DescribeIndexResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DescribeIndexRequest, ::milvus::proto::milvus::DescribeIndexResponse>* streamer) {
                       return this->StreamedDescribeIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeIndexRequest* /*request*/, ::milvus::proto::milvus::DescribeIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDescribeIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DescribeIndexRequest,::milvus::proto::milvus::DescribeIndexResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIndexStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIndexStatistics() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetIndexStatisticsRequest, ::milvus::proto::milvus::GetIndexStatisticsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetIndexStatisticsRequest, ::milvus::proto::milvus::GetIndexStatisticsResponse>* streamer) {
                       return this->StreamedGetIndexStatistics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIndexStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIndexStatistics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStatisticsRequest* /*request*/, ::milvus::proto::milvus::GetIndexStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIndexStatistics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetIndexStatisticsRequest,::milvus::proto::milvus::GetIndexStatisticsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIndexState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIndexState() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetIndexStateRequest, ::milvus::proto::milvus::GetIndexStateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetIndexStateRequest, ::milvus::proto::milvus::GetIndexStateResponse>* streamer) {
                       return this->StreamedGetIndexState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIndexState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIndexState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexStateRequest* /*request*/, ::milvus::proto::milvus::GetIndexStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIndexState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetIndexStateRequest,::milvus::proto::milvus::GetIndexStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIndexBuildProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIndexBuildProgress() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetIndexBuildProgressRequest, ::milvus::proto::milvus::GetIndexBuildProgressResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetIndexBuildProgressRequest, ::milvus::proto::milvus::GetIndexBuildProgressResponse>* streamer) {
                       return this->StreamedGetIndexBuildProgress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIndexBuildProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIndexBuildProgress(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* /*request*/, ::milvus::proto::milvus::GetIndexBuildProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIndexBuildProgress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetIndexBuildProgressRequest,::milvus::proto::milvus::GetIndexBuildProgressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DropIndex() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DropIndexRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DropIndexRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedDropIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropIndexRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDropIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DropIndexRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Insert() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::InsertRequest, ::milvus::proto::milvus::MutationResult>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::InsertRequest, ::milvus::proto::milvus::MutationResult>* streamer) {
                       return this->StreamedInsert(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Insert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::InsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::InsertRequest,::milvus::proto::milvus::MutationResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DeleteRequest, ::milvus::proto::milvus::MutationResult>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DeleteRequest, ::milvus::proto::milvus::MutationResult>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DeleteRequest,::milvus::proto::milvus::MutationResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Upsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Upsert() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::UpsertRequest, ::milvus::proto::milvus::MutationResult>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::UpsertRequest, ::milvus::proto::milvus::MutationResult>* streamer) {
                       return this->StreamedUpsert(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Upsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Upsert(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpsertRequest* /*request*/, ::milvus::proto::milvus::MutationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpsert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::UpsertRequest,::milvus::proto::milvus::MutationResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Search() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::SearchRequest, ::milvus::proto::milvus::SearchResults>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::SearchRequest, ::milvus::proto::milvus::SearchResults>* streamer) {
                       return this->StreamedSearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequest* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::SearchRequest,::milvus::proto::milvus::SearchResults>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchV2() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::SearchRequestV2, ::milvus::proto::milvus::SearchResults>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::SearchRequestV2, ::milvus::proto::milvus::SearchResults>* streamer) {
                       return this->StreamedSearchV2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchV2(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SearchRequestV2* /*request*/, ::milvus::proto::milvus::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchV2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::SearchRequestV2,::milvus::proto::milvus::SearchResults>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Flush() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::FlushRequest, ::milvus::proto::milvus::FlushResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::FlushRequest, ::milvus::proto::milvus::FlushResponse>* streamer) {
                       return this->StreamedFlush(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushRequest* /*request*/, ::milvus::proto::milvus::FlushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFlush(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::FlushRequest,::milvus::proto::milvus::FlushResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Query() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::QueryRequest, ::milvus::proto::milvus::QueryResults>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::QueryRequest, ::milvus::proto::milvus::QueryResults>* streamer) {
                       return this->StreamedQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::QueryRequest* /*request*/, ::milvus::proto::milvus::QueryResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::QueryRequest,::milvus::proto::milvus::QueryResults>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CalcDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CalcDistance() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::CalcDistanceRequest, ::milvus::proto::milvus::CalcDistanceResults>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::CalcDistanceRequest, ::milvus::proto::milvus::CalcDistanceResults>* streamer) {
                       return this->StreamedCalcDistance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CalcDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CalcDistance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CalcDistanceRequest* /*request*/, ::milvus::proto::milvus::CalcDistanceResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCalcDistance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::CalcDistanceRequest,::milvus::proto::milvus::CalcDistanceResults>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FlushAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FlushAll() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::FlushAllRequest, ::milvus::proto::milvus::FlushAllResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::FlushAllRequest, ::milvus::proto::milvus::FlushAllResponse>* streamer) {
                       return this->StreamedFlushAll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FlushAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FlushAll(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::FlushAllRequest* /*request*/, ::milvus::proto::milvus::FlushAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFlushAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::FlushAllRequest,::milvus::proto::milvus::FlushAllResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFlushState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFlushState() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetFlushStateRequest, ::milvus::proto::milvus::GetFlushStateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetFlushStateRequest, ::milvus::proto::milvus::GetFlushStateResponse>* streamer) {
                       return this->StreamedGetFlushState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFlushState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFlushState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFlushState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetFlushStateRequest,::milvus::proto::milvus::GetFlushStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFlushAllState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFlushAllState() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetFlushAllStateRequest, ::milvus::proto::milvus::GetFlushAllStateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetFlushAllStateRequest, ::milvus::proto::milvus::GetFlushAllStateResponse>* streamer) {
                       return this->StreamedGetFlushAllState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFlushAllState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFlushAllState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetFlushAllStateRequest* /*request*/, ::milvus::proto::milvus::GetFlushAllStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFlushAllState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetFlushAllStateRequest,::milvus::proto::milvus::GetFlushAllStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPersistentSegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPersistentSegmentInfo() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetPersistentSegmentInfoRequest, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetPersistentSegmentInfoRequest, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>* streamer) {
                       return this->StreamedGetPersistentSegmentInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPersistentSegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPersistentSegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPersistentSegmentInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetPersistentSegmentInfoRequest,::milvus::proto::milvus::GetPersistentSegmentInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetQuerySegmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetQuerySegmentInfo() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetQuerySegmentInfoRequest, ::milvus::proto::milvus::GetQuerySegmentInfoResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetQuerySegmentInfoRequest, ::milvus::proto::milvus::GetQuerySegmentInfoResponse>* streamer) {
                       return this->StreamedGetQuerySegmentInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetQuerySegmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetQuerySegmentInfo(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* /*request*/, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetQuerySegmentInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetQuerySegmentInfoRequest,::milvus::proto::milvus::GetQuerySegmentInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetReplicas() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetReplicasRequest, ::milvus::proto::milvus::GetReplicasResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetReplicasRequest, ::milvus::proto::milvus::GetReplicasResponse>* streamer) {
                       return this->StreamedGetReplicas(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetReplicas(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetReplicasRequest* /*request*/, ::milvus::proto::milvus::GetReplicasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetReplicas(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetReplicasRequest,::milvus::proto::milvus::GetReplicasResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Dummy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Dummy() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DummyRequest, ::milvus::proto::milvus::DummyResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DummyRequest, ::milvus::proto::milvus::DummyResponse>* streamer) {
                       return this->StreamedDummy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Dummy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Dummy(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DummyRequest* /*request*/, ::milvus::proto::milvus::DummyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDummy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DummyRequest,::milvus::proto::milvus::DummyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterLink() {
      ::grpc::Service::MarkMethodStreamed(45,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>* streamer) {
                       return this->StreamedRegisterLink(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterLink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::RegisterLinkRequest,::milvus::proto::milvus::RegisterLinkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMetrics() {
      ::grpc::Service::MarkMethodStreamed(46,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetMetricsRequest, ::milvus::proto::milvus::GetMetricsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetMetricsRequest, ::milvus::proto::milvus::GetMetricsResponse>* streamer) {
                       return this->StreamedGetMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetMetricsRequest* /*request*/, ::milvus::proto::milvus::GetMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetMetricsRequest,::milvus::proto::milvus::GetMetricsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetComponentStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetComponentStates() {
      ::grpc::Service::MarkMethodStreamed(47,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates>* streamer) {
                       return this->StreamedGetComponentStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetComponentStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetComponentStates(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetComponentStatesRequest* /*request*/, ::milvus::proto::milvus::ComponentStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetComponentStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetComponentStatesRequest,::milvus::proto::milvus::ComponentStates>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadBalance() {
      ::grpc::Service::MarkMethodStreamed(48,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::LoadBalanceRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::LoadBalanceRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedLoadBalance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadBalance(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::LoadBalanceRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::LoadBalanceRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCompactionState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCompactionState() {
      ::grpc::Service::MarkMethodStreamed(49,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetCompactionStateRequest, ::milvus::proto::milvus::GetCompactionStateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetCompactionStateRequest, ::milvus::proto::milvus::GetCompactionStateResponse>* streamer) {
                       return this->StreamedGetCompactionState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCompactionState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCompactionState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionStateRequest* /*request*/, ::milvus::proto::milvus::GetCompactionStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCompactionState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetCompactionStateRequest,::milvus::proto::milvus::GetCompactionStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ManualCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ManualCompaction() {
      ::grpc::Service::MarkMethodStreamed(50,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ManualCompactionRequest, ::milvus::proto::milvus::ManualCompactionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ManualCompactionRequest, ::milvus::proto::milvus::ManualCompactionResponse>* streamer) {
                       return this->StreamedManualCompaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ManualCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ManualCompaction(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ManualCompactionRequest* /*request*/, ::milvus::proto::milvus::ManualCompactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedManualCompaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ManualCompactionRequest,::milvus::proto::milvus::ManualCompactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCompactionStateWithPlans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCompactionStateWithPlans() {
      ::grpc::Service::MarkMethodStreamed(51,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetCompactionPlansRequest, ::milvus::proto::milvus::GetCompactionPlansResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetCompactionPlansRequest, ::milvus::proto::milvus::GetCompactionPlansResponse>* streamer) {
                       return this->StreamedGetCompactionStateWithPlans(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCompactionStateWithPlans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCompactionStateWithPlans(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetCompactionPlansRequest* /*request*/, ::milvus::proto::milvus::GetCompactionPlansResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCompactionStateWithPlans(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetCompactionPlansRequest,::milvus::proto::milvus::GetCompactionPlansResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Import : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Import() {
      ::grpc::Service::MarkMethodStreamed(52,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ImportRequest, ::milvus::proto::milvus::ImportResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ImportRequest, ::milvus::proto::milvus::ImportResponse>* streamer) {
                       return this->StreamedImport(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Import() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Import(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ImportRequest* /*request*/, ::milvus::proto::milvus::ImportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedImport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ImportRequest,::milvus::proto::milvus::ImportResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImportState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImportState() {
      ::grpc::Service::MarkMethodStreamed(53,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetImportStateRequest, ::milvus::proto::milvus::GetImportStateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetImportStateRequest, ::milvus::proto::milvus::GetImportStateResponse>* streamer) {
                       return this->StreamedGetImportState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImportState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImportState(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetImportStateRequest* /*request*/, ::milvus::proto::milvus::GetImportStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImportState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetImportStateRequest,::milvus::proto::milvus::GetImportStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListImportTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListImportTasks() {
      ::grpc::Service::MarkMethodStreamed(54,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ListImportTasksRequest, ::milvus::proto::milvus::ListImportTasksResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ListImportTasksRequest, ::milvus::proto::milvus::ListImportTasksResponse>* streamer) {
                       return this->StreamedListImportTasks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListImportTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListImportTasks(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListImportTasksRequest* /*request*/, ::milvus::proto::milvus::ListImportTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListImportTasks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ListImportTasksRequest,::milvus::proto::milvus::ListImportTasksResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCredential() {
      ::grpc::Service::MarkMethodStreamed(55,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::CreateCredentialRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::CreateCredentialRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedCreateCredential(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCredential(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::CreateCredentialRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCredential() {
      ::grpc::Service::MarkMethodStreamed(56,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::UpdateCredentialRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::UpdateCredentialRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedUpdateCredential(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::UpdateCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCredential(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::UpdateCredentialRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCredential : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCredential() {
      ::grpc::Service::MarkMethodStreamed(57,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DeleteCredentialRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DeleteCredentialRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedDeleteCredential(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCredential() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCredential(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DeleteCredentialRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCredential(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DeleteCredentialRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCredUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListCredUsers() {
      ::grpc::Service::MarkMethodStreamed(58,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ListCredUsersRequest, ::milvus::proto::milvus::ListCredUsersResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ListCredUsersRequest, ::milvus::proto::milvus::ListCredUsersResponse>* streamer) {
                       return this->StreamedListCredUsers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListCredUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCredUsers(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListCredUsersRequest* /*request*/, ::milvus::proto::milvus::ListCredUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCredUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ListCredUsersRequest,::milvus::proto::milvus::ListCredUsersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRole() {
      ::grpc::Service::MarkMethodStreamed(59,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::CreateRoleRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::CreateRoleRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedCreateRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::CreateRoleRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DropRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DropRole() {
      ::grpc::Service::MarkMethodStreamed(60,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DropRoleRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DropRoleRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedDropRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DropRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DropRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDropRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DropRoleRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OperateUserRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OperateUserRole() {
      ::grpc::Service::MarkMethodStreamed(61,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::OperateUserRoleRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::OperateUserRoleRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedOperateUserRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OperateUserRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OperateUserRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperateUserRoleRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOperateUserRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::OperateUserRoleRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SelectRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SelectRole() {
      ::grpc::Service::MarkMethodStreamed(62,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::SelectRoleRequest, ::milvus::proto::milvus::SelectRoleResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::SelectRoleRequest, ::milvus::proto::milvus::SelectRoleResponse>* streamer) {
                       return this->StreamedSelectRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SelectRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SelectRole(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectRoleRequest* /*request*/, ::milvus::proto::milvus::SelectRoleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSelectRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::SelectRoleRequest,::milvus::proto::milvus::SelectRoleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SelectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SelectUser() {
      ::grpc::Service::MarkMethodStreamed(63,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::SelectUserRequest, ::milvus::proto::milvus::SelectUserResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::SelectUserRequest, ::milvus::proto::milvus::SelectUserResponse>* streamer) {
                       return this->StreamedSelectUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SelectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SelectUser(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectUserRequest* /*request*/, ::milvus::proto::milvus::SelectUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSelectUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::SelectUserRequest,::milvus::proto::milvus::SelectUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OperatePrivilege : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OperatePrivilege() {
      ::grpc::Service::MarkMethodStreamed(64,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::OperatePrivilegeRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::OperatePrivilegeRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedOperatePrivilege(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OperatePrivilege() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OperatePrivilege(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::OperatePrivilegeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOperatePrivilege(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::OperatePrivilegeRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SelectGrant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SelectGrant() {
      ::grpc::Service::MarkMethodStreamed(65,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::SelectGrantRequest, ::milvus::proto::milvus::SelectGrantResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::SelectGrantRequest, ::milvus::proto::milvus::SelectGrantResponse>* streamer) {
                       return this->StreamedSelectGrant(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SelectGrant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SelectGrant(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::SelectGrantRequest* /*request*/, ::milvus::proto::milvus::SelectGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSelectGrant(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::SelectGrantRequest,::milvus::proto::milvus::SelectGrantResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVersion() {
      ::grpc::Service::MarkMethodStreamed(66,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::GetVersionRequest, ::milvus::proto::milvus::GetVersionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::GetVersionRequest, ::milvus::proto::milvus::GetVersionResponse>* streamer) {
                       return this->StreamedGetVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::GetVersionRequest* /*request*/, ::milvus::proto::milvus::GetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::GetVersionRequest,::milvus::proto::milvus::GetVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckHealth() {
      ::grpc::Service::MarkMethodStreamed(67,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::CheckHealthRequest, ::milvus::proto::milvus::CheckHealthResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::CheckHealthRequest, ::milvus::proto::milvus::CheckHealthResponse>* streamer) {
                       return this->StreamedCheckHealth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CheckHealthRequest* /*request*/, ::milvus::proto::milvus::CheckHealthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::CheckHealthRequest,::milvus::proto::milvus::CheckHealthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateResourceGroup() {
      ::grpc::Service::MarkMethodStreamed(68,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::CreateResourceGroupRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::CreateResourceGroupRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedCreateResourceGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateResourceGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::CreateResourceGroupRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DropResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DropResourceGroup() {
      ::grpc::Service::MarkMethodStreamed(69,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DropResourceGroupRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DropResourceGroupRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedDropResourceGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DropResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DropResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropResourceGroupRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDropResourceGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DropResourceGroupRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferNode() {
      ::grpc::Service::MarkMethodStreamed(70,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::TransferNodeRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::TransferNodeRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedTransferNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferNode(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferNodeRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::TransferNodeRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferReplica : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferReplica() {
      ::grpc::Service::MarkMethodStreamed(71,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::TransferReplicaRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::TransferReplicaRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedTransferReplica(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferReplica() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferReplica(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::TransferReplicaRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferReplica(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::TransferReplicaRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListResourceGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListResourceGroups() {
      ::grpc::Service::MarkMethodStreamed(72,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ListResourceGroupsRequest, ::milvus::proto::milvus::ListResourceGroupsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ListResourceGroupsRequest, ::milvus::proto::milvus::ListResourceGroupsResponse>* streamer) {
                       return this->StreamedListResourceGroups(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListResourceGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListResourceGroups(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListResourceGroupsRequest* /*request*/, ::milvus::proto::milvus::ListResourceGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListResourceGroups(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ListResourceGroupsRequest,::milvus::proto::milvus::ListResourceGroupsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DescribeResourceGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DescribeResourceGroup() {
      ::grpc::Service::MarkMethodStreamed(73,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DescribeResourceGroupRequest, ::milvus::proto::milvus::DescribeResourceGroupResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DescribeResourceGroupRequest, ::milvus::proto::milvus::DescribeResourceGroupResponse>* streamer) {
                       return this->StreamedDescribeResourceGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DescribeResourceGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DescribeResourceGroup(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DescribeResourceGroupRequest* /*request*/, ::milvus::proto::milvus::DescribeResourceGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDescribeResourceGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DescribeResourceGroupRequest,::milvus::proto::milvus::DescribeResourceGroupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RenameCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RenameCollection() {
      ::grpc::Service::MarkMethodStreamed(74,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::RenameCollectionRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::RenameCollectionRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedRenameCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RenameCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RenameCollection(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RenameCollectionRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRenameCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::RenameCollectionRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListIndexedSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListIndexedSegment() {
      ::grpc::Service::MarkMethodStreamed(75,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::feder::ListIndexedSegmentRequest, ::milvus::proto::feder::ListIndexedSegmentResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::feder::ListIndexedSegmentRequest, ::milvus::proto::feder::ListIndexedSegmentResponse>* streamer) {
                       return this->StreamedListIndexedSegment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListIndexedSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListIndexedSegment(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::ListIndexedSegmentRequest* /*request*/, ::milvus::proto::feder::ListIndexedSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListIndexedSegment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::feder::ListIndexedSegmentRequest,::milvus::proto::feder::ListIndexedSegmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DescribeSegmentIndexData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DescribeSegmentIndexData() {
      ::grpc::Service::MarkMethodStreamed(76,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::feder::DescribeSegmentIndexDataRequest, ::milvus::proto::feder::DescribeSegmentIndexDataResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::feder::DescribeSegmentIndexDataRequest, ::milvus::proto::feder::DescribeSegmentIndexDataResponse>* streamer) {
                       return this->StreamedDescribeSegmentIndexData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DescribeSegmentIndexData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DescribeSegmentIndexData(::grpc::ServerContext* /*context*/, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* /*request*/, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDescribeSegmentIndexData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::feder::DescribeSegmentIndexDataRequest,::milvus::proto::feder::DescribeSegmentIndexDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Connect() {
      ::grpc::Service::MarkMethodStreamed(77,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ConnectRequest, ::milvus::proto::milvus::ConnectResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ConnectRequest, ::milvus::proto::milvus::ConnectResponse>* streamer) {
                       return this->StreamedConnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ConnectRequest* /*request*/, ::milvus::proto::milvus::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ConnectRequest,::milvus::proto::milvus::ConnectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllocTimestamp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AllocTimestamp() {
      ::grpc::Service::MarkMethodStreamed(78,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::AllocTimestampRequest, ::milvus::proto::milvus::AllocTimestampResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::AllocTimestampRequest, ::milvus::proto::milvus::AllocTimestampResponse>* streamer) {
                       return this->StreamedAllocTimestamp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AllocTimestamp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllocTimestamp(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::AllocTimestampRequest* /*request*/, ::milvus::proto::milvus::AllocTimestampResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllocTimestamp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::AllocTimestampRequest,::milvus::proto::milvus::AllocTimestampResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDatabase() {
      ::grpc::Service::MarkMethodStreamed(79,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::CreateDatabaseRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::CreateDatabaseRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedCreateDatabase(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::CreateDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDatabase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::CreateDatabaseRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DropDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DropDatabase() {
      ::grpc::Service::MarkMethodStreamed(80,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::DropDatabaseRequest, ::milvus::proto::common::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::DropDatabaseRequest, ::milvus::proto::common::Status>* streamer) {
                       return this->StreamedDropDatabase(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DropDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DropDatabase(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::DropDatabaseRequest* /*request*/, ::milvus::proto::common::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDropDatabase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::DropDatabaseRequest,::milvus::proto::common::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDatabases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDatabases() {
      ::grpc::Service::MarkMethodStreamed(81,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ListDatabasesRequest, ::milvus::proto::milvus::ListDatabasesResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ListDatabasesRequest, ::milvus::proto::milvus::ListDatabasesResponse>* streamer) {
                       return this->StreamedListDatabases(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDatabases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDatabases(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ListDatabasesRequest* /*request*/, ::milvus::proto::milvus::ListDatabasesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDatabases(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ListDatabasesRequest,::milvus::proto::milvus::ListDatabasesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplicateMessage() {
      ::grpc::Service::MarkMethodStreamed(82,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::ReplicateMessageRequest, ::milvus::proto::milvus::ReplicateMessageResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::ReplicateMessageRequest, ::milvus::proto::milvus::ReplicateMessageResponse>* streamer) {
                       return this->StreamedReplicateMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::ReplicateMessageRequest* /*request*/, ::milvus::proto::milvus::ReplicateMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplicateMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::ReplicateMessageRequest,::milvus::proto::milvus::ReplicateMessageResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateCollection<WithStreamedUnaryMethod_DropCollection<WithStreamedUnaryMethod_HasCollection<WithStreamedUnaryMethod_LoadCollection<WithStreamedUnaryMethod_ReleaseCollection<WithStreamedUnaryMethod_DescribeCollection<WithStreamedUnaryMethod_GetCollectionStatistics<WithStreamedUnaryMethod_ShowCollections<WithStreamedUnaryMethod_AlterCollection<WithStreamedUnaryMethod_CreatePartition<WithStreamedUnaryMethod_DropPartition<WithStreamedUnaryMethod_HasPartition<WithStreamedUnaryMethod_LoadPartitions<WithStreamedUnaryMethod_ReleasePartitions<WithStreamedUnaryMethod_GetPartitionStatistics<WithStreamedUnaryMethod_ShowPartitions<WithStreamedUnaryMethod_GetLoadingProgress<WithStreamedUnaryMethod_GetLoadState<WithStreamedUnaryMethod_CreateAlias<WithStreamedUnaryMethod_DropAlias<WithStreamedUnaryMethod_AlterAlias<WithStreamedUnaryMethod_DescribeAlias<WithStreamedUnaryMethod_ListAliases<WithStreamedUnaryMethod_CreateIndex<WithStreamedUnaryMethod_AlterIndex<WithStreamedUnaryMethod_DescribeIndex<WithStreamedUnaryMethod_GetIndexStatistics<WithStreamedUnaryMethod_GetIndexState<WithStreamedUnaryMethod_GetIndexBuildProgress<WithStreamedUnaryMethod_DropIndex<WithStreamedUnaryMethod_Insert<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Upsert<WithStreamedUnaryMethod_Search<WithStreamedUnaryMethod_SearchV2<WithStreamedUnaryMethod_Flush<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_CalcDistance<WithStreamedUnaryMethod_FlushAll<WithStreamedUnaryMethod_GetFlushState<WithStreamedUnaryMethod_GetFlushAllState<WithStreamedUnaryMethod_GetPersistentSegmentInfo<WithStreamedUnaryMethod_GetQuerySegmentInfo<WithStreamedUnaryMethod_GetReplicas<WithStreamedUnaryMethod_Dummy<WithStreamedUnaryMethod_RegisterLink<WithStreamedUnaryMethod_GetMetrics<WithStreamedUnaryMethod_GetComponentStates<WithStreamedUnaryMethod_LoadBalance<WithStreamedUnaryMethod_GetCompactionState<WithStreamedUnaryMethod_ManualCompaction<WithStreamedUnaryMethod_GetCompactionStateWithPlans<WithStreamedUnaryMethod_Import<WithStreamedUnaryMethod_GetImportState<WithStreamedUnaryMethod_ListImportTasks<WithStreamedUnaryMethod_CreateCredential<WithStreamedUnaryMethod_UpdateCredential<WithStreamedUnaryMethod_DeleteCredential<WithStreamedUnaryMethod_ListCredUsers<WithStreamedUnaryMethod_CreateRole<WithStreamedUnaryMethod_DropRole<WithStreamedUnaryMethod_OperateUserRole<WithStreamedUnaryMethod_SelectRole<WithStreamedUnaryMethod_SelectUser<WithStreamedUnaryMethod_OperatePrivilege<WithStreamedUnaryMethod_SelectGrant<WithStreamedUnaryMethod_GetVersion<WithStreamedUnaryMethod_CheckHealth<WithStreamedUnaryMethod_CreateResourceGroup<WithStreamedUnaryMethod_DropResourceGroup<WithStreamedUnaryMethod_TransferNode<WithStreamedUnaryMethod_TransferReplica<WithStreamedUnaryMethod_ListResourceGroups<WithStreamedUnaryMethod_DescribeResourceGroup<WithStreamedUnaryMethod_RenameCollection<WithStreamedUnaryMethod_ListIndexedSegment<WithStreamedUnaryMethod_DescribeSegmentIndexData<WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_AllocTimestamp<WithStreamedUnaryMethod_CreateDatabase<WithStreamedUnaryMethod_DropDatabase<WithStreamedUnaryMethod_ListDatabases<WithStreamedUnaryMethod_ReplicateMessage<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateCollection<WithStreamedUnaryMethod_DropCollection<WithStreamedUnaryMethod_HasCollection<WithStreamedUnaryMethod_LoadCollection<WithStreamedUnaryMethod_ReleaseCollection<WithStreamedUnaryMethod_DescribeCollection<WithStreamedUnaryMethod_GetCollectionStatistics<WithStreamedUnaryMethod_ShowCollections<WithStreamedUnaryMethod_AlterCollection<WithStreamedUnaryMethod_CreatePartition<WithStreamedUnaryMethod_DropPartition<WithStreamedUnaryMethod_HasPartition<WithStreamedUnaryMethod_LoadPartitions<WithStreamedUnaryMethod_ReleasePartitions<WithStreamedUnaryMethod_GetPartitionStatistics<WithStreamedUnaryMethod_ShowPartitions<WithStreamedUnaryMethod_GetLoadingProgress<WithStreamedUnaryMethod_GetLoadState<WithStreamedUnaryMethod_CreateAlias<WithStreamedUnaryMethod_DropAlias<WithStreamedUnaryMethod_AlterAlias<WithStreamedUnaryMethod_DescribeAlias<WithStreamedUnaryMethod_ListAliases<WithStreamedUnaryMethod_CreateIndex<WithStreamedUnaryMethod_AlterIndex<WithStreamedUnaryMethod_DescribeIndex<WithStreamedUnaryMethod_GetIndexStatistics<WithStreamedUnaryMethod_GetIndexState<WithStreamedUnaryMethod_GetIndexBuildProgress<WithStreamedUnaryMethod_DropIndex<WithStreamedUnaryMethod_Insert<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Upsert<WithStreamedUnaryMethod_Search<WithStreamedUnaryMethod_SearchV2<WithStreamedUnaryMethod_Flush<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_CalcDistance<WithStreamedUnaryMethod_FlushAll<WithStreamedUnaryMethod_GetFlushState<WithStreamedUnaryMethod_GetFlushAllState<WithStreamedUnaryMethod_GetPersistentSegmentInfo<WithStreamedUnaryMethod_GetQuerySegmentInfo<WithStreamedUnaryMethod_GetReplicas<WithStreamedUnaryMethod_Dummy<WithStreamedUnaryMethod_RegisterLink<WithStreamedUnaryMethod_GetMetrics<WithStreamedUnaryMethod_GetComponentStates<WithStreamedUnaryMethod_LoadBalance<WithStreamedUnaryMethod_GetCompactionState<WithStreamedUnaryMethod_ManualCompaction<WithStreamedUnaryMethod_GetCompactionStateWithPlans<WithStreamedUnaryMethod_Import<WithStreamedUnaryMethod_GetImportState<WithStreamedUnaryMethod_ListImportTasks<WithStreamedUnaryMethod_CreateCredential<WithStreamedUnaryMethod_UpdateCredential<WithStreamedUnaryMethod_DeleteCredential<WithStreamedUnaryMethod_ListCredUsers<WithStreamedUnaryMethod_CreateRole<WithStreamedUnaryMethod_DropRole<WithStreamedUnaryMethod_OperateUserRole<WithStreamedUnaryMethod_SelectRole<WithStreamedUnaryMethod_SelectUser<WithStreamedUnaryMethod_OperatePrivilege<WithStreamedUnaryMethod_SelectGrant<WithStreamedUnaryMethod_GetVersion<WithStreamedUnaryMethod_CheckHealth<WithStreamedUnaryMethod_CreateResourceGroup<WithStreamedUnaryMethod_DropResourceGroup<WithStreamedUnaryMethod_TransferNode<WithStreamedUnaryMethod_TransferReplica<WithStreamedUnaryMethod_ListResourceGroups<WithStreamedUnaryMethod_DescribeResourceGroup<WithStreamedUnaryMethod_RenameCollection<WithStreamedUnaryMethod_ListIndexedSegment<WithStreamedUnaryMethod_DescribeSegmentIndexData<WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_AllocTimestamp<WithStreamedUnaryMethod_CreateDatabase<WithStreamedUnaryMethod_DropDatabase<WithStreamedUnaryMethod_ListDatabases<WithStreamedUnaryMethod_ReplicateMessage<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

class ProxyService final {
 public:
  static constexpr char const* service_full_name() {
    return "milvus.proto.milvus.ProxyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::milvus::proto::milvus::RegisterLinkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>> AsyncRegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>>(AsyncRegisterLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>> PrepareAsyncRegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>>(PrepareAsyncRegisterLinkRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>* AsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::milvus::proto::milvus::RegisterLinkResponse>* PrepareAsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::milvus::proto::milvus::RegisterLinkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>> AsyncRegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>>(AsyncRegisterLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>> PrepareAsyncRegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>>(PrepareAsyncRegisterLinkRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>* AsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>* PrepareAsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterLink_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterLink(::grpc::ServerContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterLink() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterLink(::grpc::ServerContext* context, ::milvus::proto::milvus::RegisterLinkRequest* request, ::grpc::ServerAsyncResponseWriter< ::milvus::proto::milvus::RegisterLinkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterLink<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterLink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response) { return this->RegisterLink(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterLink(
        ::grpc::experimental::MessageAllocator< ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterLink(
      ::grpc::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterLink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterLink<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterLink<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterLink() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterLink() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterLink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterLink() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterLink(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterLink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterLink(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterLink() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>* streamer) {
                       return this->StreamedRegisterLink(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterLink(::grpc::ServerContext* /*context*/, const ::milvus::proto::milvus::RegisterLinkRequest* /*request*/, ::milvus::proto::milvus::RegisterLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterLink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::milvus::proto::milvus::RegisterLinkRequest,::milvus::proto::milvus::RegisterLinkResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterLink<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterLink<Service > StreamedService;
};

}  // namespace milvus
}  // namespace proto
}  // namespace milvus


#endif  // GRPC_milvus_2eproto__INCLUDED
