// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "schema.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace milvus {
namespace proto {
namespace msg {
class CreateCollectionRequest;
class CreateCollectionRequestDefaultTypeInternal;
extern CreateCollectionRequestDefaultTypeInternal _CreateCollectionRequest_default_instance_;
class CreatePartitionRequest;
class CreatePartitionRequestDefaultTypeInternal;
extern CreatePartitionRequestDefaultTypeInternal _CreatePartitionRequest_default_instance_;
class DataNodeTtMsg;
class DataNodeTtMsgDefaultTypeInternal;
extern DataNodeTtMsgDefaultTypeInternal _DataNodeTtMsg_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DropCollectionRequest;
class DropCollectionRequestDefaultTypeInternal;
extern DropCollectionRequestDefaultTypeInternal _DropCollectionRequest_default_instance_;
class DropPartitionRequest;
class DropPartitionRequestDefaultTypeInternal;
extern DropPartitionRequestDefaultTypeInternal _DropPartitionRequest_default_instance_;
class InsertRequest;
class InsertRequestDefaultTypeInternal;
extern InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
class MsgPosition;
class MsgPositionDefaultTypeInternal;
extern MsgPositionDefaultTypeInternal _MsgPosition_default_instance_;
class TimeTickMsg;
class TimeTickMsgDefaultTypeInternal;
extern TimeTickMsgDefaultTypeInternal _TimeTickMsg_default_instance_;
}  // namespace msg
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::msg::CreateCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::CreateCollectionRequest>(Arena*);
template<> ::milvus::proto::msg::CreatePartitionRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::CreatePartitionRequest>(Arena*);
template<> ::milvus::proto::msg::DataNodeTtMsg* Arena::CreateMaybeMessage<::milvus::proto::msg::DataNodeTtMsg>(Arena*);
template<> ::milvus::proto::msg::DeleteRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::DeleteRequest>(Arena*);
template<> ::milvus::proto::msg::DropCollectionRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::DropCollectionRequest>(Arena*);
template<> ::milvus::proto::msg::DropPartitionRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::DropPartitionRequest>(Arena*);
template<> ::milvus::proto::msg::InsertRequest* Arena::CreateMaybeMessage<::milvus::proto::msg::InsertRequest>(Arena*);
template<> ::milvus::proto::msg::MsgPosition* Arena::CreateMaybeMessage<::milvus::proto::msg::MsgPosition>(Arena*);
template<> ::milvus::proto::msg::TimeTickMsg* Arena::CreateMaybeMessage<::milvus::proto::msg::TimeTickMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace msg {

enum InsertDataVersion : int {
  RowBased = 0,
  ColumnBased = 1,
  InsertDataVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InsertDataVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InsertDataVersion_IsValid(int value);
constexpr InsertDataVersion InsertDataVersion_MIN = RowBased;
constexpr InsertDataVersion InsertDataVersion_MAX = ColumnBased;
constexpr int InsertDataVersion_ARRAYSIZE = InsertDataVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsertDataVersion_descriptor();
template<typename T>
inline const std::string& InsertDataVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InsertDataVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InsertDataVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InsertDataVersion_descriptor(), enum_t_value);
}
inline bool InsertDataVersion_Parse(
    const std::string& name, InsertDataVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InsertDataVersion>(
    InsertDataVersion_descriptor(), name, value);
}
// ===================================================================

class InsertRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.InsertRequest) */ {
 public:
  inline InsertRequest() : InsertRequest(nullptr) {};
  virtual ~InsertRequest();

  InsertRequest(const InsertRequest& from);
  InsertRequest(InsertRequest&& from) noexcept
    : InsertRequest() {
    *this = ::std::move(from);
  }

  inline InsertRequest& operator=(const InsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertRequest& operator=(InsertRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertRequest* internal_default_instance() {
    return reinterpret_cast<const InsertRequest*>(
               &_InsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InsertRequest& a, InsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertRequest* New() const final {
    return CreateMaybeMessage<InsertRequest>(nullptr);
  }

  InsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertRequest& from);
  void MergeFrom(const InsertRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.InsertRequest";
  }
  protected:
  explicit InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampsFieldNumber = 10,
    kRowIDsFieldNumber = 11,
    kRowDataFieldNumber = 12,
    kFieldsDataFieldNumber = 13,
    kShardNameFieldNumber = 2,
    kDbNameFieldNumber = 3,
    kCollectionNameFieldNumber = 4,
    kPartitionNameFieldNumber = 5,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 6,
    kCollectionIDFieldNumber = 7,
    kPartitionIDFieldNumber = 8,
    kSegmentIDFieldNumber = 9,
    kNumRowsFieldNumber = 14,
    kVersionFieldNumber = 15,
  };
  // repeated uint64 timestamps = 10;
  int timestamps_size() const;
  private:
  int _internal_timestamps_size() const;
  public:
  void clear_timestamps();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_timestamps() const;
  void _internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_timestamps();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamps(int index) const;
  void set_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_timestamps();

  // repeated int64 rowIDs = 11;
  int rowids_size() const;
  private:
  int _internal_rowids_size() const;
  public:
  void clear_rowids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rowids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_rowids() const;
  void _internal_add_rowids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_rowids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 rowids(int index) const;
  void set_rowids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_rowids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      rowids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_rowids();

  // repeated .milvus.proto.common.Blob row_data = 12;
  int row_data_size() const;
  private:
  int _internal_row_data_size() const;
  public:
  void clear_row_data();
  ::milvus::proto::common::Blob* mutable_row_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::Blob >*
      mutable_row_data();
  private:
  const ::milvus::proto::common::Blob& _internal_row_data(int index) const;
  ::milvus::proto::common::Blob* _internal_add_row_data();
  public:
  const ::milvus::proto::common::Blob& row_data(int index) const;
  ::milvus::proto::common::Blob* add_row_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::Blob >&
      row_data() const;

  // repeated .milvus.proto.schema.FieldData fields_data = 13;
  int fields_data_size() const;
  private:
  int _internal_fields_data_size() const;
  public:
  void clear_fields_data();
  ::milvus::proto::schema::FieldData* mutable_fields_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
      mutable_fields_data();
  private:
  const ::milvus::proto::schema::FieldData& _internal_fields_data(int index) const;
  ::milvus::proto::schema::FieldData* _internal_add_fields_data();
  public:
  const ::milvus::proto::schema::FieldData& fields_data(int index) const;
  ::milvus::proto::schema::FieldData* add_fields_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
      fields_data() const;

  // string shardName = 2;
  void clear_shardname();
  const std::string& shardname() const;
  void set_shardname(const std::string& value);
  void set_shardname(std::string&& value);
  void set_shardname(const char* value);
  void set_shardname(const char* value, size_t size);
  std::string* mutable_shardname();
  std::string* release_shardname();
  void set_allocated_shardname(std::string* shardname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_shardname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_shardname(
      std::string* shardname);
  private:
  const std::string& _internal_shardname() const;
  void _internal_set_shardname(const std::string& value);
  std::string* _internal_mutable_shardname();
  public:

  // string db_name = 3;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_db_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_db_name(
      std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 4;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_collection_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_collection_name(
      std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 5;
  void clear_partition_name();
  const std::string& partition_name() const;
  void set_partition_name(const std::string& value);
  void set_partition_name(std::string&& value);
  void set_partition_name(const char* value);
  void set_partition_name(const char* value, size_t size);
  std::string* mutable_partition_name();
  std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_partition_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_partition_name(
      std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 6;
  void clear_dbid();
  ::PROTOBUF_NAMESPACE_ID::int64 dbid() const;
  void set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dbid() const;
  void _internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 collectionID = 7;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_collectionid() const;
  void _internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 partitionID = 8;
  void clear_partitionid();
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid() const;
  void set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_partitionid() const;
  void _internal_set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 segmentID = 9;
  void clear_segmentid();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid() const;
  void set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_segmentid() const;
  void _internal_set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 num_rows = 14;
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_rows() const;
  void _internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .milvus.proto.msg.InsertDataVersion version = 15;
  void clear_version();
  ::milvus::proto::msg::InsertDataVersion version() const;
  void set_version(::milvus::proto::msg::InsertDataVersion value);
  private:
  ::milvus::proto::msg::InsertDataVersion _internal_version() const;
  void _internal_set_version(::milvus::proto::msg::InsertDataVersion value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.InsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > timestamps_;
  mutable std::atomic<int> _timestamps_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > rowids_;
  mutable std::atomic<int> _rowids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::Blob > row_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData > fields_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shardname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::int64 dbid_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_rows_;
  int version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.DeleteRequest) */ {
 public:
  inline DeleteRequest() : DeleteRequest(nullptr) {};
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(nullptr);
  }

  DeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.DeleteRequest";
  }
  protected:
  explicit DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt64PrimaryKeysFieldNumber = 9,
    kTimestampsFieldNumber = 10,
    kShardNameFieldNumber = 2,
    kDbNameFieldNumber = 3,
    kCollectionNameFieldNumber = 4,
    kPartitionNameFieldNumber = 5,
    kBaseFieldNumber = 1,
    kPrimaryKeysFieldNumber = 12,
    kDbIDFieldNumber = 6,
    kCollectionIDFieldNumber = 7,
    kPartitionIDFieldNumber = 8,
    kNumRowsFieldNumber = 11,
  };
  // repeated int64 int64_primary_keys = 9;
  int int64_primary_keys_size() const;
  private:
  int _internal_int64_primary_keys_size() const;
  public:
  void clear_int64_primary_keys();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_primary_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_int64_primary_keys() const;
  void _internal_add_int64_primary_keys(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_int64_primary_keys();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 int64_primary_keys(int index) const;
  void set_int64_primary_keys(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int64_primary_keys(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int64_primary_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int64_primary_keys();

  // repeated uint64 timestamps = 10;
  int timestamps_size() const;
  private:
  int _internal_timestamps_size() const;
  public:
  void clear_timestamps();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_timestamps() const;
  void _internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_timestamps();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamps(int index) const;
  void set_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_timestamps();

  // string shardName = 2;
  void clear_shardname();
  const std::string& shardname() const;
  void set_shardname(const std::string& value);
  void set_shardname(std::string&& value);
  void set_shardname(const char* value);
  void set_shardname(const char* value, size_t size);
  std::string* mutable_shardname();
  std::string* release_shardname();
  void set_allocated_shardname(std::string* shardname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_shardname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_shardname(
      std::string* shardname);
  private:
  const std::string& _internal_shardname() const;
  void _internal_set_shardname(const std::string& value);
  std::string* _internal_mutable_shardname();
  public:

  // string db_name = 3;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_db_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_db_name(
      std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 4;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_collection_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_collection_name(
      std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 5;
  void clear_partition_name();
  const std::string& partition_name() const;
  void set_partition_name(const std::string& value);
  void set_partition_name(std::string&& value);
  void set_partition_name(const char* value);
  void set_partition_name(const char* value, size_t size);
  std::string* mutable_partition_name();
  std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_partition_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_partition_name(
      std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // .milvus.proto.schema.IDs primary_keys = 12;
  bool has_primary_keys() const;
  private:
  bool _internal_has_primary_keys() const;
  public:
  void clear_primary_keys();
  const ::milvus::proto::schema::IDs& primary_keys() const;
  ::milvus::proto::schema::IDs* release_primary_keys();
  ::milvus::proto::schema::IDs* mutable_primary_keys();
  void set_allocated_primary_keys(::milvus::proto::schema::IDs* primary_keys);
  private:
  const ::milvus::proto::schema::IDs& _internal_primary_keys() const;
  ::milvus::proto::schema::IDs* _internal_mutable_primary_keys();
  public:
  void unsafe_arena_set_allocated_primary_keys(
      ::milvus::proto::schema::IDs* primary_keys);
  ::milvus::proto::schema::IDs* unsafe_arena_release_primary_keys();

  // int64 dbID = 6;
  void clear_dbid();
  ::PROTOBUF_NAMESPACE_ID::int64 dbid() const;
  void set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dbid() const;
  void _internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 collectionID = 7;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_collectionid() const;
  void _internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 partitionID = 8;
  void clear_partitionid();
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid() const;
  void set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_partitionid() const;
  void _internal_set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_rows = 11;
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_rows() const;
  void _internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.DeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int64_primary_keys_;
  mutable std::atomic<int> _int64_primary_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > timestamps_;
  mutable std::atomic<int> _timestamps_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shardname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  ::milvus::proto::common::MsgBase* base_;
  ::milvus::proto::schema::IDs* primary_keys_;
  ::PROTOBUF_NAMESPACE_ID::int64 dbid_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MsgPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.MsgPosition) */ {
 public:
  inline MsgPosition() : MsgPosition(nullptr) {};
  virtual ~MsgPosition();

  MsgPosition(const MsgPosition& from);
  MsgPosition(MsgPosition&& from) noexcept
    : MsgPosition() {
    *this = ::std::move(from);
  }

  inline MsgPosition& operator=(const MsgPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPosition& operator=(MsgPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgPosition* internal_default_instance() {
    return reinterpret_cast<const MsgPosition*>(
               &_MsgPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgPosition& a, MsgPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPosition* New() const final {
    return CreateMaybeMessage<MsgPosition>(nullptr);
  }

  MsgPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPosition& from);
  void MergeFrom(const MsgPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.MsgPosition";
  }
  protected:
  explicit MsgPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kMsgIDFieldNumber = 2,
    kMsgGroupFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // string channel_name = 1;
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel_name(
      std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // bytes msgID = 2;
  void clear_msgid();
  const std::string& msgid() const;
  void set_msgid(const std::string& value);
  void set_msgid(std::string&& value);
  void set_msgid(const char* value);
  void set_msgid(const void* value, size_t size);
  std::string* mutable_msgid();
  std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msgid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msgid(
      std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string msgGroup = 3;
  void clear_msggroup();
  const std::string& msggroup() const;
  void set_msggroup(const std::string& value);
  void set_msggroup(std::string&& value);
  void set_msggroup(const char* value);
  void set_msggroup(const char* value, size_t size);
  std::string* mutable_msggroup();
  std::string* release_msggroup();
  void set_allocated_msggroup(std::string* msggroup);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msggroup();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msggroup(
      std::string* msggroup);
  private:
  const std::string& _internal_msggroup() const;
  void _internal_set_msggroup(const std::string& value);
  std::string* _internal_mutable_msggroup();
  public:

  // uint64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.MsgPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msggroup_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateCollectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.CreateCollectionRequest) */ {
 public:
  inline CreateCollectionRequest() : CreateCollectionRequest(nullptr) {};
  virtual ~CreateCollectionRequest();

  CreateCollectionRequest(const CreateCollectionRequest& from);
  CreateCollectionRequest(CreateCollectionRequest&& from) noexcept
    : CreateCollectionRequest() {
    *this = ::std::move(from);
  }

  inline CreateCollectionRequest& operator=(const CreateCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCollectionRequest& operator=(CreateCollectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCollectionRequest*>(
               &_CreateCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateCollectionRequest& a, CreateCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCollectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCollectionRequest* New() const final {
    return CreateMaybeMessage<CreateCollectionRequest>(nullptr);
  }

  CreateCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateCollectionRequest& from);
  void MergeFrom(const CreateCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.CreateCollectionRequest";
  }
  protected:
  explicit CreateCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNamesFieldNumber = 9,
    kPhysicalChannelNamesFieldNumber = 10,
    kPartitionIDsFieldNumber = 11,
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kSchemaFieldNumber = 8,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 5,
    kCollectionIDFieldNumber = 6,
    kPartitionIDFieldNumber = 7,
  };
  // repeated string virtualChannelNames = 9;
  int virtualchannelnames_size() const;
  private:
  int _internal_virtualchannelnames_size() const;
  public:
  void clear_virtualchannelnames();
  const std::string& virtualchannelnames(int index) const;
  std::string* mutable_virtualchannelnames(int index);
  void set_virtualchannelnames(int index, const std::string& value);
  void set_virtualchannelnames(int index, std::string&& value);
  void set_virtualchannelnames(int index, const char* value);
  void set_virtualchannelnames(int index, const char* value, size_t size);
  std::string* add_virtualchannelnames();
  void add_virtualchannelnames(const std::string& value);
  void add_virtualchannelnames(std::string&& value);
  void add_virtualchannelnames(const char* value);
  void add_virtualchannelnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& virtualchannelnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_virtualchannelnames();
  private:
  const std::string& _internal_virtualchannelnames(int index) const;
  std::string* _internal_add_virtualchannelnames();
  public:

  // repeated string physicalChannelNames = 10;
  int physicalchannelnames_size() const;
  private:
  int _internal_physicalchannelnames_size() const;
  public:
  void clear_physicalchannelnames();
  const std::string& physicalchannelnames(int index) const;
  std::string* mutable_physicalchannelnames(int index);
  void set_physicalchannelnames(int index, const std::string& value);
  void set_physicalchannelnames(int index, std::string&& value);
  void set_physicalchannelnames(int index, const char* value);
  void set_physicalchannelnames(int index, const char* value, size_t size);
  std::string* add_physicalchannelnames();
  void add_physicalchannelnames(const std::string& value);
  void add_physicalchannelnames(std::string&& value);
  void add_physicalchannelnames(const char* value);
  void add_physicalchannelnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& physicalchannelnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_physicalchannelnames();
  private:
  const std::string& _internal_physicalchannelnames(int index) const;
  std::string* _internal_add_physicalchannelnames();
  public:

  // repeated int64 partitionIDs = 11;
  int partitionids_size() const;
  private:
  int _internal_partitionids_size() const;
  public:
  void clear_partitionids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_partitionids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_partitionids() const;
  void _internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_partitionids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 partitionids(int index) const;
  void set_partitionids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_partitionids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      partitionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_partitionids();

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_db_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_db_name(
      std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collectionName = 3;
  void clear_collectionname();
  const std::string& collectionname() const;
  void set_collectionname(const std::string& value);
  void set_collectionname(std::string&& value);
  void set_collectionname(const char* value);
  void set_collectionname(const char* value, size_t size);
  std::string* mutable_collectionname();
  std::string* release_collectionname();
  void set_allocated_collectionname(std::string* collectionname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_collectionname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_collectionname(
      std::string* collectionname);
  private:
  const std::string& _internal_collectionname() const;
  void _internal_set_collectionname(const std::string& value);
  std::string* _internal_mutable_collectionname();
  public:

  // string partitionName = 4;
  void clear_partitionname();
  const std::string& partitionname() const;
  void set_partitionname(const std::string& value);
  void set_partitionname(std::string&& value);
  void set_partitionname(const char* value);
  void set_partitionname(const char* value, size_t size);
  std::string* mutable_partitionname();
  std::string* release_partitionname();
  void set_allocated_partitionname(std::string* partitionname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_partitionname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_partitionname(
      std::string* partitionname);
  private:
  const std::string& _internal_partitionname() const;
  void _internal_set_partitionname(const std::string& value);
  std::string* _internal_mutable_partitionname();
  public:

  // bytes schema = 8;
  void clear_schema();
  const std::string& schema() const;
  void set_schema(const std::string& value);
  void set_schema(std::string&& value);
  void set_schema(const char* value);
  void set_schema(const void* value, size_t size);
  std::string* mutable_schema();
  std::string* release_schema();
  void set_allocated_schema(std::string* schema);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_schema();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_schema(
      std::string* schema);
  private:
  const std::string& _internal_schema() const;
  void _internal_set_schema(const std::string& value);
  std::string* _internal_mutable_schema();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 5;
  void clear_dbid();
  ::PROTOBUF_NAMESPACE_ID::int64 dbid() const;
  void set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dbid() const;
  void _internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 collectionID = 6;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_collectionid() const;
  void _internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 partitionID = 7;
  void clear_partitionid();
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid() const;
  void set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_partitionid() const;
  void _internal_set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.CreateCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> virtualchannelnames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> physicalchannelnames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > partitionids_;
  mutable std::atomic<int> _partitionids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partitionname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::int64 dbid_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DropCollectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.DropCollectionRequest) */ {
 public:
  inline DropCollectionRequest() : DropCollectionRequest(nullptr) {};
  virtual ~DropCollectionRequest();

  DropCollectionRequest(const DropCollectionRequest& from);
  DropCollectionRequest(DropCollectionRequest&& from) noexcept
    : DropCollectionRequest() {
    *this = ::std::move(from);
  }

  inline DropCollectionRequest& operator=(const DropCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropCollectionRequest& operator=(DropCollectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const DropCollectionRequest*>(
               &_DropCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DropCollectionRequest& a, DropCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropCollectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropCollectionRequest* New() const final {
    return CreateMaybeMessage<DropCollectionRequest>(nullptr);
  }

  DropCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropCollectionRequest& from);
  void MergeFrom(const DropCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.DropCollectionRequest";
  }
  protected:
  explicit DropCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 4,
    kCollectionIDFieldNumber = 5,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_db_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_db_name(
      std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collectionName = 3;
  void clear_collectionname();
  const std::string& collectionname() const;
  void set_collectionname(const std::string& value);
  void set_collectionname(std::string&& value);
  void set_collectionname(const char* value);
  void set_collectionname(const char* value, size_t size);
  std::string* mutable_collectionname();
  std::string* release_collectionname();
  void set_allocated_collectionname(std::string* collectionname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_collectionname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_collectionname(
      std::string* collectionname);
  private:
  const std::string& _internal_collectionname() const;
  void _internal_set_collectionname(const std::string& value);
  std::string* _internal_mutable_collectionname();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 4;
  void clear_dbid();
  ::PROTOBUF_NAMESPACE_ID::int64 dbid() const;
  void set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dbid() const;
  void _internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 collectionID = 5;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_collectionid() const;
  void _internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.DropCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionname_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::int64 dbid_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreatePartitionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.CreatePartitionRequest) */ {
 public:
  inline CreatePartitionRequest() : CreatePartitionRequest(nullptr) {};
  virtual ~CreatePartitionRequest();

  CreatePartitionRequest(const CreatePartitionRequest& from);
  CreatePartitionRequest(CreatePartitionRequest&& from) noexcept
    : CreatePartitionRequest() {
    *this = ::std::move(from);
  }

  inline CreatePartitionRequest& operator=(const CreatePartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePartitionRequest& operator=(CreatePartitionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePartitionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePartitionRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePartitionRequest*>(
               &_CreatePartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreatePartitionRequest& a, CreatePartitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePartitionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePartitionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePartitionRequest* New() const final {
    return CreateMaybeMessage<CreatePartitionRequest>(nullptr);
  }

  CreatePartitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePartitionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePartitionRequest& from);
  void MergeFrom(const CreatePartitionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePartitionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.CreatePartitionRequest";
  }
  protected:
  explicit CreatePartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 5,
    kCollectionIDFieldNumber = 6,
    kPartitionIDFieldNumber = 7,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_db_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_db_name(
      std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_collection_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_collection_name(
      std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  void set_partition_name(const std::string& value);
  void set_partition_name(std::string&& value);
  void set_partition_name(const char* value);
  void set_partition_name(const char* value, size_t size);
  std::string* mutable_partition_name();
  std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_partition_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_partition_name(
      std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 5;
  void clear_dbid();
  ::PROTOBUF_NAMESPACE_ID::int64 dbid() const;
  void set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dbid() const;
  void _internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 collectionID = 6;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_collectionid() const;
  void _internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 partitionID = 7;
  void clear_partitionid();
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid() const;
  void set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_partitionid() const;
  void _internal_set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.CreatePartitionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::int64 dbid_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DropPartitionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.DropPartitionRequest) */ {
 public:
  inline DropPartitionRequest() : DropPartitionRequest(nullptr) {};
  virtual ~DropPartitionRequest();

  DropPartitionRequest(const DropPartitionRequest& from);
  DropPartitionRequest(DropPartitionRequest&& from) noexcept
    : DropPartitionRequest() {
    *this = ::std::move(from);
  }

  inline DropPartitionRequest& operator=(const DropPartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropPartitionRequest& operator=(DropPartitionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropPartitionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropPartitionRequest* internal_default_instance() {
    return reinterpret_cast<const DropPartitionRequest*>(
               &_DropPartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DropPartitionRequest& a, DropPartitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropPartitionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropPartitionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropPartitionRequest* New() const final {
    return CreateMaybeMessage<DropPartitionRequest>(nullptr);
  }

  DropPartitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropPartitionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropPartitionRequest& from);
  void MergeFrom(const DropPartitionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropPartitionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.DropPartitionRequest";
  }
  protected:
  explicit DropPartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 2,
    kCollectionNameFieldNumber = 3,
    kPartitionNameFieldNumber = 4,
    kBaseFieldNumber = 1,
    kDbIDFieldNumber = 5,
    kCollectionIDFieldNumber = 6,
    kPartitionIDFieldNumber = 7,
  };
  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_db_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_db_name(
      std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string collection_name = 3;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_collection_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_collection_name(
      std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string partition_name = 4;
  void clear_partition_name();
  const std::string& partition_name() const;
  void set_partition_name(const std::string& value);
  void set_partition_name(std::string&& value);
  void set_partition_name(const char* value);
  void set_partition_name(const char* value, size_t size);
  std::string* mutable_partition_name();
  std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_partition_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_partition_name(
      std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // int64 dbID = 5;
  void clear_dbid();
  ::PROTOBUF_NAMESPACE_ID::int64 dbid() const;
  void set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dbid() const;
  void _internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 collectionID = 6;
  void clear_collectionid();
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid() const;
  void set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_collectionid() const;
  void _internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 partitionID = 7;
  void clear_partitionid();
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid() const;
  void set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_partitionid() const;
  void _internal_set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.DropPartitionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::int64 dbid_;
  ::PROTOBUF_NAMESPACE_ID::int64 collectionid_;
  ::PROTOBUF_NAMESPACE_ID::int64 partitionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class TimeTickMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.TimeTickMsg) */ {
 public:
  inline TimeTickMsg() : TimeTickMsg(nullptr) {};
  virtual ~TimeTickMsg();

  TimeTickMsg(const TimeTickMsg& from);
  TimeTickMsg(TimeTickMsg&& from) noexcept
    : TimeTickMsg() {
    *this = ::std::move(from);
  }

  inline TimeTickMsg& operator=(const TimeTickMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeTickMsg& operator=(TimeTickMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeTickMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeTickMsg* internal_default_instance() {
    return reinterpret_cast<const TimeTickMsg*>(
               &_TimeTickMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TimeTickMsg& a, TimeTickMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeTickMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeTickMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeTickMsg* New() const final {
    return CreateMaybeMessage<TimeTickMsg>(nullptr);
  }

  TimeTickMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeTickMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeTickMsg& from);
  void MergeFrom(const TimeTickMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeTickMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.TimeTickMsg";
  }
  protected:
  explicit TimeTickMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.TimeTickMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DataNodeTtMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.msg.DataNodeTtMsg) */ {
 public:
  inline DataNodeTtMsg() : DataNodeTtMsg(nullptr) {};
  virtual ~DataNodeTtMsg();

  DataNodeTtMsg(const DataNodeTtMsg& from);
  DataNodeTtMsg(DataNodeTtMsg&& from) noexcept
    : DataNodeTtMsg() {
    *this = ::std::move(from);
  }

  inline DataNodeTtMsg& operator=(const DataNodeTtMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataNodeTtMsg& operator=(DataNodeTtMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataNodeTtMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataNodeTtMsg* internal_default_instance() {
    return reinterpret_cast<const DataNodeTtMsg*>(
               &_DataNodeTtMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DataNodeTtMsg& a, DataNodeTtMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(DataNodeTtMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataNodeTtMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataNodeTtMsg* New() const final {
    return CreateMaybeMessage<DataNodeTtMsg>(nullptr);
  }

  DataNodeTtMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataNodeTtMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataNodeTtMsg& from);
  void MergeFrom(const DataNodeTtMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataNodeTtMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.msg.DataNodeTtMsg";
  }
  protected:
  explicit DataNodeTtMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsStatsFieldNumber = 4,
    kChannelNameFieldNumber = 2,
    kBaseFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // repeated .milvus.proto.common.SegmentStats segments_stats = 4;
  int segments_stats_size() const;
  private:
  int _internal_segments_stats_size() const;
  public:
  void clear_segments_stats();
  ::milvus::proto::common::SegmentStats* mutable_segments_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >*
      mutable_segments_stats();
  private:
  const ::milvus::proto::common::SegmentStats& _internal_segments_stats(int index) const;
  ::milvus::proto::common::SegmentStats* _internal_add_segments_stats();
  public:
  const ::milvus::proto::common::SegmentStats& segments_stats(int index) const;
  ::milvus::proto::common::SegmentStats* add_segments_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >&
      segments_stats() const;

  // string channel_name = 2;
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel_name(
      std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.msg.DataNodeTtMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats > segments_stats_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::milvus::proto::common::MsgBase* base_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InsertRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool InsertRequest::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool InsertRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& InsertRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& InsertRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.base)
  return _internal_base();
}
inline void InsertRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.InsertRequest.base)
}
inline ::milvus::proto::common::MsgBase* InsertRequest::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* InsertRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.InsertRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* InsertRequest::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* InsertRequest::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.base)
  return _internal_mutable_base();
}
inline void InsertRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base)->GetArena();
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.InsertRequest.base)
}

// string shardName = 2;
inline void InsertRequest::clear_shardname() {
  shardname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InsertRequest::shardname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.shardName)
  return _internal_shardname();
}
inline void InsertRequest::set_shardname(const std::string& value) {
  _internal_set_shardname(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.shardName)
}
inline std::string* InsertRequest::mutable_shardname() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.shardName)
  return _internal_mutable_shardname();
}
inline const std::string& InsertRequest::_internal_shardname() const {
  return shardname_.Get();
}
inline void InsertRequest::_internal_set_shardname(const std::string& value) {
  
  shardname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InsertRequest::set_shardname(std::string&& value) {
  
  shardname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.InsertRequest.shardName)
}
inline void InsertRequest::set_shardname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shardname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.InsertRequest.shardName)
}
inline void InsertRequest::set_shardname(const char* value,
    size_t size) {
  
  shardname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.InsertRequest.shardName)
}
inline std::string* InsertRequest::_internal_mutable_shardname() {
  
  return shardname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InsertRequest::release_shardname() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.InsertRequest.shardName)
  return shardname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertRequest::set_allocated_shardname(std::string* shardname) {
  if (shardname != nullptr) {
    
  } else {
    
  }
  shardname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shardname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.InsertRequest.shardName)
}
inline std::string* InsertRequest::unsafe_arena_release_shardname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.InsertRequest.shardName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return shardname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InsertRequest::unsafe_arena_set_allocated_shardname(
    std::string* shardname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shardname != nullptr) {
    
  } else {
    
  }
  shardname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shardname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.InsertRequest.shardName)
}

// string db_name = 3;
inline void InsertRequest::clear_db_name() {
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InsertRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.db_name)
  return _internal_db_name();
}
inline void InsertRequest::set_db_name(const std::string& value) {
  _internal_set_db_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.db_name)
}
inline std::string* InsertRequest::mutable_db_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.db_name)
  return _internal_mutable_db_name();
}
inline const std::string& InsertRequest::_internal_db_name() const {
  return db_name_.Get();
}
inline void InsertRequest::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InsertRequest::set_db_name(std::string&& value) {
  
  db_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.InsertRequest.db_name)
}
inline void InsertRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.InsertRequest.db_name)
}
inline void InsertRequest::set_db_name(const char* value,
    size_t size) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.InsertRequest.db_name)
}
inline std::string* InsertRequest::_internal_mutable_db_name() {
  
  return db_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InsertRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.InsertRequest.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.InsertRequest.db_name)
}
inline std::string* InsertRequest::unsafe_arena_release_db_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.InsertRequest.db_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return db_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InsertRequest::unsafe_arena_set_allocated_db_name(
    std::string* db_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      db_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.InsertRequest.db_name)
}

// string collection_name = 4;
inline void InsertRequest::clear_collection_name() {
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InsertRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.collection_name)
  return _internal_collection_name();
}
inline void InsertRequest::set_collection_name(const std::string& value) {
  _internal_set_collection_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.collection_name)
}
inline std::string* InsertRequest::mutable_collection_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.collection_name)
  return _internal_mutable_collection_name();
}
inline const std::string& InsertRequest::_internal_collection_name() const {
  return collection_name_.Get();
}
inline void InsertRequest::_internal_set_collection_name(const std::string& value) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InsertRequest::set_collection_name(std::string&& value) {
  
  collection_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.InsertRequest.collection_name)
}
inline void InsertRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.InsertRequest.collection_name)
}
inline void InsertRequest::set_collection_name(const char* value,
    size_t size) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.InsertRequest.collection_name)
}
inline std::string* InsertRequest::_internal_mutable_collection_name() {
  
  return collection_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InsertRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.InsertRequest.collection_name)
  return collection_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.InsertRequest.collection_name)
}
inline std::string* InsertRequest::unsafe_arena_release_collection_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.InsertRequest.collection_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return collection_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InsertRequest::unsafe_arena_set_allocated_collection_name(
    std::string* collection_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      collection_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.InsertRequest.collection_name)
}

// string partition_name = 5;
inline void InsertRequest::clear_partition_name() {
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InsertRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.partition_name)
  return _internal_partition_name();
}
inline void InsertRequest::set_partition_name(const std::string& value) {
  _internal_set_partition_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.partition_name)
}
inline std::string* InsertRequest::mutable_partition_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.partition_name)
  return _internal_mutable_partition_name();
}
inline const std::string& InsertRequest::_internal_partition_name() const {
  return partition_name_.Get();
}
inline void InsertRequest::_internal_set_partition_name(const std::string& value) {
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InsertRequest::set_partition_name(std::string&& value) {
  
  partition_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.InsertRequest.partition_name)
}
inline void InsertRequest::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.InsertRequest.partition_name)
}
inline void InsertRequest::set_partition_name(const char* value,
    size_t size) {
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.InsertRequest.partition_name)
}
inline std::string* InsertRequest::_internal_mutable_partition_name() {
  
  return partition_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InsertRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.InsertRequest.partition_name)
  return partition_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.InsertRequest.partition_name)
}
inline std::string* InsertRequest::unsafe_arena_release_partition_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.InsertRequest.partition_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return partition_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InsertRequest::unsafe_arena_set_allocated_partition_name(
    std::string* partition_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      partition_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.InsertRequest.partition_name)
}

// int64 dbID = 6;
inline void InsertRequest::clear_dbid() {
  dbid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertRequest::_internal_dbid() const {
  return dbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.dbID)
  return _internal_dbid();
}
inline void InsertRequest::_internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dbid_ = value;
}
inline void InsertRequest::set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.dbID)
}

// int64 collectionID = 7;
inline void InsertRequest::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertRequest::_internal_collectionid() const {
  return collectionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.collectionID)
  return _internal_collectionid();
}
inline void InsertRequest::_internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
}
inline void InsertRequest::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.collectionID)
}

// int64 partitionID = 8;
inline void InsertRequest::clear_partitionid() {
  partitionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertRequest::_internal_partitionid() const {
  return partitionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.partitionID)
  return _internal_partitionid();
}
inline void InsertRequest::_internal_set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  partitionid_ = value;
}
inline void InsertRequest::set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.partitionID)
}

// int64 segmentID = 9;
inline void InsertRequest::clear_segmentid() {
  segmentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertRequest::_internal_segmentid() const {
  return segmentid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertRequest::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.segmentID)
  return _internal_segmentid();
}
inline void InsertRequest::_internal_set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  segmentid_ = value;
}
inline void InsertRequest::set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.segmentID)
}

// repeated uint64 timestamps = 10;
inline int InsertRequest::_internal_timestamps_size() const {
  return timestamps_.size();
}
inline int InsertRequest::timestamps_size() const {
  return _internal_timestamps_size();
}
inline void InsertRequest::clear_timestamps() {
  timestamps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InsertRequest::_internal_timestamps(int index) const {
  return timestamps_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InsertRequest::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.timestamps)
  return _internal_timestamps(index);
}
inline void InsertRequest::set_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.timestamps)
}
inline void InsertRequest::_internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  timestamps_.Add(value);
}
inline void InsertRequest::add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_timestamps(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.InsertRequest.timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
InsertRequest::_internal_timestamps() const {
  return timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
InsertRequest::timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.InsertRequest.timestamps)
  return _internal_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
InsertRequest::_internal_mutable_timestamps() {
  return &timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
InsertRequest::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.InsertRequest.timestamps)
  return _internal_mutable_timestamps();
}

// repeated int64 rowIDs = 11;
inline int InsertRequest::_internal_rowids_size() const {
  return rowids_.size();
}
inline int InsertRequest::rowids_size() const {
  return _internal_rowids_size();
}
inline void InsertRequest::clear_rowids() {
  rowids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertRequest::_internal_rowids(int index) const {
  return rowids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertRequest::rowids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.rowIDs)
  return _internal_rowids(index);
}
inline void InsertRequest::set_rowids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  rowids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.rowIDs)
}
inline void InsertRequest::_internal_add_rowids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  rowids_.Add(value);
}
inline void InsertRequest::add_rowids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_rowids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.InsertRequest.rowIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
InsertRequest::_internal_rowids() const {
  return rowids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
InsertRequest::rowids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.InsertRequest.rowIDs)
  return _internal_rowids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
InsertRequest::_internal_mutable_rowids() {
  return &rowids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
InsertRequest::mutable_rowids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.InsertRequest.rowIDs)
  return _internal_mutable_rowids();
}

// repeated .milvus.proto.common.Blob row_data = 12;
inline int InsertRequest::_internal_row_data_size() const {
  return row_data_.size();
}
inline int InsertRequest::row_data_size() const {
  return _internal_row_data_size();
}
inline ::milvus::proto::common::Blob* InsertRequest::mutable_row_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.row_data)
  return row_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::Blob >*
InsertRequest::mutable_row_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.InsertRequest.row_data)
  return &row_data_;
}
inline const ::milvus::proto::common::Blob& InsertRequest::_internal_row_data(int index) const {
  return row_data_.Get(index);
}
inline const ::milvus::proto::common::Blob& InsertRequest::row_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.row_data)
  return _internal_row_data(index);
}
inline ::milvus::proto::common::Blob* InsertRequest::_internal_add_row_data() {
  return row_data_.Add();
}
inline ::milvus::proto::common::Blob* InsertRequest::add_row_data() {
  // @@protoc_insertion_point(field_add:milvus.proto.msg.InsertRequest.row_data)
  return _internal_add_row_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::Blob >&
InsertRequest::row_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.InsertRequest.row_data)
  return row_data_;
}

// repeated .milvus.proto.schema.FieldData fields_data = 13;
inline int InsertRequest::_internal_fields_data_size() const {
  return fields_data_.size();
}
inline int InsertRequest::fields_data_size() const {
  return _internal_fields_data_size();
}
inline ::milvus::proto::schema::FieldData* InsertRequest::mutable_fields_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.InsertRequest.fields_data)
  return fields_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
InsertRequest::mutable_fields_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.InsertRequest.fields_data)
  return &fields_data_;
}
inline const ::milvus::proto::schema::FieldData& InsertRequest::_internal_fields_data(int index) const {
  return fields_data_.Get(index);
}
inline const ::milvus::proto::schema::FieldData& InsertRequest::fields_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.fields_data)
  return _internal_fields_data(index);
}
inline ::milvus::proto::schema::FieldData* InsertRequest::_internal_add_fields_data() {
  return fields_data_.Add();
}
inline ::milvus::proto::schema::FieldData* InsertRequest::add_fields_data() {
  // @@protoc_insertion_point(field_add:milvus.proto.msg.InsertRequest.fields_data)
  return _internal_add_fields_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
InsertRequest::fields_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.InsertRequest.fields_data)
  return fields_data_;
}

// uint64 num_rows = 14;
inline void InsertRequest::clear_num_rows() {
  num_rows_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InsertRequest::_internal_num_rows() const {
  return num_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InsertRequest::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.num_rows)
  return _internal_num_rows();
}
inline void InsertRequest::_internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_rows_ = value;
}
inline void InsertRequest::set_num_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.num_rows)
}

// .milvus.proto.msg.InsertDataVersion version = 15;
inline void InsertRequest::clear_version() {
  version_ = 0;
}
inline ::milvus::proto::msg::InsertDataVersion InsertRequest::_internal_version() const {
  return static_cast< ::milvus::proto::msg::InsertDataVersion >(version_);
}
inline ::milvus::proto::msg::InsertDataVersion InsertRequest::version() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.InsertRequest.version)
  return _internal_version();
}
inline void InsertRequest::_internal_set_version(::milvus::proto::msg::InsertDataVersion value) {
  
  version_ = value;
}
inline void InsertRequest::set_version(::milvus::proto::msg::InsertDataVersion value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.InsertRequest.version)
}

// -------------------------------------------------------------------

// DeleteRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DeleteRequest::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool DeleteRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DeleteRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DeleteRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.base)
  return _internal_base();
}
inline void DeleteRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DeleteRequest.base)
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* DeleteRequest::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.base)
  return _internal_mutable_base();
}
inline void DeleteRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base)->GetArena();
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.base)
}

// string shardName = 2;
inline void DeleteRequest::clear_shardname() {
  shardname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRequest::shardname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.shardName)
  return _internal_shardname();
}
inline void DeleteRequest::set_shardname(const std::string& value) {
  _internal_set_shardname(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.shardName)
}
inline std::string* DeleteRequest::mutable_shardname() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.shardName)
  return _internal_mutable_shardname();
}
inline const std::string& DeleteRequest::_internal_shardname() const {
  return shardname_.Get();
}
inline void DeleteRequest::_internal_set_shardname(const std::string& value) {
  
  shardname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRequest::set_shardname(std::string&& value) {
  
  shardname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.DeleteRequest.shardName)
}
inline void DeleteRequest::set_shardname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shardname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.DeleteRequest.shardName)
}
inline void DeleteRequest::set_shardname(const char* value,
    size_t size) {
  
  shardname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.DeleteRequest.shardName)
}
inline std::string* DeleteRequest::_internal_mutable_shardname() {
  
  return shardname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRequest::release_shardname() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.shardName)
  return shardname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRequest::set_allocated_shardname(std::string* shardname) {
  if (shardname != nullptr) {
    
  } else {
    
  }
  shardname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shardname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.shardName)
}
inline std::string* DeleteRequest::unsafe_arena_release_shardname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.DeleteRequest.shardName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return shardname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteRequest::unsafe_arena_set_allocated_shardname(
    std::string* shardname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shardname != nullptr) {
    
  } else {
    
  }
  shardname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shardname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DeleteRequest.shardName)
}

// string db_name = 3;
inline void DeleteRequest::clear_db_name() {
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.db_name)
  return _internal_db_name();
}
inline void DeleteRequest::set_db_name(const std::string& value) {
  _internal_set_db_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.db_name)
}
inline std::string* DeleteRequest::mutable_db_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.db_name)
  return _internal_mutable_db_name();
}
inline const std::string& DeleteRequest::_internal_db_name() const {
  return db_name_.Get();
}
inline void DeleteRequest::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRequest::set_db_name(std::string&& value) {
  
  db_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.DeleteRequest.db_name)
}
inline void DeleteRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.DeleteRequest.db_name)
}
inline void DeleteRequest::set_db_name(const char* value,
    size_t size) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.DeleteRequest.db_name)
}
inline std::string* DeleteRequest::_internal_mutable_db_name() {
  
  return db_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.db_name)
}
inline std::string* DeleteRequest::unsafe_arena_release_db_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.DeleteRequest.db_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return db_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteRequest::unsafe_arena_set_allocated_db_name(
    std::string* db_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      db_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DeleteRequest.db_name)
}

// string collection_name = 4;
inline void DeleteRequest::clear_collection_name() {
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.collection_name)
  return _internal_collection_name();
}
inline void DeleteRequest::set_collection_name(const std::string& value) {
  _internal_set_collection_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.collection_name)
}
inline std::string* DeleteRequest::mutable_collection_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.collection_name)
  return _internal_mutable_collection_name();
}
inline const std::string& DeleteRequest::_internal_collection_name() const {
  return collection_name_.Get();
}
inline void DeleteRequest::_internal_set_collection_name(const std::string& value) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRequest::set_collection_name(std::string&& value) {
  
  collection_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.DeleteRequest.collection_name)
}
inline void DeleteRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.DeleteRequest.collection_name)
}
inline void DeleteRequest::set_collection_name(const char* value,
    size_t size) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.DeleteRequest.collection_name)
}
inline std::string* DeleteRequest::_internal_mutable_collection_name() {
  
  return collection_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.collection_name)
  return collection_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.collection_name)
}
inline std::string* DeleteRequest::unsafe_arena_release_collection_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.DeleteRequest.collection_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return collection_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteRequest::unsafe_arena_set_allocated_collection_name(
    std::string* collection_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      collection_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DeleteRequest.collection_name)
}

// string partition_name = 5;
inline void DeleteRequest::clear_partition_name() {
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.partition_name)
  return _internal_partition_name();
}
inline void DeleteRequest::set_partition_name(const std::string& value) {
  _internal_set_partition_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.partition_name)
}
inline std::string* DeleteRequest::mutable_partition_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.partition_name)
  return _internal_mutable_partition_name();
}
inline const std::string& DeleteRequest::_internal_partition_name() const {
  return partition_name_.Get();
}
inline void DeleteRequest::_internal_set_partition_name(const std::string& value) {
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRequest::set_partition_name(std::string&& value) {
  
  partition_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.DeleteRequest.partition_name)
}
inline void DeleteRequest::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.DeleteRequest.partition_name)
}
inline void DeleteRequest::set_partition_name(const char* value,
    size_t size) {
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.DeleteRequest.partition_name)
}
inline std::string* DeleteRequest::_internal_mutable_partition_name() {
  
  return partition_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.partition_name)
  return partition_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.partition_name)
}
inline std::string* DeleteRequest::unsafe_arena_release_partition_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.DeleteRequest.partition_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return partition_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteRequest::unsafe_arena_set_allocated_partition_name(
    std::string* partition_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      partition_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DeleteRequest.partition_name)
}

// int64 dbID = 6;
inline void DeleteRequest::clear_dbid() {
  dbid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::_internal_dbid() const {
  return dbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.dbID)
  return _internal_dbid();
}
inline void DeleteRequest::_internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dbid_ = value;
}
inline void DeleteRequest::set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.dbID)
}

// int64 collectionID = 7;
inline void DeleteRequest::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::_internal_collectionid() const {
  return collectionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.collectionID)
  return _internal_collectionid();
}
inline void DeleteRequest::_internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
}
inline void DeleteRequest::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.collectionID)
}

// int64 partitionID = 8;
inline void DeleteRequest::clear_partitionid() {
  partitionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::_internal_partitionid() const {
  return partitionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.partitionID)
  return _internal_partitionid();
}
inline void DeleteRequest::_internal_set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  partitionid_ = value;
}
inline void DeleteRequest::set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.partitionID)
}

// repeated int64 int64_primary_keys = 9;
inline int DeleteRequest::_internal_int64_primary_keys_size() const {
  return int64_primary_keys_.size();
}
inline int DeleteRequest::int64_primary_keys_size() const {
  return _internal_int64_primary_keys_size();
}
inline void DeleteRequest::clear_int64_primary_keys() {
  int64_primary_keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::_internal_int64_primary_keys(int index) const {
  return int64_primary_keys_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::int64_primary_keys(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.int64_primary_keys)
  return _internal_int64_primary_keys(index);
}
inline void DeleteRequest::set_int64_primary_keys(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_primary_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.int64_primary_keys)
}
inline void DeleteRequest::_internal_add_int64_primary_keys(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_primary_keys_.Add(value);
}
inline void DeleteRequest::add_int64_primary_keys(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_int64_primary_keys(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.DeleteRequest.int64_primary_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DeleteRequest::_internal_int64_primary_keys() const {
  return int64_primary_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DeleteRequest::int64_primary_keys() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.DeleteRequest.int64_primary_keys)
  return _internal_int64_primary_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DeleteRequest::_internal_mutable_int64_primary_keys() {
  return &int64_primary_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DeleteRequest::mutable_int64_primary_keys() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.DeleteRequest.int64_primary_keys)
  return _internal_mutable_int64_primary_keys();
}

// repeated uint64 timestamps = 10;
inline int DeleteRequest::_internal_timestamps_size() const {
  return timestamps_.size();
}
inline int DeleteRequest::timestamps_size() const {
  return _internal_timestamps_size();
}
inline void DeleteRequest::clear_timestamps() {
  timestamps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteRequest::_internal_timestamps(int index) const {
  return timestamps_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteRequest::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.timestamps)
  return _internal_timestamps(index);
}
inline void DeleteRequest::set_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.timestamps)
}
inline void DeleteRequest::_internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  timestamps_.Add(value);
}
inline void DeleteRequest::add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_timestamps(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.DeleteRequest.timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
DeleteRequest::_internal_timestamps() const {
  return timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
DeleteRequest::timestamps() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.DeleteRequest.timestamps)
  return _internal_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
DeleteRequest::_internal_mutable_timestamps() {
  return &timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
DeleteRequest::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.DeleteRequest.timestamps)
  return _internal_mutable_timestamps();
}

// int64 num_rows = 11;
inline void DeleteRequest::clear_num_rows() {
  num_rows_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::_internal_num_rows() const {
  return num_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRequest::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.num_rows)
  return _internal_num_rows();
}
inline void DeleteRequest::_internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_rows_ = value;
}
inline void DeleteRequest::set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DeleteRequest.num_rows)
}

// .milvus.proto.schema.IDs primary_keys = 12;
inline bool DeleteRequest::_internal_has_primary_keys() const {
  return this != internal_default_instance() && primary_keys_ != nullptr;
}
inline bool DeleteRequest::has_primary_keys() const {
  return _internal_has_primary_keys();
}
inline const ::milvus::proto::schema::IDs& DeleteRequest::_internal_primary_keys() const {
  const ::milvus::proto::schema::IDs* p = primary_keys_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::schema::IDs*>(
      &::milvus::proto::schema::_IDs_default_instance_);
}
inline const ::milvus::proto::schema::IDs& DeleteRequest::primary_keys() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DeleteRequest.primary_keys)
  return _internal_primary_keys();
}
inline void DeleteRequest::unsafe_arena_set_allocated_primary_keys(
    ::milvus::proto::schema::IDs* primary_keys) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_keys_);
  }
  primary_keys_ = primary_keys;
  if (primary_keys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DeleteRequest.primary_keys)
}
inline ::milvus::proto::schema::IDs* DeleteRequest::release_primary_keys() {
  auto temp = unsafe_arena_release_primary_keys();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::schema::IDs* DeleteRequest::unsafe_arena_release_primary_keys() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DeleteRequest.primary_keys)
  
  ::milvus::proto::schema::IDs* temp = primary_keys_;
  primary_keys_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::IDs* DeleteRequest::_internal_mutable_primary_keys() {
  
  if (primary_keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::IDs>(GetArena());
    primary_keys_ = p;
  }
  return primary_keys_;
}
inline ::milvus::proto::schema::IDs* DeleteRequest::mutable_primary_keys() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DeleteRequest.primary_keys)
  return _internal_mutable_primary_keys();
}
inline void DeleteRequest::set_allocated_primary_keys(::milvus::proto::schema::IDs* primary_keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_keys_);
  }
  if (primary_keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_keys)->GetArena();
    if (message_arena != submessage_arena) {
      primary_keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary_keys, submessage_arena);
    }
    
  } else {
    
  }
  primary_keys_ = primary_keys;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DeleteRequest.primary_keys)
}

// -------------------------------------------------------------------

// MsgPosition

// string channel_name = 1;
inline void MsgPosition::clear_channel_name() {
  channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MsgPosition::channel_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.MsgPosition.channel_name)
  return _internal_channel_name();
}
inline void MsgPosition::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.MsgPosition.channel_name)
}
inline std::string* MsgPosition::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.MsgPosition.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& MsgPosition::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void MsgPosition::_internal_set_channel_name(const std::string& value) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MsgPosition::set_channel_name(std::string&& value) {
  
  channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.MsgPosition.channel_name)
}
inline void MsgPosition::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.MsgPosition.channel_name)
}
inline void MsgPosition::set_channel_name(const char* value,
    size_t size) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.MsgPosition.channel_name)
}
inline std::string* MsgPosition::_internal_mutable_channel_name() {
  
  return channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MsgPosition::release_channel_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.MsgPosition.channel_name)
  return channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPosition::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.MsgPosition.channel_name)
}
inline std::string* MsgPosition::unsafe_arena_release_channel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.MsgPosition.channel_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MsgPosition::unsafe_arena_set_allocated_channel_name(
    std::string* channel_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.MsgPosition.channel_name)
}

// bytes msgID = 2;
inline void MsgPosition::clear_msgid() {
  msgid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MsgPosition::msgid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.MsgPosition.msgID)
  return _internal_msgid();
}
inline void MsgPosition::set_msgid(const std::string& value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.MsgPosition.msgID)
}
inline std::string* MsgPosition::mutable_msgid() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.MsgPosition.msgID)
  return _internal_mutable_msgid();
}
inline const std::string& MsgPosition::_internal_msgid() const {
  return msgid_.Get();
}
inline void MsgPosition::_internal_set_msgid(const std::string& value) {
  
  msgid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MsgPosition::set_msgid(std::string&& value) {
  
  msgid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.MsgPosition.msgID)
}
inline void MsgPosition::set_msgid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msgid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.MsgPosition.msgID)
}
inline void MsgPosition::set_msgid(const void* value,
    size_t size) {
  
  msgid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.MsgPosition.msgID)
}
inline std::string* MsgPosition::_internal_mutable_msgid() {
  
  return msgid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MsgPosition::release_msgid() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.MsgPosition.msgID)
  return msgid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPosition::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  msgid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.MsgPosition.msgID)
}
inline std::string* MsgPosition::unsafe_arena_release_msgid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.MsgPosition.msgID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msgid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MsgPosition::unsafe_arena_set_allocated_msgid(
    std::string* msgid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msgid != nullptr) {
    
  } else {
    
  }
  msgid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msgid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.MsgPosition.msgID)
}

// string msgGroup = 3;
inline void MsgPosition::clear_msggroup() {
  msggroup_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MsgPosition::msggroup() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.MsgPosition.msgGroup)
  return _internal_msggroup();
}
inline void MsgPosition::set_msggroup(const std::string& value) {
  _internal_set_msggroup(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.MsgPosition.msgGroup)
}
inline std::string* MsgPosition::mutable_msggroup() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.MsgPosition.msgGroup)
  return _internal_mutable_msggroup();
}
inline const std::string& MsgPosition::_internal_msggroup() const {
  return msggroup_.Get();
}
inline void MsgPosition::_internal_set_msggroup(const std::string& value) {
  
  msggroup_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MsgPosition::set_msggroup(std::string&& value) {
  
  msggroup_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.MsgPosition.msgGroup)
}
inline void MsgPosition::set_msggroup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msggroup_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.MsgPosition.msgGroup)
}
inline void MsgPosition::set_msggroup(const char* value,
    size_t size) {
  
  msggroup_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.MsgPosition.msgGroup)
}
inline std::string* MsgPosition::_internal_mutable_msggroup() {
  
  return msggroup_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MsgPosition::release_msggroup() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.MsgPosition.msgGroup)
  return msggroup_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPosition::set_allocated_msggroup(std::string* msggroup) {
  if (msggroup != nullptr) {
    
  } else {
    
  }
  msggroup_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msggroup,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.MsgPosition.msgGroup)
}
inline std::string* MsgPosition::unsafe_arena_release_msggroup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.MsgPosition.msgGroup)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msggroup_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MsgPosition::unsafe_arena_set_allocated_msggroup(
    std::string* msggroup) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msggroup != nullptr) {
    
  } else {
    
  }
  msggroup_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msggroup, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.MsgPosition.msgGroup)
}

// uint64 timestamp = 4;
inline void MsgPosition::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgPosition::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgPosition::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.MsgPosition.timestamp)
  return _internal_timestamp();
}
inline void MsgPosition::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void MsgPosition::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.MsgPosition.timestamp)
}

// -------------------------------------------------------------------

// CreateCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreateCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool CreateCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreateCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreateCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.base)
  return _internal_base();
}
inline void CreateCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.CreateCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreateCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* CreateCollectionRequest::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.base)
  return _internal_mutable_base();
}
inline void CreateCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base)->GetArena();
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreateCollectionRequest.base)
}

// string db_name = 2;
inline void CreateCollectionRequest::clear_db_name() {
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.db_name)
  return _internal_db_name();
}
inline void CreateCollectionRequest::set_db_name(const std::string& value) {
  _internal_set_db_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.db_name)
}
inline std::string* CreateCollectionRequest::mutable_db_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.db_name)
  return _internal_mutable_db_name();
}
inline const std::string& CreateCollectionRequest::_internal_db_name() const {
  return db_name_.Get();
}
inline void CreateCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateCollectionRequest::set_db_name(std::string&& value) {
  
  db_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.CreateCollectionRequest.db_name)
}
inline void CreateCollectionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.CreateCollectionRequest.db_name)
}
inline void CreateCollectionRequest::set_db_name(const char* value,
    size_t size) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.CreateCollectionRequest.db_name)
}
inline std::string* CreateCollectionRequest::_internal_mutable_db_name() {
  
  return db_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreateCollectionRequest.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreateCollectionRequest.db_name)
}
inline std::string* CreateCollectionRequest::unsafe_arena_release_db_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.CreateCollectionRequest.db_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return db_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateCollectionRequest::unsafe_arena_set_allocated_db_name(
    std::string* db_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      db_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.CreateCollectionRequest.db_name)
}

// string collectionName = 3;
inline void CreateCollectionRequest::clear_collectionname() {
  collectionname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateCollectionRequest::collectionname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.collectionName)
  return _internal_collectionname();
}
inline void CreateCollectionRequest::set_collectionname(const std::string& value) {
  _internal_set_collectionname(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.collectionName)
}
inline std::string* CreateCollectionRequest::mutable_collectionname() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.collectionName)
  return _internal_mutable_collectionname();
}
inline const std::string& CreateCollectionRequest::_internal_collectionname() const {
  return collectionname_.Get();
}
inline void CreateCollectionRequest::_internal_set_collectionname(const std::string& value) {
  
  collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateCollectionRequest::set_collectionname(std::string&& value) {
  
  collectionname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.CreateCollectionRequest.collectionName)
}
inline void CreateCollectionRequest::set_collectionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.CreateCollectionRequest.collectionName)
}
inline void CreateCollectionRequest::set_collectionname(const char* value,
    size_t size) {
  
  collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.CreateCollectionRequest.collectionName)
}
inline std::string* CreateCollectionRequest::_internal_mutable_collectionname() {
  
  return collectionname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateCollectionRequest::release_collectionname() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreateCollectionRequest.collectionName)
  return collectionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateCollectionRequest::set_allocated_collectionname(std::string* collectionname) {
  if (collectionname != nullptr) {
    
  } else {
    
  }
  collectionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collectionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreateCollectionRequest.collectionName)
}
inline std::string* CreateCollectionRequest::unsafe_arena_release_collectionname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.CreateCollectionRequest.collectionName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return collectionname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateCollectionRequest::unsafe_arena_set_allocated_collectionname(
    std::string* collectionname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (collectionname != nullptr) {
    
  } else {
    
  }
  collectionname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      collectionname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.CreateCollectionRequest.collectionName)
}

// string partitionName = 4;
inline void CreateCollectionRequest::clear_partitionname() {
  partitionname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateCollectionRequest::partitionname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.partitionName)
  return _internal_partitionname();
}
inline void CreateCollectionRequest::set_partitionname(const std::string& value) {
  _internal_set_partitionname(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.partitionName)
}
inline std::string* CreateCollectionRequest::mutable_partitionname() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.partitionName)
  return _internal_mutable_partitionname();
}
inline const std::string& CreateCollectionRequest::_internal_partitionname() const {
  return partitionname_.Get();
}
inline void CreateCollectionRequest::_internal_set_partitionname(const std::string& value) {
  
  partitionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateCollectionRequest::set_partitionname(std::string&& value) {
  
  partitionname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.CreateCollectionRequest.partitionName)
}
inline void CreateCollectionRequest::set_partitionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partitionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.CreateCollectionRequest.partitionName)
}
inline void CreateCollectionRequest::set_partitionname(const char* value,
    size_t size) {
  
  partitionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.CreateCollectionRequest.partitionName)
}
inline std::string* CreateCollectionRequest::_internal_mutable_partitionname() {
  
  return partitionname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateCollectionRequest::release_partitionname() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreateCollectionRequest.partitionName)
  return partitionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateCollectionRequest::set_allocated_partitionname(std::string* partitionname) {
  if (partitionname != nullptr) {
    
  } else {
    
  }
  partitionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partitionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreateCollectionRequest.partitionName)
}
inline std::string* CreateCollectionRequest::unsafe_arena_release_partitionname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.CreateCollectionRequest.partitionName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return partitionname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateCollectionRequest::unsafe_arena_set_allocated_partitionname(
    std::string* partitionname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (partitionname != nullptr) {
    
  } else {
    
  }
  partitionname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      partitionname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.CreateCollectionRequest.partitionName)
}

// int64 dbID = 5;
inline void CreateCollectionRequest::clear_dbid() {
  dbid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateCollectionRequest::_internal_dbid() const {
  return dbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateCollectionRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.dbID)
  return _internal_dbid();
}
inline void CreateCollectionRequest::_internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dbid_ = value;
}
inline void CreateCollectionRequest::set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.dbID)
}

// int64 collectionID = 6;
inline void CreateCollectionRequest::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateCollectionRequest::_internal_collectionid() const {
  return collectionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateCollectionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.collectionID)
  return _internal_collectionid();
}
inline void CreateCollectionRequest::_internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
}
inline void CreateCollectionRequest::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.collectionID)
}

// int64 partitionID = 7;
inline void CreateCollectionRequest::clear_partitionid() {
  partitionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateCollectionRequest::_internal_partitionid() const {
  return partitionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateCollectionRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.partitionID)
  return _internal_partitionid();
}
inline void CreateCollectionRequest::_internal_set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  partitionid_ = value;
}
inline void CreateCollectionRequest::set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.partitionID)
}

// bytes schema = 8;
inline void CreateCollectionRequest::clear_schema() {
  schema_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateCollectionRequest::schema() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.schema)
  return _internal_schema();
}
inline void CreateCollectionRequest::set_schema(const std::string& value) {
  _internal_set_schema(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.schema)
}
inline std::string* CreateCollectionRequest::mutable_schema() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.schema)
  return _internal_mutable_schema();
}
inline const std::string& CreateCollectionRequest::_internal_schema() const {
  return schema_.Get();
}
inline void CreateCollectionRequest::_internal_set_schema(const std::string& value) {
  
  schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateCollectionRequest::set_schema(std::string&& value) {
  
  schema_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.CreateCollectionRequest.schema)
}
inline void CreateCollectionRequest::set_schema(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.CreateCollectionRequest.schema)
}
inline void CreateCollectionRequest::set_schema(const void* value,
    size_t size) {
  
  schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.CreateCollectionRequest.schema)
}
inline std::string* CreateCollectionRequest::_internal_mutable_schema() {
  
  return schema_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateCollectionRequest::release_schema() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreateCollectionRequest.schema)
  return schema_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateCollectionRequest::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  schema_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreateCollectionRequest.schema)
}
inline std::string* CreateCollectionRequest::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.CreateCollectionRequest.schema)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return schema_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateCollectionRequest::unsafe_arena_set_allocated_schema(
    std::string* schema) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (schema != nullptr) {
    
  } else {
    
  }
  schema_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      schema, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.CreateCollectionRequest.schema)
}

// repeated string virtualChannelNames = 9;
inline int CreateCollectionRequest::_internal_virtualchannelnames_size() const {
  return virtualchannelnames_.size();
}
inline int CreateCollectionRequest::virtualchannelnames_size() const {
  return _internal_virtualchannelnames_size();
}
inline void CreateCollectionRequest::clear_virtualchannelnames() {
  virtualchannelnames_.Clear();
}
inline std::string* CreateCollectionRequest::add_virtualchannelnames() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  return _internal_add_virtualchannelnames();
}
inline const std::string& CreateCollectionRequest::_internal_virtualchannelnames(int index) const {
  return virtualchannelnames_.Get(index);
}
inline const std::string& CreateCollectionRequest::virtualchannelnames(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  return _internal_virtualchannelnames(index);
}
inline std::string* CreateCollectionRequest::mutable_virtualchannelnames(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  return virtualchannelnames_.Mutable(index);
}
inline void CreateCollectionRequest::set_virtualchannelnames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  virtualchannelnames_.Mutable(index)->assign(value);
}
inline void CreateCollectionRequest::set_virtualchannelnames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  virtualchannelnames_.Mutable(index)->assign(std::move(value));
}
inline void CreateCollectionRequest::set_virtualchannelnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  virtualchannelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline void CreateCollectionRequest::set_virtualchannelnames(int index, const char* value, size_t size) {
  virtualchannelnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline std::string* CreateCollectionRequest::_internal_add_virtualchannelnames() {
  return virtualchannelnames_.Add();
}
inline void CreateCollectionRequest::add_virtualchannelnames(const std::string& value) {
  virtualchannelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline void CreateCollectionRequest::add_virtualchannelnames(std::string&& value) {
  virtualchannelnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline void CreateCollectionRequest::add_virtualchannelnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  virtualchannelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline void CreateCollectionRequest::add_virtualchannelnames(const char* value, size_t size) {
  virtualchannelnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateCollectionRequest::virtualchannelnames() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  return virtualchannelnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateCollectionRequest::mutable_virtualchannelnames() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.CreateCollectionRequest.virtualChannelNames)
  return &virtualchannelnames_;
}

// repeated string physicalChannelNames = 10;
inline int CreateCollectionRequest::_internal_physicalchannelnames_size() const {
  return physicalchannelnames_.size();
}
inline int CreateCollectionRequest::physicalchannelnames_size() const {
  return _internal_physicalchannelnames_size();
}
inline void CreateCollectionRequest::clear_physicalchannelnames() {
  physicalchannelnames_.Clear();
}
inline std::string* CreateCollectionRequest::add_physicalchannelnames() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  return _internal_add_physicalchannelnames();
}
inline const std::string& CreateCollectionRequest::_internal_physicalchannelnames(int index) const {
  return physicalchannelnames_.Get(index);
}
inline const std::string& CreateCollectionRequest::physicalchannelnames(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  return _internal_physicalchannelnames(index);
}
inline std::string* CreateCollectionRequest::mutable_physicalchannelnames(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  return physicalchannelnames_.Mutable(index);
}
inline void CreateCollectionRequest::set_physicalchannelnames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  physicalchannelnames_.Mutable(index)->assign(value);
}
inline void CreateCollectionRequest::set_physicalchannelnames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  physicalchannelnames_.Mutable(index)->assign(std::move(value));
}
inline void CreateCollectionRequest::set_physicalchannelnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  physicalchannelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline void CreateCollectionRequest::set_physicalchannelnames(int index, const char* value, size_t size) {
  physicalchannelnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline std::string* CreateCollectionRequest::_internal_add_physicalchannelnames() {
  return physicalchannelnames_.Add();
}
inline void CreateCollectionRequest::add_physicalchannelnames(const std::string& value) {
  physicalchannelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline void CreateCollectionRequest::add_physicalchannelnames(std::string&& value) {
  physicalchannelnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline void CreateCollectionRequest::add_physicalchannelnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  physicalchannelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline void CreateCollectionRequest::add_physicalchannelnames(const char* value, size_t size) {
  physicalchannelnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateCollectionRequest::physicalchannelnames() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  return physicalchannelnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateCollectionRequest::mutable_physicalchannelnames() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.CreateCollectionRequest.physicalChannelNames)
  return &physicalchannelnames_;
}

// repeated int64 partitionIDs = 11;
inline int CreateCollectionRequest::_internal_partitionids_size() const {
  return partitionids_.size();
}
inline int CreateCollectionRequest::partitionids_size() const {
  return _internal_partitionids_size();
}
inline void CreateCollectionRequest::clear_partitionids() {
  partitionids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateCollectionRequest::_internal_partitionids(int index) const {
  return partitionids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateCollectionRequest::partitionids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreateCollectionRequest.partitionIDs)
  return _internal_partitionids(index);
}
inline void CreateCollectionRequest::set_partitionids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  partitionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreateCollectionRequest.partitionIDs)
}
inline void CreateCollectionRequest::_internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  partitionids_.Add(value);
}
inline void CreateCollectionRequest::add_partitionids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_partitionids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.msg.CreateCollectionRequest.partitionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CreateCollectionRequest::_internal_partitionids() const {
  return partitionids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CreateCollectionRequest::partitionids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.CreateCollectionRequest.partitionIDs)
  return _internal_partitionids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CreateCollectionRequest::_internal_mutable_partitionids() {
  return &partitionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CreateCollectionRequest::mutable_partitionids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.CreateCollectionRequest.partitionIDs)
  return _internal_mutable_partitionids();
}

// -------------------------------------------------------------------

// DropCollectionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropCollectionRequest::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool DropCollectionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropCollectionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropCollectionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropCollectionRequest.base)
  return _internal_base();
}
inline void DropCollectionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DropCollectionRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropCollectionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* DropCollectionRequest::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropCollectionRequest.base)
  return _internal_mutable_base();
}
inline void DropCollectionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base)->GetArena();
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropCollectionRequest.base)
}

// string db_name = 2;
inline void DropCollectionRequest::clear_db_name() {
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DropCollectionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropCollectionRequest.db_name)
  return _internal_db_name();
}
inline void DropCollectionRequest::set_db_name(const std::string& value) {
  _internal_set_db_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropCollectionRequest.db_name)
}
inline std::string* DropCollectionRequest::mutable_db_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropCollectionRequest.db_name)
  return _internal_mutable_db_name();
}
inline const std::string& DropCollectionRequest::_internal_db_name() const {
  return db_name_.Get();
}
inline void DropCollectionRequest::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DropCollectionRequest::set_db_name(std::string&& value) {
  
  db_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.DropCollectionRequest.db_name)
}
inline void DropCollectionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.DropCollectionRequest.db_name)
}
inline void DropCollectionRequest::set_db_name(const char* value,
    size_t size) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.DropCollectionRequest.db_name)
}
inline std::string* DropCollectionRequest::_internal_mutable_db_name() {
  
  return db_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DropCollectionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropCollectionRequest.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DropCollectionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropCollectionRequest.db_name)
}
inline std::string* DropCollectionRequest::unsafe_arena_release_db_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.DropCollectionRequest.db_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return db_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DropCollectionRequest::unsafe_arena_set_allocated_db_name(
    std::string* db_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      db_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DropCollectionRequest.db_name)
}

// string collectionName = 3;
inline void DropCollectionRequest::clear_collectionname() {
  collectionname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DropCollectionRequest::collectionname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropCollectionRequest.collectionName)
  return _internal_collectionname();
}
inline void DropCollectionRequest::set_collectionname(const std::string& value) {
  _internal_set_collectionname(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropCollectionRequest.collectionName)
}
inline std::string* DropCollectionRequest::mutable_collectionname() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropCollectionRequest.collectionName)
  return _internal_mutable_collectionname();
}
inline const std::string& DropCollectionRequest::_internal_collectionname() const {
  return collectionname_.Get();
}
inline void DropCollectionRequest::_internal_set_collectionname(const std::string& value) {
  
  collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DropCollectionRequest::set_collectionname(std::string&& value) {
  
  collectionname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.DropCollectionRequest.collectionName)
}
inline void DropCollectionRequest::set_collectionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.DropCollectionRequest.collectionName)
}
inline void DropCollectionRequest::set_collectionname(const char* value,
    size_t size) {
  
  collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.DropCollectionRequest.collectionName)
}
inline std::string* DropCollectionRequest::_internal_mutable_collectionname() {
  
  return collectionname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DropCollectionRequest::release_collectionname() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropCollectionRequest.collectionName)
  return collectionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DropCollectionRequest::set_allocated_collectionname(std::string* collectionname) {
  if (collectionname != nullptr) {
    
  } else {
    
  }
  collectionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collectionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropCollectionRequest.collectionName)
}
inline std::string* DropCollectionRequest::unsafe_arena_release_collectionname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.DropCollectionRequest.collectionName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return collectionname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DropCollectionRequest::unsafe_arena_set_allocated_collectionname(
    std::string* collectionname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (collectionname != nullptr) {
    
  } else {
    
  }
  collectionname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      collectionname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DropCollectionRequest.collectionName)
}

// int64 dbID = 4;
inline void DropCollectionRequest::clear_dbid() {
  dbid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropCollectionRequest::_internal_dbid() const {
  return dbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropCollectionRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropCollectionRequest.dbID)
  return _internal_dbid();
}
inline void DropCollectionRequest::_internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dbid_ = value;
}
inline void DropCollectionRequest::set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropCollectionRequest.dbID)
}

// int64 collectionID = 5;
inline void DropCollectionRequest::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropCollectionRequest::_internal_collectionid() const {
  return collectionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropCollectionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropCollectionRequest.collectionID)
  return _internal_collectionid();
}
inline void DropCollectionRequest::_internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
}
inline void DropCollectionRequest::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropCollectionRequest.collectionID)
}

// -------------------------------------------------------------------

// CreatePartitionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool CreatePartitionRequest::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool CreatePartitionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& CreatePartitionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& CreatePartitionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.base)
  return _internal_base();
}
inline void CreatePartitionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.CreatePartitionRequest.base)
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreatePartitionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* CreatePartitionRequest::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreatePartitionRequest.base)
  return _internal_mutable_base();
}
inline void CreatePartitionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base)->GetArena();
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreatePartitionRequest.base)
}

// string db_name = 2;
inline void CreatePartitionRequest::clear_db_name() {
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreatePartitionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.db_name)
  return _internal_db_name();
}
inline void CreatePartitionRequest::set_db_name(const std::string& value) {
  _internal_set_db_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.db_name)
}
inline std::string* CreatePartitionRequest::mutable_db_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreatePartitionRequest.db_name)
  return _internal_mutable_db_name();
}
inline const std::string& CreatePartitionRequest::_internal_db_name() const {
  return db_name_.Get();
}
inline void CreatePartitionRequest::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreatePartitionRequest::set_db_name(std::string&& value) {
  
  db_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.CreatePartitionRequest.db_name)
}
inline void CreatePartitionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.CreatePartitionRequest.db_name)
}
inline void CreatePartitionRequest::set_db_name(const char* value,
    size_t size) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.CreatePartitionRequest.db_name)
}
inline std::string* CreatePartitionRequest::_internal_mutable_db_name() {
  
  return db_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreatePartitionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreatePartitionRequest.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePartitionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreatePartitionRequest.db_name)
}
inline std::string* CreatePartitionRequest::unsafe_arena_release_db_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.CreatePartitionRequest.db_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return db_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreatePartitionRequest::unsafe_arena_set_allocated_db_name(
    std::string* db_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      db_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.CreatePartitionRequest.db_name)
}

// string collection_name = 3;
inline void CreatePartitionRequest::clear_collection_name() {
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreatePartitionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.collection_name)
  return _internal_collection_name();
}
inline void CreatePartitionRequest::set_collection_name(const std::string& value) {
  _internal_set_collection_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.collection_name)
}
inline std::string* CreatePartitionRequest::mutable_collection_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreatePartitionRequest.collection_name)
  return _internal_mutable_collection_name();
}
inline const std::string& CreatePartitionRequest::_internal_collection_name() const {
  return collection_name_.Get();
}
inline void CreatePartitionRequest::_internal_set_collection_name(const std::string& value) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreatePartitionRequest::set_collection_name(std::string&& value) {
  
  collection_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.CreatePartitionRequest.collection_name)
}
inline void CreatePartitionRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.CreatePartitionRequest.collection_name)
}
inline void CreatePartitionRequest::set_collection_name(const char* value,
    size_t size) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.CreatePartitionRequest.collection_name)
}
inline std::string* CreatePartitionRequest::_internal_mutable_collection_name() {
  
  return collection_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreatePartitionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreatePartitionRequest.collection_name)
  return collection_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePartitionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreatePartitionRequest.collection_name)
}
inline std::string* CreatePartitionRequest::unsafe_arena_release_collection_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.CreatePartitionRequest.collection_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return collection_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreatePartitionRequest::unsafe_arena_set_allocated_collection_name(
    std::string* collection_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      collection_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.CreatePartitionRequest.collection_name)
}

// string partition_name = 4;
inline void CreatePartitionRequest::clear_partition_name() {
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreatePartitionRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.partition_name)
  return _internal_partition_name();
}
inline void CreatePartitionRequest::set_partition_name(const std::string& value) {
  _internal_set_partition_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.partition_name)
}
inline std::string* CreatePartitionRequest::mutable_partition_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.CreatePartitionRequest.partition_name)
  return _internal_mutable_partition_name();
}
inline const std::string& CreatePartitionRequest::_internal_partition_name() const {
  return partition_name_.Get();
}
inline void CreatePartitionRequest::_internal_set_partition_name(const std::string& value) {
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreatePartitionRequest::set_partition_name(std::string&& value) {
  
  partition_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.CreatePartitionRequest.partition_name)
}
inline void CreatePartitionRequest::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.CreatePartitionRequest.partition_name)
}
inline void CreatePartitionRequest::set_partition_name(const char* value,
    size_t size) {
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.CreatePartitionRequest.partition_name)
}
inline std::string* CreatePartitionRequest::_internal_mutable_partition_name() {
  
  return partition_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreatePartitionRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.CreatePartitionRequest.partition_name)
  return partition_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePartitionRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.CreatePartitionRequest.partition_name)
}
inline std::string* CreatePartitionRequest::unsafe_arena_release_partition_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.CreatePartitionRequest.partition_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return partition_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreatePartitionRequest::unsafe_arena_set_allocated_partition_name(
    std::string* partition_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      partition_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.CreatePartitionRequest.partition_name)
}

// int64 dbID = 5;
inline void CreatePartitionRequest::clear_dbid() {
  dbid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreatePartitionRequest::_internal_dbid() const {
  return dbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreatePartitionRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.dbID)
  return _internal_dbid();
}
inline void CreatePartitionRequest::_internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dbid_ = value;
}
inline void CreatePartitionRequest::set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.dbID)
}

// int64 collectionID = 6;
inline void CreatePartitionRequest::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreatePartitionRequest::_internal_collectionid() const {
  return collectionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreatePartitionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.collectionID)
  return _internal_collectionid();
}
inline void CreatePartitionRequest::_internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
}
inline void CreatePartitionRequest::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.collectionID)
}

// int64 partitionID = 7;
inline void CreatePartitionRequest::clear_partitionid() {
  partitionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreatePartitionRequest::_internal_partitionid() const {
  return partitionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreatePartitionRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.CreatePartitionRequest.partitionID)
  return _internal_partitionid();
}
inline void CreatePartitionRequest::_internal_set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  partitionid_ = value;
}
inline void CreatePartitionRequest::set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.CreatePartitionRequest.partitionID)
}

// -------------------------------------------------------------------

// DropPartitionRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DropPartitionRequest::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool DropPartitionRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DropPartitionRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DropPartitionRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.base)
  return _internal_base();
}
inline void DropPartitionRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DropPartitionRequest.base)
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropPartitionRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* DropPartitionRequest::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropPartitionRequest.base)
  return _internal_mutable_base();
}
inline void DropPartitionRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base)->GetArena();
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropPartitionRequest.base)
}

// string db_name = 2;
inline void DropPartitionRequest::clear_db_name() {
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DropPartitionRequest::db_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.db_name)
  return _internal_db_name();
}
inline void DropPartitionRequest::set_db_name(const std::string& value) {
  _internal_set_db_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.db_name)
}
inline std::string* DropPartitionRequest::mutable_db_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropPartitionRequest.db_name)
  return _internal_mutable_db_name();
}
inline const std::string& DropPartitionRequest::_internal_db_name() const {
  return db_name_.Get();
}
inline void DropPartitionRequest::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DropPartitionRequest::set_db_name(std::string&& value) {
  
  db_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.DropPartitionRequest.db_name)
}
inline void DropPartitionRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.DropPartitionRequest.db_name)
}
inline void DropPartitionRequest::set_db_name(const char* value,
    size_t size) {
  
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.DropPartitionRequest.db_name)
}
inline std::string* DropPartitionRequest::_internal_mutable_db_name() {
  
  return db_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DropPartitionRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropPartitionRequest.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DropPartitionRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropPartitionRequest.db_name)
}
inline std::string* DropPartitionRequest::unsafe_arena_release_db_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.DropPartitionRequest.db_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return db_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DropPartitionRequest::unsafe_arena_set_allocated_db_name(
    std::string* db_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      db_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DropPartitionRequest.db_name)
}

// string collection_name = 3;
inline void DropPartitionRequest::clear_collection_name() {
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DropPartitionRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.collection_name)
  return _internal_collection_name();
}
inline void DropPartitionRequest::set_collection_name(const std::string& value) {
  _internal_set_collection_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.collection_name)
}
inline std::string* DropPartitionRequest::mutable_collection_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropPartitionRequest.collection_name)
  return _internal_mutable_collection_name();
}
inline const std::string& DropPartitionRequest::_internal_collection_name() const {
  return collection_name_.Get();
}
inline void DropPartitionRequest::_internal_set_collection_name(const std::string& value) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DropPartitionRequest::set_collection_name(std::string&& value) {
  
  collection_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.DropPartitionRequest.collection_name)
}
inline void DropPartitionRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.DropPartitionRequest.collection_name)
}
inline void DropPartitionRequest::set_collection_name(const char* value,
    size_t size) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.DropPartitionRequest.collection_name)
}
inline std::string* DropPartitionRequest::_internal_mutable_collection_name() {
  
  return collection_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DropPartitionRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropPartitionRequest.collection_name)
  return collection_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DropPartitionRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropPartitionRequest.collection_name)
}
inline std::string* DropPartitionRequest::unsafe_arena_release_collection_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.DropPartitionRequest.collection_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return collection_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DropPartitionRequest::unsafe_arena_set_allocated_collection_name(
    std::string* collection_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      collection_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DropPartitionRequest.collection_name)
}

// string partition_name = 4;
inline void DropPartitionRequest::clear_partition_name() {
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DropPartitionRequest::partition_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.partition_name)
  return _internal_partition_name();
}
inline void DropPartitionRequest::set_partition_name(const std::string& value) {
  _internal_set_partition_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.partition_name)
}
inline std::string* DropPartitionRequest::mutable_partition_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DropPartitionRequest.partition_name)
  return _internal_mutable_partition_name();
}
inline const std::string& DropPartitionRequest::_internal_partition_name() const {
  return partition_name_.Get();
}
inline void DropPartitionRequest::_internal_set_partition_name(const std::string& value) {
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DropPartitionRequest::set_partition_name(std::string&& value) {
  
  partition_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.DropPartitionRequest.partition_name)
}
inline void DropPartitionRequest::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.DropPartitionRequest.partition_name)
}
inline void DropPartitionRequest::set_partition_name(const char* value,
    size_t size) {
  
  partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.DropPartitionRequest.partition_name)
}
inline std::string* DropPartitionRequest::_internal_mutable_partition_name() {
  
  return partition_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DropPartitionRequest::release_partition_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DropPartitionRequest.partition_name)
  return partition_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DropPartitionRequest::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DropPartitionRequest.partition_name)
}
inline std::string* DropPartitionRequest::unsafe_arena_release_partition_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.DropPartitionRequest.partition_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return partition_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DropPartitionRequest::unsafe_arena_set_allocated_partition_name(
    std::string* partition_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      partition_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DropPartitionRequest.partition_name)
}

// int64 dbID = 5;
inline void DropPartitionRequest::clear_dbid() {
  dbid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropPartitionRequest::_internal_dbid() const {
  return dbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropPartitionRequest::dbid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.dbID)
  return _internal_dbid();
}
inline void DropPartitionRequest::_internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dbid_ = value;
}
inline void DropPartitionRequest::set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.dbID)
}

// int64 collectionID = 6;
inline void DropPartitionRequest::clear_collectionid() {
  collectionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropPartitionRequest::_internal_collectionid() const {
  return collectionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropPartitionRequest::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.collectionID)
  return _internal_collectionid();
}
inline void DropPartitionRequest::_internal_set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collectionid_ = value;
}
inline void DropPartitionRequest::set_collectionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.collectionID)
}

// int64 partitionID = 7;
inline void DropPartitionRequest::clear_partitionid() {
  partitionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropPartitionRequest::_internal_partitionid() const {
  return partitionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropPartitionRequest::partitionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DropPartitionRequest.partitionID)
  return _internal_partitionid();
}
inline void DropPartitionRequest::_internal_set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  partitionid_ = value;
}
inline void DropPartitionRequest::set_partitionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DropPartitionRequest.partitionID)
}

// -------------------------------------------------------------------

// TimeTickMsg

// .milvus.proto.common.MsgBase base = 1;
inline bool TimeTickMsg::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool TimeTickMsg::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& TimeTickMsg::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& TimeTickMsg::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.TimeTickMsg.base)
  return _internal_base();
}
inline void TimeTickMsg::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.TimeTickMsg.base)
}
inline ::milvus::proto::common::MsgBase* TimeTickMsg::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* TimeTickMsg::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.TimeTickMsg.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* TimeTickMsg::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* TimeTickMsg::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.TimeTickMsg.base)
  return _internal_mutable_base();
}
inline void TimeTickMsg::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base)->GetArena();
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.TimeTickMsg.base)
}

// -------------------------------------------------------------------

// DataNodeTtMsg

// .milvus.proto.common.MsgBase base = 1;
inline bool DataNodeTtMsg::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool DataNodeTtMsg::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DataNodeTtMsg::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DataNodeTtMsg::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DataNodeTtMsg.base)
  return _internal_base();
}
inline void DataNodeTtMsg::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DataNodeTtMsg.base)
}
inline ::milvus::proto::common::MsgBase* DataNodeTtMsg::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* DataNodeTtMsg::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DataNodeTtMsg.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DataNodeTtMsg::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* DataNodeTtMsg::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DataNodeTtMsg.base)
  return _internal_mutable_base();
}
inline void DataNodeTtMsg::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base)->GetArena();
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DataNodeTtMsg.base)
}

// string channel_name = 2;
inline void DataNodeTtMsg::clear_channel_name() {
  channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataNodeTtMsg::channel_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DataNodeTtMsg.channel_name)
  return _internal_channel_name();
}
inline void DataNodeTtMsg::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DataNodeTtMsg.channel_name)
}
inline std::string* DataNodeTtMsg::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DataNodeTtMsg.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& DataNodeTtMsg::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void DataNodeTtMsg::_internal_set_channel_name(const std::string& value) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataNodeTtMsg::set_channel_name(std::string&& value) {
  
  channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.msg.DataNodeTtMsg.channel_name)
}
inline void DataNodeTtMsg::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.msg.DataNodeTtMsg.channel_name)
}
inline void DataNodeTtMsg::set_channel_name(const char* value,
    size_t size) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.msg.DataNodeTtMsg.channel_name)
}
inline std::string* DataNodeTtMsg::_internal_mutable_channel_name() {
  
  return channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataNodeTtMsg::release_channel_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.msg.DataNodeTtMsg.channel_name)
  return channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataNodeTtMsg::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.msg.DataNodeTtMsg.channel_name)
}
inline std::string* DataNodeTtMsg::unsafe_arena_release_channel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.msg.DataNodeTtMsg.channel_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DataNodeTtMsg::unsafe_arena_set_allocated_channel_name(
    std::string* channel_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.msg.DataNodeTtMsg.channel_name)
}

// uint64 timestamp = 3;
inline void DataNodeTtMsg::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataNodeTtMsg::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataNodeTtMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DataNodeTtMsg.timestamp)
  return _internal_timestamp();
}
inline void DataNodeTtMsg::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void DataNodeTtMsg::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.msg.DataNodeTtMsg.timestamp)
}

// repeated .milvus.proto.common.SegmentStats segments_stats = 4;
inline int DataNodeTtMsg::_internal_segments_stats_size() const {
  return segments_stats_.size();
}
inline int DataNodeTtMsg::segments_stats_size() const {
  return _internal_segments_stats_size();
}
inline ::milvus::proto::common::SegmentStats* DataNodeTtMsg::mutable_segments_stats(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.msg.DataNodeTtMsg.segments_stats)
  return segments_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >*
DataNodeTtMsg::mutable_segments_stats() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.msg.DataNodeTtMsg.segments_stats)
  return &segments_stats_;
}
inline const ::milvus::proto::common::SegmentStats& DataNodeTtMsg::_internal_segments_stats(int index) const {
  return segments_stats_.Get(index);
}
inline const ::milvus::proto::common::SegmentStats& DataNodeTtMsg::segments_stats(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.msg.DataNodeTtMsg.segments_stats)
  return _internal_segments_stats(index);
}
inline ::milvus::proto::common::SegmentStats* DataNodeTtMsg::_internal_add_segments_stats() {
  return segments_stats_.Add();
}
inline ::milvus::proto::common::SegmentStats* DataNodeTtMsg::add_segments_stats() {
  // @@protoc_insertion_point(field_add:milvus.proto.msg.DataNodeTtMsg.segments_stats)
  return _internal_add_segments_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::SegmentStats >&
DataNodeTtMsg::segments_stats() const {
  // @@protoc_insertion_point(field_list:milvus.proto.msg.DataNodeTtMsg.segments_stats)
  return segments_stats_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace proto
}  // namespace milvus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::milvus::proto::msg::InsertDataVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::msg::InsertDataVersion>() {
  return ::milvus::proto::msg::InsertDataVersion_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
