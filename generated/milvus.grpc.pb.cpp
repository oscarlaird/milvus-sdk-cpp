// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: milvus.proto

#include "milvus.pb.h"
#include "milvus.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace milvus {
namespace proto {
namespace milvus {

static const char* MilvusService_method_names[] = {
  "/milvus.proto.milvus.MilvusService/CreateCollection",
  "/milvus.proto.milvus.MilvusService/DropCollection",
  "/milvus.proto.milvus.MilvusService/HasCollection",
  "/milvus.proto.milvus.MilvusService/LoadCollection",
  "/milvus.proto.milvus.MilvusService/ReleaseCollection",
  "/milvus.proto.milvus.MilvusService/DescribeCollection",
  "/milvus.proto.milvus.MilvusService/GetCollectionStatistics",
  "/milvus.proto.milvus.MilvusService/ShowCollections",
  "/milvus.proto.milvus.MilvusService/AlterCollection",
  "/milvus.proto.milvus.MilvusService/CreatePartition",
  "/milvus.proto.milvus.MilvusService/DropPartition",
  "/milvus.proto.milvus.MilvusService/HasPartition",
  "/milvus.proto.milvus.MilvusService/LoadPartitions",
  "/milvus.proto.milvus.MilvusService/ReleasePartitions",
  "/milvus.proto.milvus.MilvusService/GetPartitionStatistics",
  "/milvus.proto.milvus.MilvusService/ShowPartitions",
  "/milvus.proto.milvus.MilvusService/GetLoadingProgress",
  "/milvus.proto.milvus.MilvusService/GetLoadState",
  "/milvus.proto.milvus.MilvusService/CreateAlias",
  "/milvus.proto.milvus.MilvusService/DropAlias",
  "/milvus.proto.milvus.MilvusService/AlterAlias",
  "/milvus.proto.milvus.MilvusService/DescribeAlias",
  "/milvus.proto.milvus.MilvusService/ListAliases",
  "/milvus.proto.milvus.MilvusService/CreateIndex",
  "/milvus.proto.milvus.MilvusService/AlterIndex",
  "/milvus.proto.milvus.MilvusService/DescribeIndex",
  "/milvus.proto.milvus.MilvusService/GetIndexStatistics",
  "/milvus.proto.milvus.MilvusService/GetIndexState",
  "/milvus.proto.milvus.MilvusService/GetIndexBuildProgress",
  "/milvus.proto.milvus.MilvusService/DropIndex",
  "/milvus.proto.milvus.MilvusService/Insert",
  "/milvus.proto.milvus.MilvusService/Delete",
  "/milvus.proto.milvus.MilvusService/Upsert",
  "/milvus.proto.milvus.MilvusService/Search",
  "/milvus.proto.milvus.MilvusService/SearchV2",
  "/milvus.proto.milvus.MilvusService/Flush",
  "/milvus.proto.milvus.MilvusService/Query",
  "/milvus.proto.milvus.MilvusService/CalcDistance",
  "/milvus.proto.milvus.MilvusService/FlushAll",
  "/milvus.proto.milvus.MilvusService/GetFlushState",
  "/milvus.proto.milvus.MilvusService/GetFlushAllState",
  "/milvus.proto.milvus.MilvusService/GetPersistentSegmentInfo",
  "/milvus.proto.milvus.MilvusService/GetQuerySegmentInfo",
  "/milvus.proto.milvus.MilvusService/GetReplicas",
  "/milvus.proto.milvus.MilvusService/Dummy",
  "/milvus.proto.milvus.MilvusService/RegisterLink",
  "/milvus.proto.milvus.MilvusService/GetMetrics",
  "/milvus.proto.milvus.MilvusService/GetComponentStates",
  "/milvus.proto.milvus.MilvusService/LoadBalance",
  "/milvus.proto.milvus.MilvusService/GetCompactionState",
  "/milvus.proto.milvus.MilvusService/ManualCompaction",
  "/milvus.proto.milvus.MilvusService/GetCompactionStateWithPlans",
  "/milvus.proto.milvus.MilvusService/Import",
  "/milvus.proto.milvus.MilvusService/GetImportState",
  "/milvus.proto.milvus.MilvusService/ListImportTasks",
  "/milvus.proto.milvus.MilvusService/CreateCredential",
  "/milvus.proto.milvus.MilvusService/UpdateCredential",
  "/milvus.proto.milvus.MilvusService/DeleteCredential",
  "/milvus.proto.milvus.MilvusService/ListCredUsers",
  "/milvus.proto.milvus.MilvusService/CreateRole",
  "/milvus.proto.milvus.MilvusService/DropRole",
  "/milvus.proto.milvus.MilvusService/OperateUserRole",
  "/milvus.proto.milvus.MilvusService/SelectRole",
  "/milvus.proto.milvus.MilvusService/SelectUser",
  "/milvus.proto.milvus.MilvusService/OperatePrivilege",
  "/milvus.proto.milvus.MilvusService/SelectGrant",
  "/milvus.proto.milvus.MilvusService/GetVersion",
  "/milvus.proto.milvus.MilvusService/CheckHealth",
  "/milvus.proto.milvus.MilvusService/CreateResourceGroup",
  "/milvus.proto.milvus.MilvusService/DropResourceGroup",
  "/milvus.proto.milvus.MilvusService/TransferNode",
  "/milvus.proto.milvus.MilvusService/TransferReplica",
  "/milvus.proto.milvus.MilvusService/ListResourceGroups",
  "/milvus.proto.milvus.MilvusService/DescribeResourceGroup",
  "/milvus.proto.milvus.MilvusService/RenameCollection",
  "/milvus.proto.milvus.MilvusService/ListIndexedSegment",
  "/milvus.proto.milvus.MilvusService/DescribeSegmentIndexData",
  "/milvus.proto.milvus.MilvusService/Connect",
  "/milvus.proto.milvus.MilvusService/AllocTimestamp",
  "/milvus.proto.milvus.MilvusService/CreateDatabase",
  "/milvus.proto.milvus.MilvusService/DropDatabase",
  "/milvus.proto.milvus.MilvusService/ListDatabases",
  "/milvus.proto.milvus.MilvusService/ReplicateMessage",
};

std::unique_ptr< MilvusService::Stub> MilvusService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MilvusService::Stub> stub(new MilvusService::Stub(channel));
  return stub;
}

MilvusService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateCollection_(MilvusService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropCollection_(MilvusService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasCollection_(MilvusService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadCollection_(MilvusService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReleaseCollection_(MilvusService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeCollection_(MilvusService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollectionStatistics_(MilvusService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowCollections_(MilvusService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AlterCollection_(MilvusService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePartition_(MilvusService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropPartition_(MilvusService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasPartition_(MilvusService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadPartitions_(MilvusService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReleasePartitions_(MilvusService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPartitionStatistics_(MilvusService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowPartitions_(MilvusService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLoadingProgress_(MilvusService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLoadState_(MilvusService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAlias_(MilvusService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropAlias_(MilvusService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AlterAlias_(MilvusService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeAlias_(MilvusService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAliases_(MilvusService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateIndex_(MilvusService_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AlterIndex_(MilvusService_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeIndex_(MilvusService_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIndexStatistics_(MilvusService_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIndexState_(MilvusService_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIndexBuildProgress_(MilvusService_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropIndex_(MilvusService_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Insert_(MilvusService_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(MilvusService_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Upsert_(MilvusService_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Search_(MilvusService_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchV2_(MilvusService_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Flush_(MilvusService_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Query_(MilvusService_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalcDistance_(MilvusService_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FlushAll_(MilvusService_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFlushState_(MilvusService_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFlushAllState_(MilvusService_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPersistentSegmentInfo_(MilvusService_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetQuerySegmentInfo_(MilvusService_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReplicas_(MilvusService_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Dummy_(MilvusService_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterLink_(MilvusService_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMetrics_(MilvusService_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetComponentStates_(MilvusService_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadBalance_(MilvusService_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCompactionState_(MilvusService_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ManualCompaction_(MilvusService_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCompactionStateWithPlans_(MilvusService_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Import_(MilvusService_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImportState_(MilvusService_method_names[53], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListImportTasks_(MilvusService_method_names[54], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCredential_(MilvusService_method_names[55], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCredential_(MilvusService_method_names[56], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCredential_(MilvusService_method_names[57], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCredUsers_(MilvusService_method_names[58], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRole_(MilvusService_method_names[59], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropRole_(MilvusService_method_names[60], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OperateUserRole_(MilvusService_method_names[61], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectRole_(MilvusService_method_names[62], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectUser_(MilvusService_method_names[63], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OperatePrivilege_(MilvusService_method_names[64], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectGrant_(MilvusService_method_names[65], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVersion_(MilvusService_method_names[66], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckHealth_(MilvusService_method_names[67], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateResourceGroup_(MilvusService_method_names[68], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropResourceGroup_(MilvusService_method_names[69], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferNode_(MilvusService_method_names[70], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferReplica_(MilvusService_method_names[71], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListResourceGroups_(MilvusService_method_names[72], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeResourceGroup_(MilvusService_method_names[73], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenameCollection_(MilvusService_method_names[74], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListIndexedSegment_(MilvusService_method_names[75], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeSegmentIndexData_(MilvusService_method_names[76], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Connect_(MilvusService_method_names[77], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllocTimestamp_(MilvusService_method_names[78], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDatabase_(MilvusService_method_names[79], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropDatabase_(MilvusService_method_names[80], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDatabases_(MilvusService_method_names[81], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplicateMessage_(MilvusService_method_names[82], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MilvusService::Stub::CreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCollection_, context, request, response);
}

void MilvusService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateCollection_, context, request, false);
}

::grpc::Status MilvusService::Stub::DropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropCollection_, context, request, response);
}

void MilvusService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncDropCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncDropCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropCollection_, context, request, false);
}

::grpc::Status MilvusService::Stub::HasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::milvus::proto::milvus::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HasCollection_, context, request, response);
}

void MilvusService::Stub::experimental_async::HasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HasCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::HasCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HasCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::HasCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HasCollection_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::HasCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HasCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>* MilvusService::Stub::AsyncHasCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::BoolResponse>::Create(channel_.get(), cq, rpcmethod_HasCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>* MilvusService::Stub::PrepareAsyncHasCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::BoolResponse>::Create(channel_.get(), cq, rpcmethod_HasCollection_, context, request, false);
}

::grpc::Status MilvusService::Stub::LoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadCollection_, context, request, response);
}

void MilvusService::Stub::experimental_async::LoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::LoadCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::LoadCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadCollection_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::LoadCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncLoadCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_LoadCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncLoadCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_LoadCollection_, context, request, false);
}

::grpc::Status MilvusService::Stub::ReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReleaseCollection_, context, request, response);
}

void MilvusService::Stub::experimental_async::ReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReleaseCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ReleaseCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReleaseCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ReleaseCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReleaseCollection_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ReleaseCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReleaseCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncReleaseCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_ReleaseCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncReleaseCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_ReleaseCollection_, context, request, false);
}

::grpc::Status MilvusService::Stub::DescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::milvus::proto::milvus::DescribeCollectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DescribeCollection_, context, request, response);
}

void MilvusService::Stub::experimental_async::DescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DescribeCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DescribeCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeCollection_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DescribeCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeCollectionResponse>* MilvusService::Stub::AsyncDescribeCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::DescribeCollectionResponse>::Create(channel_.get(), cq, rpcmethod_DescribeCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeCollectionResponse>* MilvusService::Stub::PrepareAsyncDescribeCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::DescribeCollectionResponse>::Create(channel_.get(), cq, rpcmethod_DescribeCollection_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCollectionStatistics_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollectionStatistics_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetCollectionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollectionStatistics_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetCollectionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollectionStatistics_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetCollectionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollectionStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCollectionStatisticsResponse>* MilvusService::Stub::AsyncGetCollectionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetCollectionStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_GetCollectionStatistics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCollectionStatisticsResponse>* MilvusService::Stub::PrepareAsyncGetCollectionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetCollectionStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_GetCollectionStatistics_, context, request, false);
}

::grpc::Status MilvusService::Stub::ShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::milvus::proto::milvus::ShowCollectionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowCollections_, context, request, response);
}

void MilvusService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowCollectionsResponse>* MilvusService::Stub::AsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ShowCollectionsResponse>::Create(channel_.get(), cq, rpcmethod_ShowCollections_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowCollectionsResponse>* MilvusService::Stub::PrepareAsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ShowCollectionsResponse>::Create(channel_.get(), cq, rpcmethod_ShowCollections_, context, request, false);
}

::grpc::Status MilvusService::Stub::AlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AlterCollection_, context, request, response);
}

void MilvusService::Stub::experimental_async::AlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AlterCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::AlterCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AlterCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::AlterCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AlterCollection_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::AlterCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AlterCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncAlterCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_AlterCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncAlterCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_AlterCollection_, context, request, false);
}

::grpc::Status MilvusService::Stub::CreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreatePartition_, context, request, response);
}

void MilvusService::Stub::experimental_async::CreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreatePartition_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreatePartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreatePartition_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreatePartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreatePartition_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::CreatePartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreatePartition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncCreatePartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreatePartition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncCreatePartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreatePartitionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreatePartition_, context, request, false);
}

::grpc::Status MilvusService::Stub::DropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropPartition_, context, request, response);
}

void MilvusService::Stub::experimental_async::DropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropPartition_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropPartition_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropPartition_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DropPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropPartition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncDropPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropPartition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncDropPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropPartitionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropPartition_, context, request, false);
}

::grpc::Status MilvusService::Stub::HasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::milvus::proto::milvus::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HasPartition_, context, request, response);
}

void MilvusService::Stub::experimental_async::HasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HasPartition_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::HasPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HasPartition_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::HasPartition(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HasPartition_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::HasPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::BoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HasPartition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>* MilvusService::Stub::AsyncHasPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::BoolResponse>::Create(channel_.get(), cq, rpcmethod_HasPartition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::BoolResponse>* MilvusService::Stub::PrepareAsyncHasPartitionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::HasPartitionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::BoolResponse>::Create(channel_.get(), cq, rpcmethod_HasPartition_, context, request, false);
}

::grpc::Status MilvusService::Stub::LoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadPartitions_, context, request, response);
}

void MilvusService::Stub::experimental_async::LoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadPartitions_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::LoadPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadPartitions_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::LoadPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadPartitions_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::LoadPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadPartitions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncLoadPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_LoadPartitions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncLoadPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_LoadPartitions_, context, request, false);
}

::grpc::Status MilvusService::Stub::ReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReleasePartitions_, context, request, response);
}

void MilvusService::Stub::experimental_async::ReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReleasePartitions_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ReleasePartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReleasePartitions_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ReleasePartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReleasePartitions_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ReleasePartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReleasePartitions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncReleasePartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_ReleasePartitions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncReleasePartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_ReleasePartitions_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPartitionStatistics_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPartitionStatistics_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetPartitionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPartitionStatistics_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetPartitionStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPartitionStatistics_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetPartitionStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPartitionStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPartitionStatisticsResponse>* MilvusService::Stub::AsyncGetPartitionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetPartitionStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_GetPartitionStatistics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPartitionStatisticsResponse>* MilvusService::Stub::PrepareAsyncGetPartitionStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetPartitionStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_GetPartitionStatistics_, context, request, false);
}

::grpc::Status MilvusService::Stub::ShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::milvus::proto::milvus::ShowPartitionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowPartitions_, context, request, response);
}

void MilvusService::Stub::experimental_async::ShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowPartitions_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ShowPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowPartitions_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ShowPartitions(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowPartitions_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ShowPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ShowPartitionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowPartitions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowPartitionsResponse>* MilvusService::Stub::AsyncShowPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ShowPartitionsResponse>::Create(channel_.get(), cq, rpcmethod_ShowPartitions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ShowPartitionsResponse>* MilvusService::Stub::PrepareAsyncShowPartitionsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ShowPartitionsResponse>::Create(channel_.get(), cq, rpcmethod_ShowPartitions_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::milvus::proto::milvus::GetLoadingProgressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLoadingProgress_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLoadingProgress_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetLoadingProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLoadingProgress_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetLoadingProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLoadingProgress_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetLoadingProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLoadingProgress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadingProgressResponse>* MilvusService::Stub::AsyncGetLoadingProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetLoadingProgressResponse>::Create(channel_.get(), cq, rpcmethod_GetLoadingProgress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadingProgressResponse>* MilvusService::Stub::PrepareAsyncGetLoadingProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetLoadingProgressResponse>::Create(channel_.get(), cq, rpcmethod_GetLoadingProgress_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::milvus::proto::milvus::GetLoadStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLoadState_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest* request, ::milvus::proto::milvus::GetLoadStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLoadState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetLoadState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLoadState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetLoadState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest* request, ::milvus::proto::milvus::GetLoadStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLoadState_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetLoadState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetLoadStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLoadState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadStateResponse>* MilvusService::Stub::AsyncGetLoadStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetLoadStateResponse>::Create(channel_.get(), cq, rpcmethod_GetLoadState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetLoadStateResponse>* MilvusService::Stub::PrepareAsyncGetLoadStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetLoadStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetLoadStateResponse>::Create(channel_.get(), cq, rpcmethod_GetLoadState_, context, request, false);
}

::grpc::Status MilvusService::Stub::CreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateAlias_, context, request, response);
}

void MilvusService::Stub::experimental_async::CreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateAlias_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateAlias_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateAlias_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateAlias_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncCreateAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateAlias_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncCreateAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateAlias_, context, request, false);
}

::grpc::Status MilvusService::Stub::DropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropAlias_, context, request, response);
}

void MilvusService::Stub::experimental_async::DropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropAlias_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropAlias_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropAlias_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DropAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropAlias_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncDropAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropAlias_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncDropAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropAliasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropAlias_, context, request, false);
}

::grpc::Status MilvusService::Stub::AlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AlterAlias_, context, request, response);
}

void MilvusService::Stub::experimental_async::AlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AlterAlias_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::AlterAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AlterAlias_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::AlterAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AlterAlias_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::AlterAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AlterAlias_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncAlterAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_AlterAlias_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncAlterAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterAliasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_AlterAlias_, context, request, false);
}

::grpc::Status MilvusService::Stub::DescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::milvus::proto::milvus::DescribeAliasResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DescribeAlias_, context, request, response);
}

void MilvusService::Stub::experimental_async::DescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest* request, ::milvus::proto::milvus::DescribeAliasResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeAlias_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DescribeAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeAliasResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeAlias_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DescribeAlias(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest* request, ::milvus::proto::milvus::DescribeAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeAlias_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DescribeAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeAlias_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeAliasResponse>* MilvusService::Stub::AsyncDescribeAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::DescribeAliasResponse>::Create(channel_.get(), cq, rpcmethod_DescribeAlias_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeAliasResponse>* MilvusService::Stub::PrepareAsyncDescribeAliasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeAliasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::DescribeAliasResponse>::Create(channel_.get(), cq, rpcmethod_DescribeAlias_, context, request, false);
}

::grpc::Status MilvusService::Stub::ListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::milvus::proto::milvus::ListAliasesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListAliases_, context, request, response);
}

void MilvusService::Stub::experimental_async::ListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest* request, ::milvus::proto::milvus::ListAliasesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAliases_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListAliases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListAliasesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAliases_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListAliases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest* request, ::milvus::proto::milvus::ListAliasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAliases_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ListAliases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListAliasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAliases_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListAliasesResponse>* MilvusService::Stub::AsyncListAliasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ListAliasesResponse>::Create(channel_.get(), cq, rpcmethod_ListAliases_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListAliasesResponse>* MilvusService::Stub::PrepareAsyncListAliasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListAliasesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ListAliasesResponse>::Create(channel_.get(), cq, rpcmethod_ListAliases_, context, request, false);
}

::grpc::Status MilvusService::Stub::CreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateIndex_, context, request, response);
}

void MilvusService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateIndex_, context, request, false);
}

::grpc::Status MilvusService::Stub::AlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AlterIndex_, context, request, response);
}

void MilvusService::Stub::experimental_async::AlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AlterIndex_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::AlterIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AlterIndex_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::AlterIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AlterIndex_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::AlterIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AlterIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncAlterIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_AlterIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncAlterIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AlterIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_AlterIndex_, context, request, false);
}

::grpc::Status MilvusService::Stub::DescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::milvus::proto::milvus::DescribeIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DescribeIndex_, context, request, response);
}

void MilvusService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest* request, ::milvus::proto::milvus::DescribeIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest* request, ::milvus::proto::milvus::DescribeIndexResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeIndexResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeIndexResponse>* MilvusService::Stub::AsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::DescribeIndexResponse>::Create(channel_.get(), cq, rpcmethod_DescribeIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeIndexResponse>* MilvusService::Stub::PrepareAsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::DescribeIndexResponse>::Create(channel_.get(), cq, rpcmethod_DescribeIndex_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIndexStatistics_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIndexStatistics_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetIndexStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIndexStatistics_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetIndexStatistics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIndexStatistics_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetIndexStatistics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIndexStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStatisticsResponse>* MilvusService::Stub::AsyncGetIndexStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetIndexStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_GetIndexStatistics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStatisticsResponse>* MilvusService::Stub::PrepareAsyncGetIndexStatisticsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetIndexStatisticsResponse>::Create(channel_.get(), cq, rpcmethod_GetIndexStatistics_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::milvus::proto::milvus::GetIndexStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIndexState_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest* request, ::milvus::proto::milvus::GetIndexStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIndexState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetIndexState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIndexState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetIndexState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest* request, ::milvus::proto::milvus::GetIndexStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIndexState_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetIndexState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIndexState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStateResponse>* MilvusService::Stub::AsyncGetIndexStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetIndexStateResponse>::Create(channel_.get(), cq, rpcmethod_GetIndexState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexStateResponse>* MilvusService::Stub::PrepareAsyncGetIndexStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetIndexStateResponse>::Create(channel_.get(), cq, rpcmethod_GetIndexState_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIndexBuildProgress_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIndexBuildProgress_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetIndexBuildProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIndexBuildProgress_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetIndexBuildProgress(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIndexBuildProgress_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetIndexBuildProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIndexBuildProgress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexBuildProgressResponse>* MilvusService::Stub::AsyncGetIndexBuildProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetIndexBuildProgressResponse>::Create(channel_.get(), cq, rpcmethod_GetIndexBuildProgress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetIndexBuildProgressResponse>* MilvusService::Stub::PrepareAsyncGetIndexBuildProgressRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetIndexBuildProgressResponse>::Create(channel_.get(), cq, rpcmethod_GetIndexBuildProgress_, context, request, false);
}

::grpc::Status MilvusService::Stub::DropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropIndex_, context, request, response);
}

void MilvusService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncDropIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncDropIndexRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropIndex_, context, request, false);
}

::grpc::Status MilvusService::Stub::Insert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::milvus::proto::milvus::MutationResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Insert_, context, request, response);
}

void MilvusService::Stub::experimental_async::Insert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Insert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Insert(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::Insert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* MilvusService::Stub::AsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::MutationResult>::Create(channel_.get(), cq, rpcmethod_Insert_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* MilvusService::Stub::PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::InsertRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::MutationResult>::Create(channel_.get(), cq, rpcmethod_Insert_, context, request, false);
}

::grpc::Status MilvusService::Stub::Delete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::milvus::proto::milvus::MutationResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void MilvusService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* MilvusService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::MutationResult>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* MilvusService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::MutationResult>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::Status MilvusService::Stub::Upsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::milvus::proto::milvus::MutationResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Upsert_, context, request, response);
}

void MilvusService::Stub::experimental_async::Upsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Upsert_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Upsert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Upsert_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Upsert(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Upsert_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::Upsert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::MutationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Upsert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* MilvusService::Stub::AsyncUpsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::MutationResult>::Create(channel_.get(), cq, rpcmethod_Upsert_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::MutationResult>* MilvusService::Stub::PrepareAsyncUpsertRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpsertRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::MutationResult>::Create(channel_.get(), cq, rpcmethod_Upsert_, context, request, false);
}

::grpc::Status MilvusService::Stub::Search(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::milvus::proto::milvus::SearchResults* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Search_, context, request, response);
}

void MilvusService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>* MilvusService::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::SearchResults>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>* MilvusService::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::SearchResults>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, false);
}

::grpc::Status MilvusService::Stub::SearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::milvus::proto::milvus::SearchResults* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SearchV2_, context, request, response);
}

void MilvusService::Stub::experimental_async::SearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchV2_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::SearchV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchV2_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::SearchV2(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchV2_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::SearchV2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SearchResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchV2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>* MilvusService::Stub::AsyncSearchV2Raw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::SearchResults>::Create(channel_.get(), cq, rpcmethod_SearchV2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SearchResults>* MilvusService::Stub::PrepareAsyncSearchV2Raw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SearchRequestV2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::SearchResults>::Create(channel_.get(), cq, rpcmethod_SearchV2_, context, request, false);
}

::grpc::Status MilvusService::Stub::Flush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::milvus::proto::milvus::FlushResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Flush_, context, request, response);
}

void MilvusService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest* request, ::milvus::proto::milvus::FlushResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest* request, ::milvus::proto::milvus::FlushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushResponse>* MilvusService::Stub::AsyncFlushRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::FlushResponse>::Create(channel_.get(), cq, rpcmethod_Flush_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushResponse>* MilvusService::Stub::PrepareAsyncFlushRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::FlushResponse>::Create(channel_.get(), cq, rpcmethod_Flush_, context, request, false);
}

::grpc::Status MilvusService::Stub::Query(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::milvus::proto::milvus::QueryResults* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Query_, context, request, response);
}

void MilvusService::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest* request, ::milvus::proto::milvus::QueryResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::QueryResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest* request, ::milvus::proto::milvus::QueryResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::QueryResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::QueryResults>* MilvusService::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::QueryResults>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::QueryResults>* MilvusService::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::QueryResults>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, false);
}

::grpc::Status MilvusService::Stub::CalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::milvus::proto::milvus::CalcDistanceResults* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CalcDistance_, context, request, response);
}

void MilvusService::Stub::experimental_async::CalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest* request, ::milvus::proto::milvus::CalcDistanceResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalcDistance_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CalcDistance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CalcDistanceResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalcDistance_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CalcDistance(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest* request, ::milvus::proto::milvus::CalcDistanceResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CalcDistance_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::CalcDistance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CalcDistanceResults* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CalcDistance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CalcDistanceResults>* MilvusService::Stub::AsyncCalcDistanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::CalcDistanceResults>::Create(channel_.get(), cq, rpcmethod_CalcDistance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CalcDistanceResults>* MilvusService::Stub::PrepareAsyncCalcDistanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CalcDistanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::CalcDistanceResults>::Create(channel_.get(), cq, rpcmethod_CalcDistance_, context, request, false);
}

::grpc::Status MilvusService::Stub::FlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::milvus::proto::milvus::FlushAllResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FlushAll_, context, request, response);
}

void MilvusService::Stub::experimental_async::FlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest* request, ::milvus::proto::milvus::FlushAllResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FlushAll_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::FlushAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushAllResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FlushAll_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::FlushAll(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest* request, ::milvus::proto::milvus::FlushAllResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FlushAll_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::FlushAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::FlushAllResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FlushAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushAllResponse>* MilvusService::Stub::AsyncFlushAllRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::FlushAllResponse>::Create(channel_.get(), cq, rpcmethod_FlushAll_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::FlushAllResponse>* MilvusService::Stub::PrepareAsyncFlushAllRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::FlushAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::FlushAllResponse>::Create(channel_.get(), cq, rpcmethod_FlushAll_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::milvus::proto::milvus::GetFlushStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFlushState_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest* request, ::milvus::proto::milvus::GetFlushStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFlushState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetFlushState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFlushState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetFlushState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest* request, ::milvus::proto::milvus::GetFlushStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFlushState_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetFlushState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFlushState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushStateResponse>* MilvusService::Stub::AsyncGetFlushStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetFlushStateResponse>::Create(channel_.get(), cq, rpcmethod_GetFlushState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushStateResponse>* MilvusService::Stub::PrepareAsyncGetFlushStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetFlushStateResponse>::Create(channel_.get(), cq, rpcmethod_GetFlushState_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::milvus::proto::milvus::GetFlushAllStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFlushAllState_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFlushAllState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetFlushAllState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFlushAllState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetFlushAllState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFlushAllState_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetFlushAllState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFlushAllState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushAllStateResponse>* MilvusService::Stub::AsyncGetFlushAllStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetFlushAllStateResponse>::Create(channel_.get(), cq, rpcmethod_GetFlushAllState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetFlushAllStateResponse>* MilvusService::Stub::PrepareAsyncGetFlushAllStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetFlushAllStateResponse>::Create(channel_.get(), cq, rpcmethod_GetFlushAllState_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPersistentSegmentInfo_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPersistentSegmentInfo_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPersistentSegmentInfo_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPersistentSegmentInfo_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetPersistentSegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPersistentSegmentInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>* MilvusService::Stub::AsyncGetPersistentSegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetPersistentSegmentInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>* MilvusService::Stub::PrepareAsyncGetPersistentSegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetPersistentSegmentInfo_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetQuerySegmentInfo_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetQuerySegmentInfo_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetQuerySegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetQuerySegmentInfo_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetQuerySegmentInfo(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetQuerySegmentInfo_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetQuerySegmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetQuerySegmentInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>* MilvusService::Stub::AsyncGetQuerySegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetQuerySegmentInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>* MilvusService::Stub::PrepareAsyncGetQuerySegmentInfoRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetQuerySegmentInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetQuerySegmentInfo_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::milvus::proto::milvus::GetReplicasResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetReplicas_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest* request, ::milvus::proto::milvus::GetReplicasResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetReplicas_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetReplicas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetReplicasResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetReplicas_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetReplicas(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest* request, ::milvus::proto::milvus::GetReplicasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetReplicas_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetReplicas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetReplicasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetReplicas_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetReplicasResponse>* MilvusService::Stub::AsyncGetReplicasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetReplicasResponse>::Create(channel_.get(), cq, rpcmethod_GetReplicas_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetReplicasResponse>* MilvusService::Stub::PrepareAsyncGetReplicasRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetReplicasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetReplicasResponse>::Create(channel_.get(), cq, rpcmethod_GetReplicas_, context, request, false);
}

::grpc::Status MilvusService::Stub::Dummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::milvus::proto::milvus::DummyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Dummy_, context, request, response);
}

void MilvusService::Stub::experimental_async::Dummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest* request, ::milvus::proto::milvus::DummyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Dummy_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Dummy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DummyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Dummy_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Dummy(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest* request, ::milvus::proto::milvus::DummyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Dummy_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::Dummy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DummyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Dummy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DummyResponse>* MilvusService::Stub::AsyncDummyRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::DummyResponse>::Create(channel_.get(), cq, rpcmethod_Dummy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DummyResponse>* MilvusService::Stub::PrepareAsyncDummyRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DummyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::DummyResponse>::Create(channel_.get(), cq, rpcmethod_Dummy_, context, request, false);
}

::grpc::Status MilvusService::Stub::RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::milvus::proto::milvus::RegisterLinkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterLink_, context, request, response);
}

void MilvusService::Stub::experimental_async::RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterLink_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterLink_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterLink_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterLink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>* MilvusService::Stub::AsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::RegisterLinkResponse>::Create(channel_.get(), cq, rpcmethod_RegisterLink_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>* MilvusService::Stub::PrepareAsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::RegisterLinkResponse>::Create(channel_.get(), cq, rpcmethod_RegisterLink_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::milvus::proto::milvus::GetMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMetrics_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest* request, ::milvus::proto::milvus::GetMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetMetrics(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest* request, ::milvus::proto::milvus::GetMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetMetricsResponse>* MilvusService::Stub::AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetMetricsResponse>* MilvusService::Stub::PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetMetrics_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::milvus::proto::milvus::ComponentStates* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetComponentStates_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetComponentStates_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetComponentStates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ComponentStates* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetComponentStates_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetComponentStates(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetComponentStates_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetComponentStates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ComponentStates* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetComponentStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>* MilvusService::Stub::AsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ComponentStates>::Create(channel_.get(), cq, rpcmethod_GetComponentStates_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ComponentStates>* MilvusService::Stub::PrepareAsyncGetComponentStatesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ComponentStates>::Create(channel_.get(), cq, rpcmethod_GetComponentStates_, context, request, false);
}

::grpc::Status MilvusService::Stub::LoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadBalance_, context, request, response);
}

void MilvusService::Stub::experimental_async::LoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadBalance_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::LoadBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadBalance_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::LoadBalance(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadBalance_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::LoadBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncLoadBalanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_LoadBalance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncLoadBalanceRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::LoadBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_LoadBalance_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::milvus::proto::milvus::GetCompactionStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCompactionState_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCompactionState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetCompactionState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCompactionState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetCompactionState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCompactionState_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetCompactionState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCompactionState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionStateResponse>* MilvusService::Stub::AsyncGetCompactionStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetCompactionStateResponse>::Create(channel_.get(), cq, rpcmethod_GetCompactionState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionStateResponse>* MilvusService::Stub::PrepareAsyncGetCompactionStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetCompactionStateResponse>::Create(channel_.get(), cq, rpcmethod_GetCompactionState_, context, request, false);
}

::grpc::Status MilvusService::Stub::ManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::milvus::proto::milvus::ManualCompactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ManualCompaction_, context, request, response);
}

void MilvusService::Stub::experimental_async::ManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest* request, ::milvus::proto::milvus::ManualCompactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ManualCompaction_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ManualCompaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ManualCompactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ManualCompaction_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ManualCompaction(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest* request, ::milvus::proto::milvus::ManualCompactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ManualCompaction_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ManualCompaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ManualCompactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ManualCompaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ManualCompactionResponse>* MilvusService::Stub::AsyncManualCompactionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ManualCompactionResponse>::Create(channel_.get(), cq, rpcmethod_ManualCompaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ManualCompactionResponse>* MilvusService::Stub::PrepareAsyncManualCompactionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ManualCompactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ManualCompactionResponse>::Create(channel_.get(), cq, rpcmethod_ManualCompaction_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::milvus::proto::milvus::GetCompactionPlansResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCompactionStateWithPlans_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCompactionStateWithPlans_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCompactionStateWithPlans_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCompactionStateWithPlans_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetCompactionStateWithPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCompactionStateWithPlans_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionPlansResponse>* MilvusService::Stub::AsyncGetCompactionStateWithPlansRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetCompactionPlansResponse>::Create(channel_.get(), cq, rpcmethod_GetCompactionStateWithPlans_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetCompactionPlansResponse>* MilvusService::Stub::PrepareAsyncGetCompactionStateWithPlansRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetCompactionPlansResponse>::Create(channel_.get(), cq, rpcmethod_GetCompactionStateWithPlans_, context, request, false);
}

::grpc::Status MilvusService::Stub::Import(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::milvus::proto::milvus::ImportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Import_, context, request, response);
}

void MilvusService::Stub::experimental_async::Import(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest* request, ::milvus::proto::milvus::ImportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Import_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ImportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Import_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Import(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest* request, ::milvus::proto::milvus::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Import_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::Import(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ImportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Import_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ImportResponse>* MilvusService::Stub::AsyncImportRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ImportResponse>::Create(channel_.get(), cq, rpcmethod_Import_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ImportResponse>* MilvusService::Stub::PrepareAsyncImportRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ImportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ImportResponse>::Create(channel_.get(), cq, rpcmethod_Import_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::milvus::proto::milvus::GetImportStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetImportState_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest* request, ::milvus::proto::milvus::GetImportStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetImportState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetImportState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetImportStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetImportState_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetImportState(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest* request, ::milvus::proto::milvus::GetImportStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetImportState_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetImportState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetImportStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetImportState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetImportStateResponse>* MilvusService::Stub::AsyncGetImportStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetImportStateResponse>::Create(channel_.get(), cq, rpcmethod_GetImportState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetImportStateResponse>* MilvusService::Stub::PrepareAsyncGetImportStateRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetImportStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetImportStateResponse>::Create(channel_.get(), cq, rpcmethod_GetImportState_, context, request, false);
}

::grpc::Status MilvusService::Stub::ListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::milvus::proto::milvus::ListImportTasksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListImportTasks_, context, request, response);
}

void MilvusService::Stub::experimental_async::ListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest* request, ::milvus::proto::milvus::ListImportTasksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListImportTasks_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListImportTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListImportTasksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListImportTasks_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListImportTasks(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest* request, ::milvus::proto::milvus::ListImportTasksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListImportTasks_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ListImportTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListImportTasksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListImportTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListImportTasksResponse>* MilvusService::Stub::AsyncListImportTasksRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ListImportTasksResponse>::Create(channel_.get(), cq, rpcmethod_ListImportTasks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListImportTasksResponse>* MilvusService::Stub::PrepareAsyncListImportTasksRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListImportTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ListImportTasksResponse>::Create(channel_.get(), cq, rpcmethod_ListImportTasks_, context, request, false);
}

::grpc::Status MilvusService::Stub::CreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCredential_, context, request, response);
}

void MilvusService::Stub::experimental_async::CreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCredential_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCredential_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCredential_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::CreateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCredential_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncCreateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateCredential_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncCreateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateCredential_, context, request, false);
}

::grpc::Status MilvusService::Stub::UpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateCredential_, context, request, response);
}

void MilvusService::Stub::experimental_async::UpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateCredential_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::UpdateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateCredential_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::UpdateCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateCredential_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::UpdateCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateCredential_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncUpdateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_UpdateCredential_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncUpdateCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_UpdateCredential_, context, request, false);
}

::grpc::Status MilvusService::Stub::DeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteCredential_, context, request, response);
}

void MilvusService::Stub::experimental_async::DeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteCredential_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DeleteCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteCredential_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DeleteCredential(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteCredential_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DeleteCredential(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteCredential_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncDeleteCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DeleteCredential_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncDeleteCredentialRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DeleteCredential_, context, request, false);
}

::grpc::Status MilvusService::Stub::ListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::milvus::proto::milvus::ListCredUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListCredUsers_, context, request, response);
}

void MilvusService::Stub::experimental_async::ListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest* request, ::milvus::proto::milvus::ListCredUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCredUsers_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListCredUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListCredUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCredUsers_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListCredUsers(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest* request, ::milvus::proto::milvus::ListCredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCredUsers_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ListCredUsers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListCredUsersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCredUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListCredUsersResponse>* MilvusService::Stub::AsyncListCredUsersRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ListCredUsersResponse>::Create(channel_.get(), cq, rpcmethod_ListCredUsers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListCredUsersResponse>* MilvusService::Stub::PrepareAsyncListCredUsersRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListCredUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ListCredUsersResponse>::Create(channel_.get(), cq, rpcmethod_ListCredUsers_, context, request, false);
}

::grpc::Status MilvusService::Stub::CreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateRole_, context, request, response);
}

void MilvusService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateRole_, context, request, false);
}

::grpc::Status MilvusService::Stub::DropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropRole_, context, request, response);
}

void MilvusService::Stub::experimental_async::DropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropRole_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropRole_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropRole_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DropRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncDropRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncDropRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropRole_, context, request, false);
}

::grpc::Status MilvusService::Stub::OperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OperateUserRole_, context, request, response);
}

void MilvusService::Stub::experimental_async::OperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OperateUserRole_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::OperateUserRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OperateUserRole_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::OperateUserRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OperateUserRole_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::OperateUserRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OperateUserRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncOperateUserRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_OperateUserRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncOperateUserRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_OperateUserRole_, context, request, false);
}

::grpc::Status MilvusService::Stub::SelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::milvus::proto::milvus::SelectRoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SelectRole_, context, request, response);
}

void MilvusService::Stub::experimental_async::SelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest* request, ::milvus::proto::milvus::SelectRoleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SelectRole_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::SelectRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectRoleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SelectRole_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::SelectRole(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest* request, ::milvus::proto::milvus::SelectRoleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SelectRole_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::SelectRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectRoleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SelectRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectRoleResponse>* MilvusService::Stub::AsyncSelectRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::SelectRoleResponse>::Create(channel_.get(), cq, rpcmethod_SelectRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectRoleResponse>* MilvusService::Stub::PrepareAsyncSelectRoleRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::SelectRoleResponse>::Create(channel_.get(), cq, rpcmethod_SelectRole_, context, request, false);
}

::grpc::Status MilvusService::Stub::SelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::milvus::proto::milvus::SelectUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SelectUser_, context, request, response);
}

void MilvusService::Stub::experimental_async::SelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest* request, ::milvus::proto::milvus::SelectUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SelectUser_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::SelectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SelectUser_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::SelectUser(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest* request, ::milvus::proto::milvus::SelectUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SelectUser_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::SelectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SelectUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectUserResponse>* MilvusService::Stub::AsyncSelectUserRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::SelectUserResponse>::Create(channel_.get(), cq, rpcmethod_SelectUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectUserResponse>* MilvusService::Stub::PrepareAsyncSelectUserRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::SelectUserResponse>::Create(channel_.get(), cq, rpcmethod_SelectUser_, context, request, false);
}

::grpc::Status MilvusService::Stub::OperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OperatePrivilege_, context, request, response);
}

void MilvusService::Stub::experimental_async::OperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OperatePrivilege_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::OperatePrivilege(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OperatePrivilege_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::OperatePrivilege(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OperatePrivilege_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::OperatePrivilege(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OperatePrivilege_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncOperatePrivilegeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_OperatePrivilege_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncOperatePrivilegeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_OperatePrivilege_, context, request, false);
}

::grpc::Status MilvusService::Stub::SelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::milvus::proto::milvus::SelectGrantResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SelectGrant_, context, request, response);
}

void MilvusService::Stub::experimental_async::SelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest* request, ::milvus::proto::milvus::SelectGrantResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SelectGrant_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::SelectGrant(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectGrantResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SelectGrant_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::SelectGrant(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest* request, ::milvus::proto::milvus::SelectGrantResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SelectGrant_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::SelectGrant(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::SelectGrantResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SelectGrant_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectGrantResponse>* MilvusService::Stub::AsyncSelectGrantRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::SelectGrantResponse>::Create(channel_.get(), cq, rpcmethod_SelectGrant_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::SelectGrantResponse>* MilvusService::Stub::PrepareAsyncSelectGrantRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::SelectGrantRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::SelectGrantResponse>::Create(channel_.get(), cq, rpcmethod_SelectGrant_, context, request, false);
}

::grpc::Status MilvusService::Stub::GetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::milvus::proto::milvus::GetVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

void MilvusService::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest* request, ::milvus::proto::milvus::GetVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest* request, ::milvus::proto::milvus::GetVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::GetVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetVersionResponse>* MilvusService::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::GetVersionResponse>* MilvusService::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::GetVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, false);
}

::grpc::Status MilvusService::Stub::CheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::milvus::proto::milvus::CheckHealthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void MilvusService::Stub::experimental_async::CheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest* request, ::milvus::proto::milvus::CheckHealthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CheckHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CheckHealthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CheckHealth(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest* request, ::milvus::proto::milvus::CheckHealthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::CheckHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::CheckHealthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CheckHealthResponse>* MilvusService::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::CheckHealthResponse>::Create(channel_.get(), cq, rpcmethod_CheckHealth_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::CheckHealthResponse>* MilvusService::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CheckHealthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::CheckHealthResponse>::Create(channel_.get(), cq, rpcmethod_CheckHealth_, context, request, false);
}

::grpc::Status MilvusService::Stub::CreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateResourceGroup_, context, request, response);
}

void MilvusService::Stub::experimental_async::CreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateResourceGroup_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateResourceGroup_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateResourceGroup_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::CreateResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateResourceGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncCreateResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateResourceGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncCreateResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateResourceGroup_, context, request, false);
}

::grpc::Status MilvusService::Stub::DropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropResourceGroup_, context, request, response);
}

void MilvusService::Stub::experimental_async::DropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropResourceGroup_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropResourceGroup_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropResourceGroup_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DropResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropResourceGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncDropResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropResourceGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncDropResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropResourceGroup_, context, request, false);
}

::grpc::Status MilvusService::Stub::TransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TransferNode_, context, request, response);
}

void MilvusService::Stub::experimental_async::TransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferNode_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::TransferNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferNode_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::TransferNode(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TransferNode_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::TransferNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TransferNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncTransferNodeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_TransferNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncTransferNodeRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_TransferNode_, context, request, false);
}

::grpc::Status MilvusService::Stub::TransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TransferReplica_, context, request, response);
}

void MilvusService::Stub::experimental_async::TransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferReplica_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::TransferReplica(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferReplica_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::TransferReplica(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TransferReplica_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::TransferReplica(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TransferReplica_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncTransferReplicaRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_TransferReplica_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncTransferReplicaRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::TransferReplicaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_TransferReplica_, context, request, false);
}

::grpc::Status MilvusService::Stub::ListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::milvus::proto::milvus::ListResourceGroupsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListResourceGroups_, context, request, response);
}

void MilvusService::Stub::experimental_async::ListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListResourceGroups_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListResourceGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListResourceGroups_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListResourceGroups(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListResourceGroups_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ListResourceGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListResourceGroups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListResourceGroupsResponse>* MilvusService::Stub::AsyncListResourceGroupsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ListResourceGroupsResponse>::Create(channel_.get(), cq, rpcmethod_ListResourceGroups_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListResourceGroupsResponse>* MilvusService::Stub::PrepareAsyncListResourceGroupsRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ListResourceGroupsResponse>::Create(channel_.get(), cq, rpcmethod_ListResourceGroups_, context, request, false);
}

::grpc::Status MilvusService::Stub::DescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DescribeResourceGroup_, context, request, response);
}

void MilvusService::Stub::experimental_async::DescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeResourceGroup_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DescribeResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeResourceGroup_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DescribeResourceGroup(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeResourceGroup_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DescribeResourceGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeResourceGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeResourceGroupResponse>* MilvusService::Stub::AsyncDescribeResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::DescribeResourceGroupResponse>::Create(channel_.get(), cq, rpcmethod_DescribeResourceGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::DescribeResourceGroupResponse>* MilvusService::Stub::PrepareAsyncDescribeResourceGroupRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::DescribeResourceGroupResponse>::Create(channel_.get(), cq, rpcmethod_DescribeResourceGroup_, context, request, false);
}

::grpc::Status MilvusService::Stub::RenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RenameCollection_, context, request, response);
}

void MilvusService::Stub::experimental_async::RenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RenameCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::RenameCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RenameCollection_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::RenameCollection(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RenameCollection_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::RenameCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RenameCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncRenameCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_RenameCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncRenameCollectionRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RenameCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_RenameCollection_, context, request, false);
}

::grpc::Status MilvusService::Stub::ListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::milvus::proto::feder::ListIndexedSegmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListIndexedSegment_, context, request, response);
}

void MilvusService::Stub::experimental_async::ListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListIndexedSegment_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListIndexedSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListIndexedSegment_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListIndexedSegment(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListIndexedSegment_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ListIndexedSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListIndexedSegment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::ListIndexedSegmentResponse>* MilvusService::Stub::AsyncListIndexedSegmentRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::feder::ListIndexedSegmentResponse>::Create(channel_.get(), cq, rpcmethod_ListIndexedSegment_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::ListIndexedSegmentResponse>* MilvusService::Stub::PrepareAsyncListIndexedSegmentRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::feder::ListIndexedSegmentResponse>::Create(channel_.get(), cq, rpcmethod_ListIndexedSegment_, context, request, false);
}

::grpc::Status MilvusService::Stub::DescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DescribeSegmentIndexData_, context, request, response);
}

void MilvusService::Stub::experimental_async::DescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeSegmentIndexData_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DescribeSegmentIndexData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeSegmentIndexData_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DescribeSegmentIndexData(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeSegmentIndexData_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DescribeSegmentIndexData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeSegmentIndexData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>* MilvusService::Stub::AsyncDescribeSegmentIndexDataRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>::Create(channel_.get(), cq, rpcmethod_DescribeSegmentIndexData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>* MilvusService::Stub::PrepareAsyncDescribeSegmentIndexDataRaw(::grpc::ClientContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::feder::DescribeSegmentIndexDataResponse>::Create(channel_.get(), cq, rpcmethod_DescribeSegmentIndexData_, context, request, false);
}

::grpc::Status MilvusService::Stub::Connect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::milvus::proto::milvus::ConnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void MilvusService::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest* request, ::milvus::proto::milvus::ConnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ConnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest* request, ::milvus::proto::milvus::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ConnectResponse>* MilvusService::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ConnectResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ConnectResponse>* MilvusService::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ConnectResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, false);
}

::grpc::Status MilvusService::Stub::AllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::milvus::proto::milvus::AllocTimestampResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AllocTimestamp_, context, request, response);
}

void MilvusService::Stub::experimental_async::AllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest* request, ::milvus::proto::milvus::AllocTimestampResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AllocTimestamp_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::AllocTimestamp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::AllocTimestampResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AllocTimestamp_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::AllocTimestamp(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest* request, ::milvus::proto::milvus::AllocTimestampResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AllocTimestamp_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::AllocTimestamp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::AllocTimestampResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AllocTimestamp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::AllocTimestampResponse>* MilvusService::Stub::AsyncAllocTimestampRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::AllocTimestampResponse>::Create(channel_.get(), cq, rpcmethod_AllocTimestamp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::AllocTimestampResponse>* MilvusService::Stub::PrepareAsyncAllocTimestampRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::AllocTimestampRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::AllocTimestampResponse>::Create(channel_.get(), cq, rpcmethod_AllocTimestamp_, context, request, false);
}

::grpc::Status MilvusService::Stub::CreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateDatabase_, context, request, response);
}

void MilvusService::Stub::experimental_async::CreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDatabase_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDatabase_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::CreateDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDatabase_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDatabase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateDatabase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_CreateDatabase_, context, request, false);
}

::grpc::Status MilvusService::Stub::DropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::milvus::proto::common::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropDatabase_, context, request, response);
}

void MilvusService::Stub::experimental_async::DropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropDatabase_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropDatabase_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::DropDatabase(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropDatabase_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::DropDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::common::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropDatabase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::AsyncDropDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropDatabase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::common::Status>* MilvusService::Stub::PrepareAsyncDropDatabaseRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::common::Status>::Create(channel_.get(), cq, rpcmethod_DropDatabase_, context, request, false);
}

::grpc::Status MilvusService::Stub::ListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::milvus::proto::milvus::ListDatabasesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListDatabases_, context, request, response);
}

void MilvusService::Stub::experimental_async::ListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest* request, ::milvus::proto::milvus::ListDatabasesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListDatabases_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListDatabases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListDatabasesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListDatabases_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ListDatabases(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest* request, ::milvus::proto::milvus::ListDatabasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListDatabases_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ListDatabases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ListDatabasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListDatabases_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListDatabasesResponse>* MilvusService::Stub::AsyncListDatabasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ListDatabasesResponse>::Create(channel_.get(), cq, rpcmethod_ListDatabases_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ListDatabasesResponse>* MilvusService::Stub::PrepareAsyncListDatabasesRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ListDatabasesResponse>::Create(channel_.get(), cq, rpcmethod_ListDatabases_, context, request, false);
}

::grpc::Status MilvusService::Stub::ReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::milvus::proto::milvus::ReplicateMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReplicateMessage_, context, request, response);
}

void MilvusService::Stub::experimental_async::ReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReplicateMessage_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ReplicateMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReplicateMessage_, context, request, response, std::move(f));
}

void MilvusService::Stub::experimental_async::ReplicateMessage(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReplicateMessage_, context, request, response, reactor);
}

void MilvusService::Stub::experimental_async::ReplicateMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::ReplicateMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReplicateMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ReplicateMessageResponse>* MilvusService::Stub::AsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ReplicateMessageResponse>::Create(channel_.get(), cq, rpcmethod_ReplicateMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::ReplicateMessageResponse>* MilvusService::Stub::PrepareAsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::ReplicateMessageResponse>::Create(channel_.get(), cq, rpcmethod_ReplicateMessage_, context, request, false);
}

MilvusService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::CreateCollectionRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::CreateCollectionRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->CreateCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DropCollectionRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DropCollectionRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->DropCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::HasCollectionRequest, ::milvus::proto::milvus::BoolResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::HasCollectionRequest* req,
             ::milvus::proto::milvus::BoolResponse* resp) {
               return service->HasCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::LoadCollectionRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::LoadCollectionRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->LoadCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ReleaseCollectionRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ReleaseCollectionRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->ReleaseCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DescribeCollectionRequest, ::milvus::proto::milvus::DescribeCollectionResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DescribeCollectionRequest* req,
             ::milvus::proto::milvus::DescribeCollectionResponse* resp) {
               return service->DescribeCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetCollectionStatisticsRequest, ::milvus::proto::milvus::GetCollectionStatisticsResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetCollectionStatisticsRequest* req,
             ::milvus::proto::milvus::GetCollectionStatisticsResponse* resp) {
               return service->GetCollectionStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ShowCollectionsRequest, ::milvus::proto::milvus::ShowCollectionsResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ShowCollectionsRequest* req,
             ::milvus::proto::milvus::ShowCollectionsResponse* resp) {
               return service->ShowCollections(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::AlterCollectionRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::AlterCollectionRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->AlterCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::CreatePartitionRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::CreatePartitionRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->CreatePartition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DropPartitionRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DropPartitionRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->DropPartition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::HasPartitionRequest, ::milvus::proto::milvus::BoolResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::HasPartitionRequest* req,
             ::milvus::proto::milvus::BoolResponse* resp) {
               return service->HasPartition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::LoadPartitionsRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::LoadPartitionsRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->LoadPartitions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ReleasePartitionsRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ReleasePartitionsRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->ReleasePartitions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetPartitionStatisticsRequest, ::milvus::proto::milvus::GetPartitionStatisticsResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetPartitionStatisticsRequest* req,
             ::milvus::proto::milvus::GetPartitionStatisticsResponse* resp) {
               return service->GetPartitionStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ShowPartitionsRequest, ::milvus::proto::milvus::ShowPartitionsResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ShowPartitionsRequest* req,
             ::milvus::proto::milvus::ShowPartitionsResponse* resp) {
               return service->ShowPartitions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetLoadingProgressRequest, ::milvus::proto::milvus::GetLoadingProgressResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetLoadingProgressRequest* req,
             ::milvus::proto::milvus::GetLoadingProgressResponse* resp) {
               return service->GetLoadingProgress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetLoadStateRequest, ::milvus::proto::milvus::GetLoadStateResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetLoadStateRequest* req,
             ::milvus::proto::milvus::GetLoadStateResponse* resp) {
               return service->GetLoadState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::CreateAliasRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::CreateAliasRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->CreateAlias(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DropAliasRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DropAliasRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->DropAlias(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::AlterAliasRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::AlterAliasRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->AlterAlias(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DescribeAliasRequest, ::milvus::proto::milvus::DescribeAliasResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DescribeAliasRequest* req,
             ::milvus::proto::milvus::DescribeAliasResponse* resp) {
               return service->DescribeAlias(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ListAliasesRequest, ::milvus::proto::milvus::ListAliasesResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ListAliasesRequest* req,
             ::milvus::proto::milvus::ListAliasesResponse* resp) {
               return service->ListAliases(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::CreateIndexRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::CreateIndexRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->CreateIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::AlterIndexRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::AlterIndexRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->AlterIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DescribeIndexRequest, ::milvus::proto::milvus::DescribeIndexResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DescribeIndexRequest* req,
             ::milvus::proto::milvus::DescribeIndexResponse* resp) {
               return service->DescribeIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetIndexStatisticsRequest, ::milvus::proto::milvus::GetIndexStatisticsResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetIndexStatisticsRequest* req,
             ::milvus::proto::milvus::GetIndexStatisticsResponse* resp) {
               return service->GetIndexStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetIndexStateRequest, ::milvus::proto::milvus::GetIndexStateResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetIndexStateRequest* req,
             ::milvus::proto::milvus::GetIndexStateResponse* resp) {
               return service->GetIndexState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetIndexBuildProgressRequest, ::milvus::proto::milvus::GetIndexBuildProgressResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetIndexBuildProgressRequest* req,
             ::milvus::proto::milvus::GetIndexBuildProgressResponse* resp) {
               return service->GetIndexBuildProgress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DropIndexRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DropIndexRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->DropIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::InsertRequest, ::milvus::proto::milvus::MutationResult>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::InsertRequest* req,
             ::milvus::proto::milvus::MutationResult* resp) {
               return service->Insert(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DeleteRequest, ::milvus::proto::milvus::MutationResult>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DeleteRequest* req,
             ::milvus::proto::milvus::MutationResult* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::UpsertRequest, ::milvus::proto::milvus::MutationResult>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::UpsertRequest* req,
             ::milvus::proto::milvus::MutationResult* resp) {
               return service->Upsert(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::SearchRequest, ::milvus::proto::milvus::SearchResults>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::SearchRequest* req,
             ::milvus::proto::milvus::SearchResults* resp) {
               return service->Search(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::SearchRequestV2, ::milvus::proto::milvus::SearchResults>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::SearchRequestV2* req,
             ::milvus::proto::milvus::SearchResults* resp) {
               return service->SearchV2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::FlushRequest, ::milvus::proto::milvus::FlushResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::FlushRequest* req,
             ::milvus::proto::milvus::FlushResponse* resp) {
               return service->Flush(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::QueryRequest, ::milvus::proto::milvus::QueryResults>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::QueryRequest* req,
             ::milvus::proto::milvus::QueryResults* resp) {
               return service->Query(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::CalcDistanceRequest, ::milvus::proto::milvus::CalcDistanceResults>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::CalcDistanceRequest* req,
             ::milvus::proto::milvus::CalcDistanceResults* resp) {
               return service->CalcDistance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::FlushAllRequest, ::milvus::proto::milvus::FlushAllResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::FlushAllRequest* req,
             ::milvus::proto::milvus::FlushAllResponse* resp) {
               return service->FlushAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetFlushStateRequest, ::milvus::proto::milvus::GetFlushStateResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetFlushStateRequest* req,
             ::milvus::proto::milvus::GetFlushStateResponse* resp) {
               return service->GetFlushState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetFlushAllStateRequest, ::milvus::proto::milvus::GetFlushAllStateResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetFlushAllStateRequest* req,
             ::milvus::proto::milvus::GetFlushAllStateResponse* resp) {
               return service->GetFlushAllState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetPersistentSegmentInfoRequest, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* req,
             ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* resp) {
               return service->GetPersistentSegmentInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetQuerySegmentInfoRequest, ::milvus::proto::milvus::GetQuerySegmentInfoResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* req,
             ::milvus::proto::milvus::GetQuerySegmentInfoResponse* resp) {
               return service->GetQuerySegmentInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetReplicasRequest, ::milvus::proto::milvus::GetReplicasResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetReplicasRequest* req,
             ::milvus::proto::milvus::GetReplicasResponse* resp) {
               return service->GetReplicas(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DummyRequest, ::milvus::proto::milvus::DummyResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DummyRequest* req,
             ::milvus::proto::milvus::DummyResponse* resp) {
               return service->Dummy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::RegisterLinkRequest* req,
             ::milvus::proto::milvus::RegisterLinkResponse* resp) {
               return service->RegisterLink(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetMetricsRequest, ::milvus::proto::milvus::GetMetricsResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetMetricsRequest* req,
             ::milvus::proto::milvus::GetMetricsResponse* resp) {
               return service->GetMetrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetComponentStatesRequest, ::milvus::proto::milvus::ComponentStates>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetComponentStatesRequest* req,
             ::milvus::proto::milvus::ComponentStates* resp) {
               return service->GetComponentStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::LoadBalanceRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::LoadBalanceRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->LoadBalance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetCompactionStateRequest, ::milvus::proto::milvus::GetCompactionStateResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetCompactionStateRequest* req,
             ::milvus::proto::milvus::GetCompactionStateResponse* resp) {
               return service->GetCompactionState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ManualCompactionRequest, ::milvus::proto::milvus::ManualCompactionResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ManualCompactionRequest* req,
             ::milvus::proto::milvus::ManualCompactionResponse* resp) {
               return service->ManualCompaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetCompactionPlansRequest, ::milvus::proto::milvus::GetCompactionPlansResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetCompactionPlansRequest* req,
             ::milvus::proto::milvus::GetCompactionPlansResponse* resp) {
               return service->GetCompactionStateWithPlans(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ImportRequest, ::milvus::proto::milvus::ImportResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ImportRequest* req,
             ::milvus::proto::milvus::ImportResponse* resp) {
               return service->Import(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetImportStateRequest, ::milvus::proto::milvus::GetImportStateResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetImportStateRequest* req,
             ::milvus::proto::milvus::GetImportStateResponse* resp) {
               return service->GetImportState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ListImportTasksRequest, ::milvus::proto::milvus::ListImportTasksResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ListImportTasksRequest* req,
             ::milvus::proto::milvus::ListImportTasksResponse* resp) {
               return service->ListImportTasks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::CreateCredentialRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::CreateCredentialRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->CreateCredential(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::UpdateCredentialRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::UpdateCredentialRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->UpdateCredential(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DeleteCredentialRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DeleteCredentialRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->DeleteCredential(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ListCredUsersRequest, ::milvus::proto::milvus::ListCredUsersResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ListCredUsersRequest* req,
             ::milvus::proto::milvus::ListCredUsersResponse* resp) {
               return service->ListCredUsers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::CreateRoleRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::CreateRoleRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->CreateRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DropRoleRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DropRoleRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->DropRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::OperateUserRoleRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::OperateUserRoleRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->OperateUserRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::SelectRoleRequest, ::milvus::proto::milvus::SelectRoleResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::SelectRoleRequest* req,
             ::milvus::proto::milvus::SelectRoleResponse* resp) {
               return service->SelectRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::SelectUserRequest, ::milvus::proto::milvus::SelectUserResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::SelectUserRequest* req,
             ::milvus::proto::milvus::SelectUserResponse* resp) {
               return service->SelectUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[64],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::OperatePrivilegeRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::OperatePrivilegeRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->OperatePrivilege(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[65],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::SelectGrantRequest, ::milvus::proto::milvus::SelectGrantResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::SelectGrantRequest* req,
             ::milvus::proto::milvus::SelectGrantResponse* resp) {
               return service->SelectGrant(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[66],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::GetVersionRequest, ::milvus::proto::milvus::GetVersionResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::GetVersionRequest* req,
             ::milvus::proto::milvus::GetVersionResponse* resp) {
               return service->GetVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[67],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::CheckHealthRequest, ::milvus::proto::milvus::CheckHealthResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::CheckHealthRequest* req,
             ::milvus::proto::milvus::CheckHealthResponse* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[68],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::CreateResourceGroupRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::CreateResourceGroupRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->CreateResourceGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[69],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DropResourceGroupRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DropResourceGroupRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->DropResourceGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[70],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::TransferNodeRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::TransferNodeRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->TransferNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[71],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::TransferReplicaRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::TransferReplicaRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->TransferReplica(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[72],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ListResourceGroupsRequest, ::milvus::proto::milvus::ListResourceGroupsResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ListResourceGroupsRequest* req,
             ::milvus::proto::milvus::ListResourceGroupsResponse* resp) {
               return service->ListResourceGroups(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[73],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DescribeResourceGroupRequest, ::milvus::proto::milvus::DescribeResourceGroupResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DescribeResourceGroupRequest* req,
             ::milvus::proto::milvus::DescribeResourceGroupResponse* resp) {
               return service->DescribeResourceGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[74],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::RenameCollectionRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::RenameCollectionRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->RenameCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[75],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::feder::ListIndexedSegmentRequest, ::milvus::proto::feder::ListIndexedSegmentResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::feder::ListIndexedSegmentRequest* req,
             ::milvus::proto::feder::ListIndexedSegmentResponse* resp) {
               return service->ListIndexedSegment(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[76],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::feder::DescribeSegmentIndexDataRequest, ::milvus::proto::feder::DescribeSegmentIndexDataResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* req,
             ::milvus::proto::feder::DescribeSegmentIndexDataResponse* resp) {
               return service->DescribeSegmentIndexData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[77],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ConnectRequest, ::milvus::proto::milvus::ConnectResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ConnectRequest* req,
             ::milvus::proto::milvus::ConnectResponse* resp) {
               return service->Connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[78],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::AllocTimestampRequest, ::milvus::proto::milvus::AllocTimestampResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::AllocTimestampRequest* req,
             ::milvus::proto::milvus::AllocTimestampResponse* resp) {
               return service->AllocTimestamp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[79],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::CreateDatabaseRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::CreateDatabaseRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->CreateDatabase(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[80],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::DropDatabaseRequest, ::milvus::proto::common::Status>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::DropDatabaseRequest* req,
             ::milvus::proto::common::Status* resp) {
               return service->DropDatabase(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[81],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ListDatabasesRequest, ::milvus::proto::milvus::ListDatabasesResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ListDatabasesRequest* req,
             ::milvus::proto::milvus::ListDatabasesResponse* resp) {
               return service->ListDatabases(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MilvusService_method_names[82],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MilvusService::Service, ::milvus::proto::milvus::ReplicateMessageRequest, ::milvus::proto::milvus::ReplicateMessageResponse>(
          [](MilvusService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::ReplicateMessageRequest* req,
             ::milvus::proto::milvus::ReplicateMessageResponse* resp) {
               return service->ReplicateMessage(ctx, req, resp);
             }, this)));
}

MilvusService::Service::~Service() {
}

::grpc::Status MilvusService::Service::CreateCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateCollectionRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DropCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropCollectionRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::HasCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::HasCollectionRequest* request, ::milvus::proto::milvus::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::LoadCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::LoadCollectionRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ReleaseCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::ReleaseCollectionRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DescribeCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::DescribeCollectionRequest* request, ::milvus::proto::milvus::DescribeCollectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetCollectionStatistics(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetCollectionStatisticsRequest* request, ::milvus::proto::milvus::GetCollectionStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ShowCollections(::grpc::ServerContext* context, const ::milvus::proto::milvus::ShowCollectionsRequest* request, ::milvus::proto::milvus::ShowCollectionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::AlterCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::AlterCollectionRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::CreatePartition(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreatePartitionRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DropPartition(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropPartitionRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::HasPartition(::grpc::ServerContext* context, const ::milvus::proto::milvus::HasPartitionRequest* request, ::milvus::proto::milvus::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::LoadPartitions(::grpc::ServerContext* context, const ::milvus::proto::milvus::LoadPartitionsRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ReleasePartitions(::grpc::ServerContext* context, const ::milvus::proto::milvus::ReleasePartitionsRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetPartitionStatistics(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetPartitionStatisticsRequest* request, ::milvus::proto::milvus::GetPartitionStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ShowPartitions(::grpc::ServerContext* context, const ::milvus::proto::milvus::ShowPartitionsRequest* request, ::milvus::proto::milvus::ShowPartitionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetLoadingProgress(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetLoadingProgressRequest* request, ::milvus::proto::milvus::GetLoadingProgressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetLoadState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetLoadStateRequest* request, ::milvus::proto::milvus::GetLoadStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::CreateAlias(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateAliasRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DropAlias(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropAliasRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::AlterAlias(::grpc::ServerContext* context, const ::milvus::proto::milvus::AlterAliasRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DescribeAlias(::grpc::ServerContext* context, const ::milvus::proto::milvus::DescribeAliasRequest* request, ::milvus::proto::milvus::DescribeAliasResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ListAliases(::grpc::ServerContext* context, const ::milvus::proto::milvus::ListAliasesRequest* request, ::milvus::proto::milvus::ListAliasesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::CreateIndex(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateIndexRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::AlterIndex(::grpc::ServerContext* context, const ::milvus::proto::milvus::AlterIndexRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DescribeIndex(::grpc::ServerContext* context, const ::milvus::proto::milvus::DescribeIndexRequest* request, ::milvus::proto::milvus::DescribeIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetIndexStatistics(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetIndexStatisticsRequest* request, ::milvus::proto::milvus::GetIndexStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetIndexState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetIndexStateRequest* request, ::milvus::proto::milvus::GetIndexStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetIndexBuildProgress(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetIndexBuildProgressRequest* request, ::milvus::proto::milvus::GetIndexBuildProgressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DropIndex(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropIndexRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::Insert(::grpc::ServerContext* context, const ::milvus::proto::milvus::InsertRequest* request, ::milvus::proto::milvus::MutationResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::Delete(::grpc::ServerContext* context, const ::milvus::proto::milvus::DeleteRequest* request, ::milvus::proto::milvus::MutationResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::Upsert(::grpc::ServerContext* context, const ::milvus::proto::milvus::UpsertRequest* request, ::milvus::proto::milvus::MutationResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::Search(::grpc::ServerContext* context, const ::milvus::proto::milvus::SearchRequest* request, ::milvus::proto::milvus::SearchResults* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::SearchV2(::grpc::ServerContext* context, const ::milvus::proto::milvus::SearchRequestV2* request, ::milvus::proto::milvus::SearchResults* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::Flush(::grpc::ServerContext* context, const ::milvus::proto::milvus::FlushRequest* request, ::milvus::proto::milvus::FlushResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::Query(::grpc::ServerContext* context, const ::milvus::proto::milvus::QueryRequest* request, ::milvus::proto::milvus::QueryResults* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::CalcDistance(::grpc::ServerContext* context, const ::milvus::proto::milvus::CalcDistanceRequest* request, ::milvus::proto::milvus::CalcDistanceResults* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::FlushAll(::grpc::ServerContext* context, const ::milvus::proto::milvus::FlushAllRequest* request, ::milvus::proto::milvus::FlushAllResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetFlushState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetFlushStateRequest* request, ::milvus::proto::milvus::GetFlushStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetFlushAllState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetFlushAllStateRequest* request, ::milvus::proto::milvus::GetFlushAllStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetPersistentSegmentInfo(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* request, ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetQuerySegmentInfo(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetQuerySegmentInfoRequest* request, ::milvus::proto::milvus::GetQuerySegmentInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetReplicas(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetReplicasRequest* request, ::milvus::proto::milvus::GetReplicasResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::Dummy(::grpc::ServerContext* context, const ::milvus::proto::milvus::DummyRequest* request, ::milvus::proto::milvus::DummyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::RegisterLink(::grpc::ServerContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetMetrics(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetMetricsRequest* request, ::milvus::proto::milvus::GetMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetComponentStates(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetComponentStatesRequest* request, ::milvus::proto::milvus::ComponentStates* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::LoadBalance(::grpc::ServerContext* context, const ::milvus::proto::milvus::LoadBalanceRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetCompactionState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetCompactionStateRequest* request, ::milvus::proto::milvus::GetCompactionStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ManualCompaction(::grpc::ServerContext* context, const ::milvus::proto::milvus::ManualCompactionRequest* request, ::milvus::proto::milvus::ManualCompactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetCompactionStateWithPlans(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetCompactionPlansRequest* request, ::milvus::proto::milvus::GetCompactionPlansResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::Import(::grpc::ServerContext* context, const ::milvus::proto::milvus::ImportRequest* request, ::milvus::proto::milvus::ImportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetImportState(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetImportStateRequest* request, ::milvus::proto::milvus::GetImportStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ListImportTasks(::grpc::ServerContext* context, const ::milvus::proto::milvus::ListImportTasksRequest* request, ::milvus::proto::milvus::ListImportTasksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::CreateCredential(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateCredentialRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::UpdateCredential(::grpc::ServerContext* context, const ::milvus::proto::milvus::UpdateCredentialRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DeleteCredential(::grpc::ServerContext* context, const ::milvus::proto::milvus::DeleteCredentialRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ListCredUsers(::grpc::ServerContext* context, const ::milvus::proto::milvus::ListCredUsersRequest* request, ::milvus::proto::milvus::ListCredUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::CreateRole(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateRoleRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DropRole(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropRoleRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::OperateUserRole(::grpc::ServerContext* context, const ::milvus::proto::milvus::OperateUserRoleRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::SelectRole(::grpc::ServerContext* context, const ::milvus::proto::milvus::SelectRoleRequest* request, ::milvus::proto::milvus::SelectRoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::SelectUser(::grpc::ServerContext* context, const ::milvus::proto::milvus::SelectUserRequest* request, ::milvus::proto::milvus::SelectUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::OperatePrivilege(::grpc::ServerContext* context, const ::milvus::proto::milvus::OperatePrivilegeRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::SelectGrant(::grpc::ServerContext* context, const ::milvus::proto::milvus::SelectGrantRequest* request, ::milvus::proto::milvus::SelectGrantResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::GetVersion(::grpc::ServerContext* context, const ::milvus::proto::milvus::GetVersionRequest* request, ::milvus::proto::milvus::GetVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::CheckHealth(::grpc::ServerContext* context, const ::milvus::proto::milvus::CheckHealthRequest* request, ::milvus::proto::milvus::CheckHealthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::CreateResourceGroup(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateResourceGroupRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DropResourceGroup(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropResourceGroupRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::TransferNode(::grpc::ServerContext* context, const ::milvus::proto::milvus::TransferNodeRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::TransferReplica(::grpc::ServerContext* context, const ::milvus::proto::milvus::TransferReplicaRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ListResourceGroups(::grpc::ServerContext* context, const ::milvus::proto::milvus::ListResourceGroupsRequest* request, ::milvus::proto::milvus::ListResourceGroupsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DescribeResourceGroup(::grpc::ServerContext* context, const ::milvus::proto::milvus::DescribeResourceGroupRequest* request, ::milvus::proto::milvus::DescribeResourceGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::RenameCollection(::grpc::ServerContext* context, const ::milvus::proto::milvus::RenameCollectionRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ListIndexedSegment(::grpc::ServerContext* context, const ::milvus::proto::feder::ListIndexedSegmentRequest* request, ::milvus::proto::feder::ListIndexedSegmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DescribeSegmentIndexData(::grpc::ServerContext* context, const ::milvus::proto::feder::DescribeSegmentIndexDataRequest* request, ::milvus::proto::feder::DescribeSegmentIndexDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::Connect(::grpc::ServerContext* context, const ::milvus::proto::milvus::ConnectRequest* request, ::milvus::proto::milvus::ConnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::AllocTimestamp(::grpc::ServerContext* context, const ::milvus::proto::milvus::AllocTimestampRequest* request, ::milvus::proto::milvus::AllocTimestampResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::CreateDatabase(::grpc::ServerContext* context, const ::milvus::proto::milvus::CreateDatabaseRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::DropDatabase(::grpc::ServerContext* context, const ::milvus::proto::milvus::DropDatabaseRequest* request, ::milvus::proto::common::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ListDatabases(::grpc::ServerContext* context, const ::milvus::proto::milvus::ListDatabasesRequest* request, ::milvus::proto::milvus::ListDatabasesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MilvusService::Service::ReplicateMessage(::grpc::ServerContext* context, const ::milvus::proto::milvus::ReplicateMessageRequest* request, ::milvus::proto::milvus::ReplicateMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ProxyService_method_names[] = {
  "/milvus.proto.milvus.ProxyService/RegisterLink",
};

std::unique_ptr< ProxyService::Stub> ProxyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProxyService::Stub> stub(new ProxyService::Stub(channel));
  return stub;
}

ProxyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterLink_(ProxyService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProxyService::Stub::RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::milvus::proto::milvus::RegisterLinkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterLink_, context, request, response);
}

void ProxyService::Stub::experimental_async::RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterLink_, context, request, response, std::move(f));
}

void ProxyService::Stub::experimental_async::RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterLink_, context, request, response, std::move(f));
}

void ProxyService::Stub::experimental_async::RegisterLink(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterLink_, context, request, response, reactor);
}

void ProxyService::Stub::experimental_async::RegisterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::milvus::proto::milvus::RegisterLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterLink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>* ProxyService::Stub::AsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::RegisterLinkResponse>::Create(channel_.get(), cq, rpcmethod_RegisterLink_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::milvus::proto::milvus::RegisterLinkResponse>* ProxyService::Stub::PrepareAsyncRegisterLinkRaw(::grpc::ClientContext* context, const ::milvus::proto::milvus::RegisterLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::milvus::proto::milvus::RegisterLinkResponse>::Create(channel_.get(), cq, rpcmethod_RegisterLink_, context, request, false);
}

ProxyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProxyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProxyService::Service, ::milvus::proto::milvus::RegisterLinkRequest, ::milvus::proto::milvus::RegisterLinkResponse>(
          [](ProxyService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::milvus::proto::milvus::RegisterLinkRequest* req,
             ::milvus::proto::milvus::RegisterLinkResponse* resp) {
               return service->RegisterLink(ctx, req, resp);
             }, this)));
}

ProxyService::Service::~Service() {
}

::grpc::Status ProxyService::Service::RegisterLink(::grpc::ServerContext* context, const ::milvus::proto::milvus::RegisterLinkRequest* request, ::milvus::proto::milvus::RegisterLinkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace milvus
}  // namespace proto
}  // namespace milvus

