// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientInfo_ReservedEntry_DoNotUse_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MsgBase_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBase_PropertiesEntry_DoNotUse_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaceholderValue_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivilegeExt_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicateInfo_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInfo_ReservedEntry_DoNotUse_common_2eproto;
namespace milvus {
namespace proto {
namespace common {
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class KeyValuePairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValuePair> _instance;
} _KeyValuePair_default_instance_;
class KeyDataPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyDataPair> _instance;
} _KeyDataPair_default_instance_;
class BlobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Blob> _instance;
} _Blob_default_instance_;
class PlaceholderValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceholderValue> _instance;
} _PlaceholderValue_default_instance_;
class PlaceholderGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceholderGroup> _instance;
} _PlaceholderGroup_default_instance_;
class AddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Address> _instance;
} _Address_default_instance_;
class MsgBase_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBase_PropertiesEntry_DoNotUse> _instance;
} _MsgBase_PropertiesEntry_DoNotUse_default_instance_;
class MsgBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBase> _instance;
} _MsgBase_default_instance_;
class ReplicateInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicateInfo> _instance;
} _ReplicateInfo_default_instance_;
class MsgHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgHeader> _instance;
} _MsgHeader_default_instance_;
class DMLMsgHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DMLMsgHeader> _instance;
} _DMLMsgHeader_default_instance_;
class PrivilegeExtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrivilegeExt> _instance;
} _PrivilegeExt_default_instance_;
class SegmentStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentStats> _instance;
} _SegmentStats_default_instance_;
class ClientInfo_ReservedEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientInfo_ReservedEntry_DoNotUse> _instance;
} _ClientInfo_ReservedEntry_DoNotUse_default_instance_;
class ClientInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientInfo> _instance;
} _ClientInfo_default_instance_;
class ServerInfo_ReservedEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfo_ReservedEntry_DoNotUse> _instance;
} _ServerInfo_ReservedEntry_DoNotUse_default_instance_;
class ServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfo> _instance;
} _ServerInfo_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace milvus
static void InitDefaultsscc_info_Address_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_Address_default_instance_;
    new (ptr) ::milvus::proto::common::Address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::Address::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Address_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Address_common_2eproto}, {}};

static void InitDefaultsscc_info_Blob_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_Blob_default_instance_;
    new (ptr) ::milvus::proto::common::Blob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::Blob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Blob_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Blob_common_2eproto}, {}};

static void InitDefaultsscc_info_ClientInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_ClientInfo_default_instance_;
    new (ptr) ::milvus::proto::common::ClientInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::ClientInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientInfo_common_2eproto}, {
      &scc_info_ClientInfo_ReservedEntry_DoNotUse_common_2eproto.base,}};

static void InitDefaultsscc_info_ClientInfo_ReservedEntry_DoNotUse_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_ClientInfo_ReservedEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::common::ClientInfo_ReservedEntry_DoNotUse();
  }
  ::milvus::proto::common::ClientInfo_ReservedEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientInfo_ReservedEntry_DoNotUse_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientInfo_ReservedEntry_DoNotUse_common_2eproto}, {}};

static void InitDefaultsscc_info_DMLMsgHeader_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_DMLMsgHeader_default_instance_;
    new (ptr) ::milvus::proto::common::DMLMsgHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::DMLMsgHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DMLMsgHeader_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DMLMsgHeader_common_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_KeyDataPair_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_KeyDataPair_default_instance_;
    new (ptr) ::milvus::proto::common::KeyDataPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::KeyDataPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyDataPair_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyDataPair_common_2eproto}, {}};

static void InitDefaultsscc_info_KeyValuePair_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_KeyValuePair_default_instance_;
    new (ptr) ::milvus::proto::common::KeyValuePair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::KeyValuePair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValuePair_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyValuePair_common_2eproto}, {}};

static void InitDefaultsscc_info_MsgBase_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_MsgBase_default_instance_;
    new (ptr) ::milvus::proto::common::MsgBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::MsgBase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MsgBase_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MsgBase_common_2eproto}, {
      &scc_info_MsgBase_PropertiesEntry_DoNotUse_common_2eproto.base,
      &scc_info_ReplicateInfo_common_2eproto.base,}};

static void InitDefaultsscc_info_MsgBase_PropertiesEntry_DoNotUse_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_MsgBase_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::common::MsgBase_PropertiesEntry_DoNotUse();
  }
  ::milvus::proto::common::MsgBase_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBase_PropertiesEntry_DoNotUse_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgBase_PropertiesEntry_DoNotUse_common_2eproto}, {}};

static void InitDefaultsscc_info_MsgHeader_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_MsgHeader_default_instance_;
    new (ptr) ::milvus::proto::common::MsgHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::MsgHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgHeader_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgHeader_common_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_PlaceholderGroup_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_PlaceholderGroup_default_instance_;
    new (ptr) ::milvus::proto::common::PlaceholderGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::PlaceholderGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceholderGroup_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlaceholderGroup_common_2eproto}, {
      &scc_info_PlaceholderValue_common_2eproto.base,}};

static void InitDefaultsscc_info_PlaceholderValue_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_PlaceholderValue_default_instance_;
    new (ptr) ::milvus::proto::common::PlaceholderValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::PlaceholderValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaceholderValue_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlaceholderValue_common_2eproto}, {}};

static void InitDefaultsscc_info_PrivilegeExt_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_PrivilegeExt_default_instance_;
    new (ptr) ::milvus::proto::common::PrivilegeExt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::PrivilegeExt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivilegeExt_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrivilegeExt_common_2eproto}, {}};

static void InitDefaultsscc_info_ReplicateInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_ReplicateInfo_default_instance_;
    new (ptr) ::milvus::proto::common::ReplicateInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::ReplicateInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicateInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplicateInfo_common_2eproto}, {}};

static void InitDefaultsscc_info_SegmentStats_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_SegmentStats_default_instance_;
    new (ptr) ::milvus::proto::common::SegmentStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::SegmentStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentStats_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SegmentStats_common_2eproto}, {}};

static void InitDefaultsscc_info_ServerInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_ServerInfo_default_instance_;
    new (ptr) ::milvus::proto::common::ServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::ServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerInfo_common_2eproto}, {
      &scc_info_ServerInfo_ReservedEntry_DoNotUse_common_2eproto.base,}};

static void InitDefaultsscc_info_ServerInfo_ReservedEntry_DoNotUse_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_ServerInfo_ReservedEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::common::ServerInfo_ReservedEntry_DoNotUse();
  }
  ::milvus::proto::common::ServerInfo_ReservedEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInfo_ReservedEntry_DoNotUse_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerInfo_ReservedEntry_DoNotUse_common_2eproto}, {}};

static void InitDefaultsscc_info_Status_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::common::_Status_default_instance_;
    new (ptr) ::milvus::proto::common::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::common::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Status_common_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::Status, error_code_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::Status, reason_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::Status, code_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::Status, retriable_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::Status, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::KeyValuePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::KeyValuePair, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::KeyValuePair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::KeyDataPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::KeyDataPair, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::KeyDataPair, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::Blob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::Blob, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::PlaceholderValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::PlaceholderValue, tag_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::PlaceholderValue, type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::PlaceholderValue, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::PlaceholderGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::PlaceholderGroup, placeholders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::Address, ip_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::Address, port_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase, msg_type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase, msgid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase, timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase, sourceid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase, targetid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase, properties_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgBase, replicateinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ReplicateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ReplicateInfo, isreplicate_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ReplicateInfo, msgtimestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::MsgHeader, base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::DMLMsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::DMLMsgHeader, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::DMLMsgHeader, shardname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::PrivilegeExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::PrivilegeExt, object_type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::PrivilegeExt, object_privilege_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::PrivilegeExt, object_name_index_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::PrivilegeExt, object_name_indexs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::SegmentStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::SegmentStats, segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::SegmentStats, numrows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ClientInfo_ReservedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ClientInfo_ReservedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ClientInfo_ReservedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ClientInfo_ReservedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ClientInfo, sdk_type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ClientInfo, sdk_version_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ClientInfo, local_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ClientInfo, user_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ClientInfo, host_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ClientInfo, reserved_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ServerInfo_ReservedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ServerInfo_ReservedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ServerInfo_ReservedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ServerInfo_ReservedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ServerInfo, build_tags_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ServerInfo, build_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ServerInfo, git_commit_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ServerInfo, go_version_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ServerInfo, deploy_mode_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::common::ServerInfo, reserved_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::milvus::proto::common::Status)},
  { 10, -1, sizeof(::milvus::proto::common::KeyValuePair)},
  { 17, -1, sizeof(::milvus::proto::common::KeyDataPair)},
  { 24, -1, sizeof(::milvus::proto::common::Blob)},
  { 30, -1, sizeof(::milvus::proto::common::PlaceholderValue)},
  { 38, -1, sizeof(::milvus::proto::common::PlaceholderGroup)},
  { 44, -1, sizeof(::milvus::proto::common::Address)},
  { 51, 58, sizeof(::milvus::proto::common::MsgBase_PropertiesEntry_DoNotUse)},
  { 60, -1, sizeof(::milvus::proto::common::MsgBase)},
  { 72, -1, sizeof(::milvus::proto::common::ReplicateInfo)},
  { 79, -1, sizeof(::milvus::proto::common::MsgHeader)},
  { 85, -1, sizeof(::milvus::proto::common::DMLMsgHeader)},
  { 92, -1, sizeof(::milvus::proto::common::PrivilegeExt)},
  { 101, -1, sizeof(::milvus::proto::common::SegmentStats)},
  { 108, 115, sizeof(::milvus::proto::common::ClientInfo_ReservedEntry_DoNotUse)},
  { 117, -1, sizeof(::milvus::proto::common::ClientInfo)},
  { 128, 135, sizeof(::milvus::proto::common::ServerInfo_ReservedEntry_DoNotUse)},
  { 137, -1, sizeof(::milvus::proto::common::ServerInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_KeyValuePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_KeyDataPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_Blob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_PlaceholderValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_PlaceholderGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_MsgBase_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_MsgBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_ReplicateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_MsgHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_DMLMsgHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_PrivilegeExt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_SegmentStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_ClientInfo_ReservedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_ClientInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_ServerInfo_ReservedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::common::_ServerInfo_default_instance_),
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\023milvus.proto.common\032 goo"
  "gle/protobuf/descriptor.proto\"\201\001\n\006Status"
  "\0226\n\nerror_code\030\001 \001(\0162\036.milvus.proto.comm"
  "on.ErrorCodeB\002\030\001\022\016\n\006reason\030\002 \001(\t\022\014\n\004code"
  "\030\003 \001(\005\022\021\n\tretriable\030\004 \001(\010\022\016\n\006detail\030\005 \001("
  "\t\"*\n\014KeyValuePair\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t\"(\n\013KeyDataPair\022\013\n\003key\030\001 \001(\t\022\014\n\004dat"
  "a\030\002 \001(\014\"\025\n\004Blob\022\r\n\005value\030\001 \001(\014\"c\n\020Placeh"
  "olderValue\022\013\n\003tag\030\001 \001(\t\0222\n\004type\030\002 \001(\0162$."
  "milvus.proto.common.PlaceholderType\022\016\n\006v"
  "alues\030\003 \003(\014\"O\n\020PlaceholderGroup\022;\n\014place"
  "holders\030\001 \003(\0132%.milvus.proto.common.Plac"
  "eholderValue\"#\n\007Address\022\n\n\002ip\030\001 \001(\t\022\014\n\004p"
  "ort\030\002 \001(\003\"\257\002\n\007MsgBase\022.\n\010msg_type\030\001 \001(\0162"
  "\034.milvus.proto.common.MsgType\022\r\n\005msgID\030\002"
  " \001(\003\022\021\n\ttimestamp\030\003 \001(\004\022\020\n\010sourceID\030\004 \001("
  "\003\022\020\n\010targetID\030\005 \001(\003\022@\n\nproperties\030\006 \003(\0132"
  ",.milvus.proto.common.MsgBase.Properties"
  "Entry\0229\n\rreplicateInfo\030\007 \001(\0132\".milvus.pr"
  "oto.common.ReplicateInfo\0321\n\017PropertiesEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\":\n\rR"
  "eplicateInfo\022\023\n\013isReplicate\030\001 \001(\010\022\024\n\014msg"
  "Timestamp\030\002 \001(\004\"7\n\tMsgHeader\022*\n\004base\030\001 \001"
  "(\0132\034.milvus.proto.common.MsgBase\"M\n\014DMLM"
  "sgHeader\022*\n\004base\030\001 \001(\0132\034.milvus.proto.co"
  "mmon.MsgBase\022\021\n\tshardName\030\002 \001(\t\"\273\001\n\014Priv"
  "ilegeExt\0224\n\013object_type\030\001 \001(\0162\037.milvus.p"
  "roto.common.ObjectType\022>\n\020object_privile"
  "ge\030\002 \001(\0162$.milvus.proto.common.ObjectPri"
  "vilege\022\031\n\021object_name_index\030\003 \001(\005\022\032\n\022obj"
  "ect_name_indexs\030\004 \001(\005\"2\n\014SegmentStats\022\021\n"
  "\tSegmentID\030\001 \001(\003\022\017\n\007NumRows\030\002 \001(\003\"\325\001\n\nCl"
  "ientInfo\022\020\n\010sdk_type\030\001 \001(\t\022\023\n\013sdk_versio"
  "n\030\002 \001(\t\022\022\n\nlocal_time\030\003 \001(\t\022\014\n\004user\030\004 \001("
  "\t\022\014\n\004host\030\005 \001(\t\022\?\n\010reserved\030\006 \003(\0132-.milv"
  "us.proto.common.ClientInfo.ReservedEntry"
  "\032/\n\rReservedEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\"\343\001\n\nServerInfo\022\022\n\nbuild_tags\030\001"
  " \001(\t\022\022\n\nbuild_time\030\002 \001(\t\022\022\n\ngit_commit\030\003"
  " \001(\t\022\022\n\ngo_version\030\004 \001(\t\022\023\n\013deploy_mode\030"
  "\005 \001(\t\022\?\n\010reserved\030\006 \003(\0132-.milvus.proto.c"
  "ommon.ServerInfo.ReservedEntry\032/\n\rReserv"
  "edEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*"
  "\307\n\n\tErrorCode\022\013\n\007Success\020\000\022\023\n\017Unexpected"
  "Error\020\001\022\021\n\rConnectFailed\020\002\022\024\n\020Permission"
  "Denied\020\003\022\027\n\023CollectionNotExists\020\004\022\023\n\017Ill"
  "egalArgument\020\005\022\024\n\020IllegalDimension\020\007\022\024\n\020"
  "IllegalIndexType\020\010\022\031\n\025IllegalCollectionN"
  "ame\020\t\022\017\n\013IllegalTOPK\020\n\022\024\n\020IllegalRowReco"
  "rd\020\013\022\023\n\017IllegalVectorID\020\014\022\027\n\023IllegalSear"
  "chResult\020\r\022\020\n\014FileNotFound\020\016\022\016\n\nMetaFail"
  "ed\020\017\022\017\n\013CacheFailed\020\020\022\026\n\022CannotCreateFol"
  "der\020\021\022\024\n\020CannotCreateFile\020\022\022\026\n\022CannotDel"
  "eteFolder\020\023\022\024\n\020CannotDeleteFile\020\024\022\023\n\017Bui"
  "ldIndexError\020\025\022\020\n\014IllegalNLIST\020\026\022\025\n\021Ille"
  "galMetricType\020\027\022\017\n\013OutOfMemory\020\030\022\021\n\rInde"
  "xNotExist\020\031\022\023\n\017EmptyCollection\020\032\022\033\n\027Upda"
  "teImportTaskFailure\020\033\022\032\n\026CollectionNameN"
  "otFound\020\034\022\033\n\027CreateCredentialFailure\020\035\022\033"
  "\n\027UpdateCredentialFailure\020\036\022\033\n\027DeleteCre"
  "dentialFailure\020\037\022\030\n\024GetCredentialFailure"
  "\020 \022\030\n\024ListCredUsersFailure\020!\022\022\n\016GetUserF"
  "ailure\020\"\022\025\n\021CreateRoleFailure\020#\022\023\n\017DropR"
  "oleFailure\020$\022\032\n\026OperateUserRoleFailure\020%"
  "\022\025\n\021SelectRoleFailure\020&\022\025\n\021SelectUserFai"
  "lure\020\'\022\031\n\025SelectResourceFailure\020(\022\033\n\027Ope"
  "ratePrivilegeFailure\020)\022\026\n\022SelectGrantFai"
  "lure\020*\022!\n\035RefreshPolicyInfoCacheFailure\020"
  "+\022\025\n\021ListPolicyFailure\020,\022\022\n\016NotShardLead"
  "er\020-\022\026\n\022NoReplicaAvailable\020.\022\023\n\017SegmentN"
  "otFound\020/\022\r\n\tForceDeny\0200\022\r\n\tRateLimit\0201\022"
  "\022\n\016NodeIDNotMatch\0202\022\024\n\020UpsertAutoIDTrue\020"
  "3\022\034\n\030InsufficientMemoryToLoad\0204\022\030\n\024Memor"
  "yQuotaExhausted\0205\022\026\n\022DiskQuotaExhausted\020"
  "6\022\025\n\021TimeTickLongDelay\0207\022\021\n\rNotReadyServ"
  "e\0208\022\033\n\027NotReadyCoordActivating\0209\022\017\n\013Data"
  "CoordNA\020d\022\022\n\rDDRequestRace\020\350\007\032\002\030\001*c\n\nInd"
  "exState\022\022\n\016IndexStateNone\020\000\022\014\n\010Unissued\020"
  "\001\022\016\n\nInProgress\020\002\022\014\n\010Finished\020\003\022\n\n\006Faile"
  "d\020\004\022\t\n\005Retry\020\005*\202\001\n\014SegmentState\022\024\n\020Segme"
  "ntStateNone\020\000\022\014\n\010NotExist\020\001\022\013\n\007Growing\020\002"
  "\022\n\n\006Sealed\020\003\022\013\n\007Flushed\020\004\022\014\n\010Flushing\020\005\022"
  "\013\n\007Dropped\020\006\022\r\n\tImporting\020\007*V\n\017Placehold"
  "erType\022\010\n\004None\020\000\022\020\n\014BinaryVector\020d\022\017\n\013Fl"
  "oatVector\020e\022\t\n\005Int64\020\005\022\013\n\007VarChar\020\025*\264\020\n\007"
  "MsgType\022\r\n\tUndefined\020\000\022\024\n\020CreateCollecti"
  "on\020d\022\022\n\016DropCollection\020e\022\021\n\rHasCollectio"
  "n\020f\022\026\n\022DescribeCollection\020g\022\023\n\017ShowColle"
  "ctions\020h\022\024\n\020GetSystemConfigs\020i\022\022\n\016LoadCo"
  "llection\020j\022\025\n\021ReleaseCollection\020k\022\017\n\013Cre"
  "ateAlias\020l\022\r\n\tDropAlias\020m\022\016\n\nAlterAlias\020"
  "n\022\023\n\017AlterCollection\020o\022\024\n\020RenameCollecti"
  "on\020p\022\021\n\rDescribeAlias\020q\022\017\n\013ListAliases\020r"
  "\022\024\n\017CreatePartition\020\310\001\022\022\n\rDropPartition\020"
  "\311\001\022\021\n\014HasPartition\020\312\001\022\026\n\021DescribePartiti"
  "on\020\313\001\022\023\n\016ShowPartitions\020\314\001\022\023\n\016LoadPartit"
  "ions\020\315\001\022\026\n\021ReleasePartitions\020\316\001\022\021\n\014ShowS"
  "egments\020\372\001\022\024\n\017DescribeSegment\020\373\001\022\021\n\014Load"
  "Segments\020\374\001\022\024\n\017ReleaseSegments\020\375\001\022\024\n\017Han"
  "doffSegments\020\376\001\022\030\n\023LoadBalanceSegments\020\377"
  "\001\022\025\n\020DescribeSegments\020\200\002\022\034\n\027FederListInd"
  "exedSegment\020\201\002\022\"\n\035FederDescribeSegmentIn"
  "dexData\020\202\002\022\020\n\013CreateIndex\020\254\002\022\022\n\rDescribe"
  "Index\020\255\002\022\016\n\tDropIndex\020\256\002\022\027\n\022GetIndexStat"
  "istics\020\257\002\022\013\n\006Insert\020\220\003\022\013\n\006Delete\020\221\003\022\n\n\005F"
  "lush\020\222\003\022\027\n\022ResendSegmentStats\020\223\003\022\013\n\006Upse"
  "rt\020\224\003\022\013\n\006Search\020\364\003\022\021\n\014SearchResult\020\365\003\022\022\n"
  "\rGetIndexState\020\366\003\022\032\n\025GetIndexBuildProgre"
  "ss\020\367\003\022\034\n\027GetCollectionStatistics\020\370\003\022\033\n\026G"
  "etPartitionStatistics\020\371\003\022\r\n\010Retrieve\020\372\003\022"
  "\023\n\016RetrieveResult\020\373\003\022\024\n\017WatchDmChannels\020"
  "\374\003\022\025\n\020RemoveDmChannels\020\375\003\022\027\n\022WatchQueryC"
  "hannels\020\376\003\022\030\n\023RemoveQueryChannels\020\377\003\022\035\n\030"
  "SealedSegmentsChangeInfo\020\200\004\022\027\n\022WatchDelt"
  "aChannels\020\201\004\022\024\n\017GetShardLeaders\020\202\004\022\020\n\013Ge"
  "tReplicas\020\203\004\022\023\n\016UnsubDmChannel\020\204\004\022\024\n\017Get"
  "Distribution\020\205\004\022\025\n\020SyncDistribution\020\206\004\022\020"
  "\n\013SegmentInfo\020\330\004\022\017\n\nSystemInfo\020\331\004\022\024\n\017Get"
  "RecoveryInfo\020\332\004\022\024\n\017GetSegmentState\020\333\004\022\r\n"
  "\010TimeTick\020\260\t\022\023\n\016QueryNodeStats\020\261\t\022\016\n\tLoa"
  "dIndex\020\262\t\022\016\n\tRequestID\020\263\t\022\017\n\nRequestTSO\020"
  "\264\t\022\024\n\017AllocateSegment\020\265\t\022\026\n\021SegmentStati"
  "stics\020\266\t\022\025\n\020SegmentFlushDone\020\267\t\022\017\n\nDataN"
  "odeTt\020\270\t\022\014\n\007Connect\020\271\t\022\024\n\017ListClientInfo"
  "s\020\272\t\022\023\n\016AllocTimestamp\020\273\t\022\025\n\020CreateCrede"
  "ntial\020\334\013\022\022\n\rGetCredential\020\335\013\022\025\n\020DeleteCr"
  "edential\020\336\013\022\025\n\020UpdateCredential\020\337\013\022\026\n\021Li"
  "stCredUsernames\020\340\013\022\017\n\nCreateRole\020\300\014\022\r\n\010D"
  "ropRole\020\301\014\022\024\n\017OperateUserRole\020\302\014\022\017\n\nSele"
  "ctRole\020\303\014\022\017\n\nSelectUser\020\304\014\022\023\n\016SelectReso"
  "urce\020\305\014\022\025\n\020OperatePrivilege\020\306\014\022\020\n\013Select"
  "Grant\020\307\014\022\033\n\026RefreshPolicyInfoCache\020\310\014\022\017\n"
  "\nListPolicy\020\311\014\022\030\n\023CreateResourceGroup\020\244\r"
  "\022\026\n\021DropResourceGroup\020\245\r\022\027\n\022ListResource"
  "Groups\020\246\r\022\032\n\025DescribeResourceGroup\020\247\r\022\021\n"
  "\014TransferNode\020\250\r\022\024\n\017TransferReplica\020\251\r\022\023"
  "\n\016CreateDatabase\020\211\016\022\021\n\014DropDatabase\020\212\016\022\022"
  "\n\rListDatabases\020\213\016*\"\n\007DslType\022\007\n\003Dsl\020\000\022\016"
  "\n\nBoolExprV1\020\001*B\n\017CompactionState\022\021\n\rUnd"
  "efiedState\020\000\022\r\n\tExecuting\020\001\022\r\n\tCompleted"
  "\020\002*X\n\020ConsistencyLevel\022\n\n\006Strong\020\000\022\013\n\007Se"
  "ssion\020\001\022\013\n\007Bounded\020\002\022\016\n\nEventually\020\003\022\016\n\n"
  "Customized\020\004*\236\001\n\013ImportState\022\021\n\rImportPe"
  "nding\020\000\022\020\n\014ImportFailed\020\001\022\021\n\rImportStart"
  "ed\020\002\022\023\n\017ImportPersisted\020\005\022\021\n\rImportFlush"
  "ed\020\010\022\023\n\017ImportCompleted\020\006\022\032\n\026ImportFaile"
  "dAndCleaned\020\007*2\n\nObjectType\022\016\n\nCollectio"
  "n\020\000\022\n\n\006Global\020\001\022\010\n\004User\020\002*\227\n\n\017ObjectPriv"
  "ilege\022\020\n\014PrivilegeAll\020\000\022\035\n\031PrivilegeCrea"
  "teCollection\020\001\022\033\n\027PrivilegeDropCollectio"
  "n\020\002\022\037\n\033PrivilegeDescribeCollection\020\003\022\034\n\030"
  "PrivilegeShowCollections\020\004\022\021\n\rPrivilegeL"
  "oad\020\005\022\024\n\020PrivilegeRelease\020\006\022\027\n\023Privilege"
  "Compaction\020\007\022\023\n\017PrivilegeInsert\020\010\022\023\n\017Pri"
  "vilegeDelete\020\t\022\032\n\026PrivilegeGetStatistics"
  "\020\n\022\030\n\024PrivilegeCreateIndex\020\013\022\030\n\024Privileg"
  "eIndexDetail\020\014\022\026\n\022PrivilegeDropIndex\020\r\022\023"
  "\n\017PrivilegeSearch\020\016\022\022\n\016PrivilegeFlush\020\017\022"
  "\022\n\016PrivilegeQuery\020\020\022\030\n\024PrivilegeLoadBala"
  "nce\020\021\022\023\n\017PrivilegeImport\020\022\022\034\n\030PrivilegeC"
  "reateOwnership\020\023\022\027\n\023PrivilegeUpdateUser\020"
  "\024\022\032\n\026PrivilegeDropOwnership\020\025\022\034\n\030Privile"
  "geSelectOwnership\020\026\022\034\n\030PrivilegeManageOw"
  "nership\020\027\022\027\n\023PrivilegeSelectUser\020\030\022\023\n\017Pr"
  "ivilegeUpsert\020\031\022 \n\034PrivilegeCreateResour"
  "ceGroup\020\032\022\036\n\032PrivilegeDropResourceGroup\020"
  "\033\022\"\n\036PrivilegeDescribeResourceGroup\020\034\022\037\n"
  "\033PrivilegeListResourceGroups\020\035\022\031\n\025Privil"
  "egeTransferNode\020\036\022\034\n\030PrivilegeTransferRe"
  "plica\020\037\022\037\n\033PrivilegeGetLoadingProgress\020 "
  "\022\031\n\025PrivilegeGetLoadState\020!\022\035\n\031Privilege"
  "RenameCollection\020\"\022\033\n\027PrivilegeCreateDat"
  "abase\020#\022\031\n\025PrivilegeDropDatabase\020$\022\032\n\026Pr"
  "ivilegeListDatabases\020%\022\025\n\021PrivilegeFlush"
  "All\020&\022\034\n\030PrivilegeCreatePartition\020\'\022\032\n\026P"
  "rivilegeDropPartition\020(\022\033\n\027PrivilegeShow"
  "Partitions\020)\022\031\n\025PrivilegeHasPartition\020*\022"
  "\032\n\026PrivilegeGetFlushState\020+\022\030\n\024Privilege"
  "CreateAlias\020,\022\026\n\022PrivilegeDropAlias\020-\022\032\n"
  "\026PrivilegeDescribeAlias\020.\022\030\n\024PrivilegeLi"
  "stAliases\020/*S\n\tStateCode\022\020\n\014Initializing"
  "\020\000\022\013\n\007Healthy\020\001\022\014\n\010Abnormal\020\002\022\013\n\007StandBy"
  "\020\003\022\014\n\010Stopping\020\004*c\n\tLoadState\022\025\n\021LoadSta"
  "teNotExist\020\000\022\024\n\020LoadStateNotLoad\020\001\022\024\n\020Lo"
  "adStateLoading\020\002\022\023\n\017LoadStateLoaded\020\003:^\n"
  "\021privilege_ext_obj\022\037.google.protobuf.Mes"
  "sageOptions\030\351\007 \001(\0132!.milvus.proto.common"
  ".PrivilegeExtBm\n\016io.milvus.grpcB\013CommonP"
  "rotoP\001Z4github.com/milvus-io/milvus-prot"
  "o/go-api/v2/commonpb\240\001\001\252\002\022Milvus.Client."
  "Grpcb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2eproto_sccs[18] = {
  &scc_info_Address_common_2eproto.base,
  &scc_info_Blob_common_2eproto.base,
  &scc_info_ClientInfo_common_2eproto.base,
  &scc_info_ClientInfo_ReservedEntry_DoNotUse_common_2eproto.base,
  &scc_info_DMLMsgHeader_common_2eproto.base,
  &scc_info_KeyDataPair_common_2eproto.base,
  &scc_info_KeyValuePair_common_2eproto.base,
  &scc_info_MsgBase_common_2eproto.base,
  &scc_info_MsgBase_PropertiesEntry_DoNotUse_common_2eproto.base,
  &scc_info_MsgHeader_common_2eproto.base,
  &scc_info_PlaceholderGroup_common_2eproto.base,
  &scc_info_PlaceholderValue_common_2eproto.base,
  &scc_info_PrivilegeExt_common_2eproto.base,
  &scc_info_ReplicateInfo_common_2eproto.base,
  &scc_info_SegmentStats_common_2eproto.base,
  &scc_info_ServerInfo_common_2eproto.base,
  &scc_info_ServerInfo_ReservedEntry_DoNotUse_common_2eproto.base,
  &scc_info_Status_common_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto = {
  false, false, descriptor_table_protodef_common_2eproto, "common.proto", 7612,
  &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_sccs, descriptor_table_common_2eproto_deps, 18, 1,
  schemas, file_default_instances, TableStruct_common_2eproto::offsets,
  file_level_metadata_common_2eproto, 18, file_level_enum_descriptors_common_2eproto, file_level_service_descriptors_common_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2eproto)), true);
namespace milvus {
namespace proto {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 100:
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool IndexState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool SegmentState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceholderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[3];
}
bool PlaceholderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
    case 21:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[4];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 300:
    case 301:
    case 302:
    case 303:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 600:
    case 601:
    case 602:
    case 603:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1504:
    case 1600:
    case 1601:
    case 1602:
    case 1603:
    case 1604:
    case 1605:
    case 1606:
    case 1607:
    case 1608:
    case 1609:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1801:
    case 1802:
    case 1803:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DslType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[5];
}
bool DslType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompactionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[6];
}
bool CompactionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsistencyLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[7];
}
bool ConsistencyLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImportState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[8];
}
bool ImportState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[9];
}
bool ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectPrivilege_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[10];
}
bool ObjectPrivilege_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[11];
}
bool StateCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoadState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[12];
}
bool LoadState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detail().empty()) {
    detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_detail(),
      GetArena());
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&retriable_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(retriable_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_common_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retriable_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(retriable_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_common_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  detail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retriable_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(retriable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.ErrorCode error_code = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::milvus::proto::common::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.Status.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool retriable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          retriable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string detail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.Status.detail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.ErrorCode error_code = 1 [deprecated = true];
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error_code(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.Status.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  // bool retriable = 4;
  if (this->retriable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_retriable(), target);
  }

  // string detail = 5;
  if (this->detail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.Status.detail");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // string detail = 5;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // .milvus.proto.common.ErrorCode error_code = 1 [deprecated = true];
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // bool retriable = 4;
  if (this->retriable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.detail().size() > 0) {
    _internal_set_detail(from._internal_detail());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.retriable() != 0) {
    _internal_set_retriable(from._internal_retriable());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  detail_.Swap(&other->detail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, retriable_)
      + sizeof(Status::retriable_)
      - PROTOBUF_FIELD_OFFSET(Status, error_code_)>(
          reinterpret_cast<char*>(&error_code_),
          reinterpret_cast<char*>(&other->error_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyValuePair::InitAsDefaultInstance() {
}
class KeyValuePair::_Internal {
 public:
};

KeyValuePair::KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.KeyValuePair)
}
KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.KeyValuePair)
}

void KeyValuePair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValuePair_common_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyValuePair::~KeyValuePair() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.KeyValuePair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyValuePair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyValuePair::ArenaDtor(void* object) {
  KeyValuePair* _this = reinterpret_cast< KeyValuePair* >(object);
  (void)_this;
}
void KeyValuePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValuePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValuePair& KeyValuePair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValuePair_common_2eproto.base);
  return *internal_default_instance();
}


void KeyValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.KeyValuePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValuePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.KeyValuePair.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.KeyValuePair.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValuePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.KeyValuePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.KeyValuePair.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.KeyValuePair.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.KeyValuePair)
  return target;
}

size_t KeyValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.KeyValuePair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValuePair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValuePair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValuePair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.KeyValuePair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.KeyValuePair)
    MergeFrom(*source);
  }
}

void KeyValuePair::MergeFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void KeyValuePair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePair::CopyFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePair::IsInitialized() const {
  return true;
}

void KeyValuePair::InternalSwap(KeyValuePair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValuePair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyDataPair::InitAsDefaultInstance() {
}
class KeyDataPair::_Internal {
 public:
};

KeyDataPair::KeyDataPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.KeyDataPair)
}
KeyDataPair::KeyDataPair(const KeyDataPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.KeyDataPair)
}

void KeyDataPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyDataPair_common_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyDataPair::~KeyDataPair() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.KeyDataPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyDataPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyDataPair::ArenaDtor(void* object) {
  KeyDataPair* _this = reinterpret_cast< KeyDataPair* >(object);
  (void)_this;
}
void KeyDataPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyDataPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyDataPair& KeyDataPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyDataPair_common_2eproto.base);
  return *internal_default_instance();
}


void KeyDataPair::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.KeyDataPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyDataPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.KeyDataPair.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyDataPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.KeyDataPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.KeyDataPair.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.KeyDataPair)
  return target;
}

size_t KeyDataPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.KeyDataPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyDataPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.KeyDataPair)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyDataPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyDataPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.KeyDataPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.KeyDataPair)
    MergeFrom(*source);
  }
}

void KeyDataPair::MergeFrom(const KeyDataPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.KeyDataPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void KeyDataPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.KeyDataPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyDataPair::CopyFrom(const KeyDataPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.KeyDataPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyDataPair::IsInitialized() const {
  return true;
}

void KeyDataPair::InternalSwap(KeyDataPair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyDataPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Blob::InitAsDefaultInstance() {
}
class Blob::_Internal {
 public:
};

Blob::Blob(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.Blob)
}
Blob::Blob(const Blob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.Blob)
}

void Blob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Blob_common_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Blob::~Blob() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.Blob)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Blob::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Blob::ArenaDtor(void* object) {
  Blob* _this = reinterpret_cast< Blob* >(object);
  (void)_this;
}
void Blob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Blob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Blob& Blob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Blob_common_2eproto.base);
  return *internal_default_instance();
}


void Blob::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.Blob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Blob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Blob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.Blob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.Blob)
  return target;
}

size_t Blob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.Blob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Blob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.Blob)
  GOOGLE_DCHECK_NE(&from, this);
  const Blob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Blob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.Blob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.Blob)
    MergeFrom(*source);
  }
}

void Blob::MergeFrom(const Blob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.Blob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Blob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.Blob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Blob::CopyFrom(const Blob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.Blob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blob::IsInitialized() const {
  return true;
}

void Blob::InternalSwap(Blob* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Blob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceholderValue::InitAsDefaultInstance() {
}
class PlaceholderValue::_Internal {
 public:
};

PlaceholderValue::PlaceholderValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.PlaceholderValue)
}
PlaceholderValue::PlaceholderValue(const PlaceholderValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.PlaceholderValue)
}

void PlaceholderValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceholderValue_common_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

PlaceholderValue::~PlaceholderValue() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.PlaceholderValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceholderValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlaceholderValue::ArenaDtor(void* object) {
  PlaceholderValue* _this = reinterpret_cast< PlaceholderValue* >(object);
  (void)_this;
}
void PlaceholderValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceholderValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceholderValue& PlaceholderValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceholderValue_common_2eproto.base);
  return *internal_default_instance();
}


void PlaceholderValue::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.PlaceholderValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceholderValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.PlaceholderValue.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.PlaceholderType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::milvus::proto::common::PlaceholderType>(val));
        } else goto handle_unusual;
        continue;
      // repeated bytes values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceholderValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.PlaceholderValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.PlaceholderValue.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // .milvus.proto.common.PlaceholderType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated bytes values = 3;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.PlaceholderValue)
  return target;
}

size_t PlaceholderValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.PlaceholderValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      values_.Get(i));
  }

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // .milvus.proto.common.PlaceholderType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceholderValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.PlaceholderValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceholderValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceholderValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.PlaceholderValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.PlaceholderValue)
    MergeFrom(*source);
  }
}

void PlaceholderValue::MergeFrom(const PlaceholderValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.PlaceholderValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PlaceholderValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.PlaceholderValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceholderValue::CopyFrom(const PlaceholderValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.PlaceholderValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderValue::IsInitialized() const {
  return true;
}

void PlaceholderValue::InternalSwap(PlaceholderValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceholderGroup::InitAsDefaultInstance() {
}
class PlaceholderGroup::_Internal {
 public:
};

PlaceholderGroup::PlaceholderGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  placeholders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.PlaceholderGroup)
}
PlaceholderGroup::PlaceholderGroup(const PlaceholderGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      placeholders_(from.placeholders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.PlaceholderGroup)
}

void PlaceholderGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceholderGroup_common_2eproto.base);
}

PlaceholderGroup::~PlaceholderGroup() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.PlaceholderGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceholderGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlaceholderGroup::ArenaDtor(void* object) {
  PlaceholderGroup* _this = reinterpret_cast< PlaceholderGroup* >(object);
  (void)_this;
}
void PlaceholderGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceholderGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceholderGroup& PlaceholderGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceholderGroup_common_2eproto.base);
  return *internal_default_instance();
}


void PlaceholderGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.PlaceholderGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placeholders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceholderGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .milvus.proto.common.PlaceholderValue placeholders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placeholders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceholderGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.PlaceholderGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .milvus.proto.common.PlaceholderValue placeholders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_placeholders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_placeholders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.PlaceholderGroup)
  return target;
}

size_t PlaceholderGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.PlaceholderGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.PlaceholderValue placeholders = 1;
  total_size += 1UL * this->_internal_placeholders_size();
  for (const auto& msg : this->placeholders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceholderGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.PlaceholderGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceholderGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceholderGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.PlaceholderGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.PlaceholderGroup)
    MergeFrom(*source);
  }
}

void PlaceholderGroup::MergeFrom(const PlaceholderGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.PlaceholderGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  placeholders_.MergeFrom(from.placeholders_);
}

void PlaceholderGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.PlaceholderGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceholderGroup::CopyFrom(const PlaceholderGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.PlaceholderGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderGroup::IsInitialized() const {
  return true;
}

void PlaceholderGroup::InternalSwap(PlaceholderGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  placeholders_.InternalSwap(&other->placeholders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Address::InitAsDefaultInstance() {
}
class Address::_Internal {
 public:
};

Address::Address(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.Address)
}

void Address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Address_common_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = PROTOBUF_LONGLONG(0);
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.Address)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Address::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Address::ArenaDtor(void* object) {
  Address* _this = reinterpret_cast< Address* >(object);
  (void)_this;
}
void Address::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Address& Address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Address_common_2eproto.base);
  return *internal_default_instance();
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.Address.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.Address.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int64 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int64 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.Address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void Address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MsgBase_PropertiesEntry_DoNotUse::MsgBase_PropertiesEntry_DoNotUse() {}
MsgBase_PropertiesEntry_DoNotUse::MsgBase_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MsgBase_PropertiesEntry_DoNotUse::MergeFrom(const MsgBase_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MsgBase_PropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MsgBase_PropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MsgBase::InitAsDefaultInstance() {
  ::milvus::proto::common::_MsgBase_default_instance_._instance.get_mutable()->replicateinfo_ = const_cast< ::milvus::proto::common::ReplicateInfo*>(
      ::milvus::proto::common::ReplicateInfo::internal_default_instance());
}
class MsgBase::_Internal {
 public:
  static const ::milvus::proto::common::ReplicateInfo& replicateinfo(const MsgBase* msg);
};

const ::milvus::proto::common::ReplicateInfo&
MsgBase::_Internal::replicateinfo(const MsgBase* msg) {
  return *msg->replicateinfo_;
}
MsgBase::MsgBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.MsgBase)
}
MsgBase::MsgBase(const MsgBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  if (from._internal_has_replicateinfo()) {
    replicateinfo_ = new ::milvus::proto::common::ReplicateInfo(*from.replicateinfo_);
  } else {
    replicateinfo_ = nullptr;
  }
  ::memcpy(&msgid_, &from.msgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&msgid_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.MsgBase)
}

void MsgBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBase_common_2eproto.base);
  ::memset(&replicateinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&replicateinfo_)) + sizeof(msg_type_));
}

MsgBase::~MsgBase() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.MsgBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete replicateinfo_;
}

void MsgBase::ArenaDtor(void* object) {
  MsgBase* _this = reinterpret_cast< MsgBase* >(object);
  (void)_this;
}
void MsgBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBase& MsgBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBase_common_2eproto.base);
  return *internal_default_instance();
}


void MsgBase::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.MsgBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  if (GetArena() == nullptr && replicateinfo_ != nullptr) {
    delete replicateinfo_;
  }
  replicateinfo_ = nullptr;
  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(msg_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::milvus::proto::common::MsgType>(val));
        } else goto handle_unusual;
        continue;
      // int64 msgID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sourceID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 targetID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> properties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.ReplicateInfo replicateInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_replicateinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.MsgBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgType msg_type = 1;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // int64 msgID = 2;
  if (this->msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_msgid(), target);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // int64 sourceID = 4;
  if (this->sourceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_sourceid(), target);
  }

  // int64 targetID = 5;
  if (this->targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_targetid(), target);
  }

  // map<string, string> properties = 6;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.common.MsgBase.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.common.MsgBase.PropertiesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MsgBase_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = MsgBase_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .milvus.proto.common.ReplicateInfo replicateInfo = 7;
  if (this->has_replicateinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::replicateinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.MsgBase)
  return target;
}

size_t MsgBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.MsgBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += MsgBase_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .milvus.proto.common.ReplicateInfo replicateInfo = 7;
  if (this->has_replicateinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replicateinfo_);
  }

  // int64 msgID = 2;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_msgid());
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // int64 sourceID = 4;
  if (this->sourceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sourceid());
  }

  // int64 targetID = 5;
  if (this->targetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_targetid());
  }

  // .milvus.proto.common.MsgType msg_type = 1;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.MsgBase)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.MsgBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.MsgBase)
    MergeFrom(*source);
  }
}

void MsgBase::MergeFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.MsgBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.has_replicateinfo()) {
    _internal_mutable_replicateinfo()->::milvus::proto::common::ReplicateInfo::MergeFrom(from._internal_replicateinfo());
  }
  if (from.msgid() != 0) {
    _internal_set_msgid(from._internal_msgid());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.sourceid() != 0) {
    _internal_set_sourceid(from._internal_sourceid());
  }
  if (from.targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
}

void MsgBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBase::CopyFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBase::IsInitialized() const {
  return true;
}

void MsgBase::InternalSwap(MsgBase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBase, msg_type_)
      + sizeof(MsgBase::msg_type_)
      - PROTOBUF_FIELD_OFFSET(MsgBase, replicateinfo_)>(
          reinterpret_cast<char*>(&replicateinfo_),
          reinterpret_cast<char*>(&other->replicateinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicateInfo::InitAsDefaultInstance() {
}
class ReplicateInfo::_Internal {
 public:
};

ReplicateInfo::ReplicateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.ReplicateInfo)
}
ReplicateInfo::ReplicateInfo(const ReplicateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgtimestamp_, &from.msgtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&isreplicate_) -
    reinterpret_cast<char*>(&msgtimestamp_)) + sizeof(isreplicate_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.ReplicateInfo)
}

void ReplicateInfo::SharedCtor() {
  ::memset(&msgtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isreplicate_) -
      reinterpret_cast<char*>(&msgtimestamp_)) + sizeof(isreplicate_));
}

ReplicateInfo::~ReplicateInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.ReplicateInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReplicateInfo::ArenaDtor(void* object) {
  ReplicateInfo* _this = reinterpret_cast< ReplicateInfo* >(object);
  (void)_this;
}
void ReplicateInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicateInfo& ReplicateInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicateInfo_common_2eproto.base);
  return *internal_default_instance();
}


void ReplicateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.ReplicateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isreplicate_) -
      reinterpret_cast<char*>(&msgtimestamp_)) + sizeof(isreplicate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isReplicate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isreplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msgTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msgtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.ReplicateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isReplicate = 1;
  if (this->isreplicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isreplicate(), target);
  }

  // uint64 msgTimestamp = 2;
  if (this->msgtimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msgtimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.ReplicateInfo)
  return target;
}

size_t ReplicateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.ReplicateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msgTimestamp = 2;
  if (this->msgtimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msgtimestamp());
  }

  // bool isReplicate = 1;
  if (this->isreplicate() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicateInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.ReplicateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicateInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicateInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.ReplicateInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.ReplicateInfo)
    MergeFrom(*source);
  }
}

void ReplicateInfo::MergeFrom(const ReplicateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.ReplicateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgtimestamp() != 0) {
    _internal_set_msgtimestamp(from._internal_msgtimestamp());
  }
  if (from.isreplicate() != 0) {
    _internal_set_isreplicate(from._internal_isreplicate());
  }
}

void ReplicateInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.ReplicateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicateInfo::CopyFrom(const ReplicateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.ReplicateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateInfo::IsInitialized() const {
  return true;
}

void ReplicateInfo::InternalSwap(ReplicateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplicateInfo, isreplicate_)
      + sizeof(ReplicateInfo::isreplicate_)
      - PROTOBUF_FIELD_OFFSET(ReplicateInfo, msgtimestamp_)>(
          reinterpret_cast<char*>(&msgtimestamp_),
          reinterpret_cast<char*>(&other->msgtimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicateInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgHeader::InitAsDefaultInstance() {
  ::milvus::proto::common::_MsgHeader_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class MsgHeader::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const MsgHeader* msg);
};

const ::milvus::proto::common::MsgBase&
MsgHeader::_Internal::base(const MsgHeader* msg) {
  return *msg->base_;
}
MsgHeader::MsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.MsgHeader)
}
MsgHeader::MsgHeader(const MsgHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.MsgHeader)
}

void MsgHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgHeader_common_2eproto.base);
  base_ = nullptr;
}

MsgHeader::~MsgHeader() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.MsgHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void MsgHeader::ArenaDtor(void* object) {
  MsgHeader* _this = reinterpret_cast< MsgHeader* >(object);
  (void)_this;
}
void MsgHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgHeader& MsgHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgHeader_common_2eproto.base);
  return *internal_default_instance();
}


void MsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.MsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.MsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.MsgHeader)
  return target;
}

size_t MsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.MsgHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.MsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.MsgHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.MsgHeader)
    MergeFrom(*source);
  }
}

void MsgHeader::MergeFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.MsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void MsgHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeader::CopyFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeader::IsInitialized() const {
  return true;
}

void MsgHeader::InternalSwap(MsgHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DMLMsgHeader::InitAsDefaultInstance() {
  ::milvus::proto::common::_DMLMsgHeader_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DMLMsgHeader::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DMLMsgHeader* msg);
};

const ::milvus::proto::common::MsgBase&
DMLMsgHeader::_Internal::base(const DMLMsgHeader* msg) {
  return *msg->base_;
}
DMLMsgHeader::DMLMsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.DMLMsgHeader)
}
DMLMsgHeader::DMLMsgHeader(const DMLMsgHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shardname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shardname().empty()) {
    shardname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shardname(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.DMLMsgHeader)
}

void DMLMsgHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DMLMsgHeader_common_2eproto.base);
  shardname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DMLMsgHeader::~DMLMsgHeader() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.DMLMsgHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DMLMsgHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  shardname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DMLMsgHeader::ArenaDtor(void* object) {
  DMLMsgHeader* _this = reinterpret_cast< DMLMsgHeader* >(object);
  (void)_this;
}
void DMLMsgHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DMLMsgHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DMLMsgHeader& DMLMsgHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DMLMsgHeader_common_2eproto.base);
  return *internal_default_instance();
}


void DMLMsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.DMLMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shardname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DMLMsgHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shardName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_shardname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.DMLMsgHeader.shardName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DMLMsgHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.DMLMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string shardName = 2;
  if (this->shardname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shardname().data(), static_cast<int>(this->_internal_shardname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.DMLMsgHeader.shardName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_shardname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.DMLMsgHeader)
  return target;
}

size_t DMLMsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.DMLMsgHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string shardName = 2;
  if (this->shardname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shardname());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DMLMsgHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.DMLMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const DMLMsgHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DMLMsgHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.DMLMsgHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.DMLMsgHeader)
    MergeFrom(*source);
  }
}

void DMLMsgHeader::MergeFrom(const DMLMsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.DMLMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shardname().size() > 0) {
    _internal_set_shardname(from._internal_shardname());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DMLMsgHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.DMLMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DMLMsgHeader::CopyFrom(const DMLMsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.DMLMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DMLMsgHeader::IsInitialized() const {
  return true;
}

void DMLMsgHeader::InternalSwap(DMLMsgHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shardname_.Swap(&other->shardname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DMLMsgHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrivilegeExt::InitAsDefaultInstance() {
}
class PrivilegeExt::_Internal {
 public:
};

PrivilegeExt::PrivilegeExt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.PrivilegeExt)
}
PrivilegeExt::PrivilegeExt(const PrivilegeExt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_type_, &from.object_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_name_indexs_) -
    reinterpret_cast<char*>(&object_type_)) + sizeof(object_name_indexs_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.PrivilegeExt)
}

void PrivilegeExt::SharedCtor() {
  ::memset(&object_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_name_indexs_) -
      reinterpret_cast<char*>(&object_type_)) + sizeof(object_name_indexs_));
}

PrivilegeExt::~PrivilegeExt() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.PrivilegeExt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrivilegeExt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrivilegeExt::ArenaDtor(void* object) {
  PrivilegeExt* _this = reinterpret_cast< PrivilegeExt* >(object);
  (void)_this;
}
void PrivilegeExt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrivilegeExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivilegeExt& PrivilegeExt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrivilegeExt_common_2eproto.base);
  return *internal_default_instance();
}


void PrivilegeExt::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.PrivilegeExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_name_indexs_) -
      reinterpret_cast<char*>(&object_type_)) + sizeof(object_name_indexs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivilegeExt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.ObjectType object_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_object_type(static_cast<::milvus::proto::common::ObjectType>(val));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.ObjectPrivilege object_privilege = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_object_privilege(static_cast<::milvus::proto::common::ObjectPrivilege>(val));
        } else goto handle_unusual;
        continue;
      // int32 object_name_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          object_name_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 object_name_indexs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          object_name_indexs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrivilegeExt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.PrivilegeExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.ObjectType object_type = 1;
  if (this->object_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_object_type(), target);
  }

  // .milvus.proto.common.ObjectPrivilege object_privilege = 2;
  if (this->object_privilege() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_object_privilege(), target);
  }

  // int32 object_name_index = 3;
  if (this->object_name_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_object_name_index(), target);
  }

  // int32 object_name_indexs = 4;
  if (this->object_name_indexs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_object_name_indexs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.PrivilegeExt)
  return target;
}

size_t PrivilegeExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.PrivilegeExt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.ObjectType object_type = 1;
  if (this->object_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_object_type());
  }

  // .milvus.proto.common.ObjectPrivilege object_privilege = 2;
  if (this->object_privilege() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_object_privilege());
  }

  // int32 object_name_index = 3;
  if (this->object_name_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_object_name_index());
  }

  // int32 object_name_indexs = 4;
  if (this->object_name_indexs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_object_name_indexs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivilegeExt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.PrivilegeExt)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivilegeExt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrivilegeExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.PrivilegeExt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.PrivilegeExt)
    MergeFrom(*source);
  }
}

void PrivilegeExt::MergeFrom(const PrivilegeExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.PrivilegeExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_type() != 0) {
    _internal_set_object_type(from._internal_object_type());
  }
  if (from.object_privilege() != 0) {
    _internal_set_object_privilege(from._internal_object_privilege());
  }
  if (from.object_name_index() != 0) {
    _internal_set_object_name_index(from._internal_object_name_index());
  }
  if (from.object_name_indexs() != 0) {
    _internal_set_object_name_indexs(from._internal_object_name_indexs());
  }
}

void PrivilegeExt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.PrivilegeExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivilegeExt::CopyFrom(const PrivilegeExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.PrivilegeExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivilegeExt::IsInitialized() const {
  return true;
}

void PrivilegeExt::InternalSwap(PrivilegeExt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivilegeExt, object_name_indexs_)
      + sizeof(PrivilegeExt::object_name_indexs_)
      - PROTOBUF_FIELD_OFFSET(PrivilegeExt, object_type_)>(
          reinterpret_cast<char*>(&object_type_),
          reinterpret_cast<char*>(&other->object_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivilegeExt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegmentStats::InitAsDefaultInstance() {
}
class SegmentStats::_Internal {
 public:
};

SegmentStats::SegmentStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.SegmentStats)
}
SegmentStats::SegmentStats(const SegmentStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&segmentid_, &from.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numrows_) -
    reinterpret_cast<char*>(&segmentid_)) + sizeof(numrows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.SegmentStats)
}

void SegmentStats::SharedCtor() {
  ::memset(&segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numrows_) -
      reinterpret_cast<char*>(&segmentid_)) + sizeof(numrows_));
}

SegmentStats::~SegmentStats() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.SegmentStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SegmentStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SegmentStats::ArenaDtor(void* object) {
  SegmentStats* _this = reinterpret_cast< SegmentStats* >(object);
  (void)_this;
}
void SegmentStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegmentStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentStats& SegmentStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentStats_common_2eproto.base);
  return *internal_default_instance();
}


void SegmentStats::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.SegmentStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numrows_) -
      reinterpret_cast<char*>(&segmentid_)) + sizeof(numrows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 SegmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NumRows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          numrows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.SegmentStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 SegmentID = 1;
  if (this->segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // int64 NumRows = 2;
  if (this->numrows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_numrows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.SegmentStats)
  return target;
}

size_t SegmentStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.SegmentStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 SegmentID = 1;
  if (this->segmentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_segmentid());
  }

  // int64 NumRows = 2;
  if (this->numrows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_numrows());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.SegmentStats)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.SegmentStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.SegmentStats)
    MergeFrom(*source);
  }
}

void SegmentStats::MergeFrom(const SegmentStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.SegmentStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.segmentid() != 0) {
    _internal_set_segmentid(from._internal_segmentid());
  }
  if (from.numrows() != 0) {
    _internal_set_numrows(from._internal_numrows());
  }
}

void SegmentStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.SegmentStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentStats::CopyFrom(const SegmentStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.SegmentStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentStats::IsInitialized() const {
  return true;
}

void SegmentStats::InternalSwap(SegmentStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentStats, numrows_)
      + sizeof(SegmentStats::numrows_)
      - PROTOBUF_FIELD_OFFSET(SegmentStats, segmentid_)>(
          reinterpret_cast<char*>(&segmentid_),
          reinterpret_cast<char*>(&other->segmentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ClientInfo_ReservedEntry_DoNotUse::ClientInfo_ReservedEntry_DoNotUse() {}
ClientInfo_ReservedEntry_DoNotUse::ClientInfo_ReservedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ClientInfo_ReservedEntry_DoNotUse::MergeFrom(const ClientInfo_ReservedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ClientInfo_ReservedEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ClientInfo_ReservedEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ClientInfo::InitAsDefaultInstance() {
}
class ClientInfo::_Internal {
 public:
};

ClientInfo::ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reserved_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.ClientInfo)
}
ClientInfo::ClientInfo(const ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reserved_.MergeFrom(from.reserved_);
  sdk_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdk_type().empty()) {
    sdk_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sdk_type(),
      GetArena());
  }
  sdk_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdk_version().empty()) {
    sdk_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sdk_version(),
      GetArena());
  }
  local_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_time().empty()) {
    local_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_time(),
      GetArena());
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user(),
      GetArena());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.ClientInfo)
}

void ClientInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientInfo_common_2eproto.base);
  sdk_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.ClientInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sdk_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientInfo::ArenaDtor(void* object) {
  ClientInfo* _this = reinterpret_cast< ClientInfo* >(object);
  (void)_this;
}
void ClientInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientInfo& ClientInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientInfo_common_2eproto.base);
  return *internal_default_instance();
}


void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reserved_.Clear();
  sdk_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sdk_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sdk_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sdk_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.ClientInfo.sdk_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sdk_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sdk_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.ClientInfo.sdk_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_local_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.ClientInfo.local_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.ClientInfo.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.ClientInfo.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> reserved = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&reserved_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sdk_type = 1;
  if (this->sdk_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_type().data(), static_cast<int>(this->_internal_sdk_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.ClientInfo.sdk_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sdk_type(), target);
  }

  // string sdk_version = 2;
  if (this->sdk_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_version().data(), static_cast<int>(this->_internal_sdk_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.ClientInfo.sdk_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sdk_version(), target);
  }

  // string local_time = 3;
  if (this->local_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_time().data(), static_cast<int>(this->_internal_local_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.ClientInfo.local_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_local_time(), target);
  }

  // string user = 4;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.ClientInfo.user");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user(), target);
  }

  // string host = 5;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.ClientInfo.host");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_host(), target);
  }

  // map<string, string> reserved = 6;
  if (!this->_internal_reserved().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.common.ClientInfo.ReservedEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.common.ClientInfo.ReservedEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_reserved().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_reserved().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_reserved().begin();
          it != this->_internal_reserved().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ClientInfo_ReservedEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_reserved().begin();
          it != this->_internal_reserved().end(); ++it) {
        target = ClientInfo_ReservedEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.ClientInfo)
  return target;
}

size_t ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.ClientInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> reserved = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reserved_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_reserved().begin();
      it != this->_internal_reserved().end(); ++it) {
    total_size += ClientInfo_ReservedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string sdk_type = 1;
  if (this->sdk_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_type());
  }

  // string sdk_version = 2;
  if (this->sdk_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_version());
  }

  // string local_time = 3;
  if (this->local_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_time());
  }

  // string user = 4;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string host = 5;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.ClientInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.ClientInfo)
    MergeFrom(*source);
  }
}

void ClientInfo::MergeFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reserved_.MergeFrom(from.reserved_);
  if (from.sdk_type().size() > 0) {
    _internal_set_sdk_type(from._internal_sdk_type());
  }
  if (from.sdk_version().size() > 0) {
    _internal_set_sdk_version(from._internal_sdk_version());
  }
  if (from.local_time().size() > 0) {
    _internal_set_local_time(from._internal_local_time());
  }
  if (from.user().size() > 0) {
    _internal_set_user(from._internal_user());
  }
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
}

void ClientInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  return true;
}

void ClientInfo::InternalSwap(ClientInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reserved_.Swap(&other->reserved_);
  sdk_type_.Swap(&other->sdk_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sdk_version_.Swap(&other->sdk_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_time_.Swap(&other->local_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ServerInfo_ReservedEntry_DoNotUse::ServerInfo_ReservedEntry_DoNotUse() {}
ServerInfo_ReservedEntry_DoNotUse::ServerInfo_ReservedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ServerInfo_ReservedEntry_DoNotUse::MergeFrom(const ServerInfo_ReservedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo_ReservedEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ServerInfo_ReservedEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
}
class ServerInfo::_Internal {
 public:
};

ServerInfo::ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reserved_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.common.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reserved_.MergeFrom(from.reserved_);
  build_tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_build_tags().empty()) {
    build_tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_build_tags(),
      GetArena());
  }
  build_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_build_time().empty()) {
    build_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_build_time(),
      GetArena());
  }
  git_commit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_git_commit().empty()) {
    git_commit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_git_commit(),
      GetArena());
  }
  go_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_go_version().empty()) {
    go_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_go_version(),
      GetArena());
  }
  deploy_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deploy_mode().empty()) {
    deploy_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_deploy_mode(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.common.ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerInfo_common_2eproto.base);
  build_tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  git_commit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  go_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deploy_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.common.ServerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  build_tags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  git_commit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  go_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deploy_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::ArenaDtor(void* object) {
  ServerInfo* _this = reinterpret_cast< ServerInfo* >(object);
  (void)_this;
}
void ServerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerInfo& ServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerInfo_common_2eproto.base);
  return *internal_default_instance();
}


void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.common.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reserved_.Clear();
  build_tags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  git_commit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  go_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deploy_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string build_tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_build_tags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.ServerInfo.build_tags"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string build_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_build_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.ServerInfo.build_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string git_commit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_git_commit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.ServerInfo.git_commit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string go_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_go_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.ServerInfo.go_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deploy_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_deploy_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.common.ServerInfo.deploy_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> reserved = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&reserved_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.common.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string build_tags = 1;
  if (this->build_tags().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build_tags().data(), static_cast<int>(this->_internal_build_tags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.ServerInfo.build_tags");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_build_tags(), target);
  }

  // string build_time = 2;
  if (this->build_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build_time().data(), static_cast<int>(this->_internal_build_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.ServerInfo.build_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_build_time(), target);
  }

  // string git_commit = 3;
  if (this->git_commit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_git_commit().data(), static_cast<int>(this->_internal_git_commit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.ServerInfo.git_commit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_git_commit(), target);
  }

  // string go_version = 4;
  if (this->go_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_go_version().data(), static_cast<int>(this->_internal_go_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.ServerInfo.go_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_go_version(), target);
  }

  // string deploy_mode = 5;
  if (this->deploy_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deploy_mode().data(), static_cast<int>(this->_internal_deploy_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.common.ServerInfo.deploy_mode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_deploy_mode(), target);
  }

  // map<string, string> reserved = 6;
  if (!this->_internal_reserved().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.common.ServerInfo.ReservedEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.common.ServerInfo.ReservedEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_reserved().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_reserved().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_reserved().begin();
          it != this->_internal_reserved().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ServerInfo_ReservedEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_reserved().begin();
          it != this->_internal_reserved().end(); ++it) {
        target = ServerInfo_ReservedEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.common.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.common.ServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> reserved = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reserved_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_reserved().begin();
      it != this->_internal_reserved().end(); ++it) {
    total_size += ServerInfo_ReservedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string build_tags = 1;
  if (this->build_tags().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build_tags());
  }

  // string build_time = 2;
  if (this->build_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build_time());
  }

  // string git_commit = 3;
  if (this->git_commit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_git_commit());
  }

  // string go_version = 4;
  if (this->go_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_go_version());
  }

  // string deploy_mode = 5;
  if (this->deploy_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deploy_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.common.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.common.ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.common.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.common.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reserved_.MergeFrom(from.reserved_);
  if (from.build_tags().size() > 0) {
    _internal_set_build_tags(from._internal_build_tags());
  }
  if (from.build_time().size() > 0) {
    _internal_set_build_time(from._internal_build_time());
  }
  if (from.git_commit().size() > 0) {
    _internal_set_git_commit(from._internal_git_commit());
  }
  if (from.go_version().size() > 0) {
    _internal_set_go_version(from._internal_go_version());
  }
  if (from.deploy_mode().size() > 0) {
    _internal_set_deploy_mode(from._internal_deploy_mode());
  }
}

void ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.common.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.common.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reserved_.Swap(&other->reserved_);
  build_tags_.Swap(&other->build_tags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_time_.Swap(&other->build_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  git_commit_.Swap(&other->git_commit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  go_version_.Swap(&other->go_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deploy_mode_.Swap(&other->deploy_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::milvus::proto::common::PrivilegeExt >, 11, false >
  privilege_ext_obj(kPrivilegeExtObjFieldNumber, ::milvus::proto::common::PrivilegeExt::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::common::Status* Arena::CreateMaybeMessage< ::milvus::proto::common::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::KeyValuePair* Arena::CreateMaybeMessage< ::milvus::proto::common::KeyValuePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::KeyValuePair >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::KeyDataPair* Arena::CreateMaybeMessage< ::milvus::proto::common::KeyDataPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::KeyDataPair >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::Blob* Arena::CreateMaybeMessage< ::milvus::proto::common::Blob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::Blob >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::PlaceholderValue* Arena::CreateMaybeMessage< ::milvus::proto::common::PlaceholderValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::PlaceholderValue >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::PlaceholderGroup* Arena::CreateMaybeMessage< ::milvus::proto::common::PlaceholderGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::PlaceholderGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::Address* Arena::CreateMaybeMessage< ::milvus::proto::common::Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::MsgBase_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::common::MsgBase_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::MsgBase_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::MsgBase* Arena::CreateMaybeMessage< ::milvus::proto::common::MsgBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::MsgBase >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::ReplicateInfo* Arena::CreateMaybeMessage< ::milvus::proto::common::ReplicateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::ReplicateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::MsgHeader* Arena::CreateMaybeMessage< ::milvus::proto::common::MsgHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::MsgHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::DMLMsgHeader* Arena::CreateMaybeMessage< ::milvus::proto::common::DMLMsgHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::DMLMsgHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::PrivilegeExt* Arena::CreateMaybeMessage< ::milvus::proto::common::PrivilegeExt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::PrivilegeExt >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::SegmentStats* Arena::CreateMaybeMessage< ::milvus::proto::common::SegmentStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::SegmentStats >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::ClientInfo_ReservedEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::common::ClientInfo_ReservedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::ClientInfo_ReservedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::ClientInfo* Arena::CreateMaybeMessage< ::milvus::proto::common::ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::ServerInfo_ReservedEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::common::ServerInfo_ReservedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::ServerInfo_ReservedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::common::ServerInfo* Arena::CreateMaybeMessage< ::milvus::proto::common::ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::common::ServerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
