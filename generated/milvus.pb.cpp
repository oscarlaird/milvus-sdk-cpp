// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: milvus.proto

#include "milvus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Address_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientInfo_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyDataPair_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValuePair_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MsgBase_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerInfo_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompactionMergeInfo_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ComponentInfo_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushResponse_CollFlushTsEntry_DoNotUse_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushResponse_CollSealTimesEntry_DoNotUse_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushResponse_CollSegIDsEntry_DoNotUse_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushResponse_FlushCollSegIDsEntry_DoNotUse_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetImportStateResponse_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GrantEntity_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GrantorEntity_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IndexDescription_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MilvusExt_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectEntity_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistentSegmentInfo_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivilegeEntity_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuerySegmentInfo_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReplicaInfo_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicaInfo_NumOutboundNodeEntry_DoNotUse_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ResourceGroup_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceGroup_NumIncomingNodeEntry_DoNotUse_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceGroup_NumLoadedReplicaEntry_DoNotUse_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceGroup_NumOutgoingNodeEntry_DoNotUse_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleEntity_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoleResult_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SearchRequest_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShardReplica_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEntity_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserResult_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VectorIDs_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VectorsArray_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgPosition_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectionSchema_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FieldData_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatArray_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IDs_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntArray_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongArray_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SearchResultData_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VectorField_schema_2eproto;
namespace milvus {
namespace proto {
namespace milvus {
class CreateAliasRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAliasRequest> _instance;
} _CreateAliasRequest_default_instance_;
class DropAliasRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropAliasRequest> _instance;
} _DropAliasRequest_default_instance_;
class AlterAliasRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlterAliasRequest> _instance;
} _AlterAliasRequest_default_instance_;
class DescribeAliasRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeAliasRequest> _instance;
} _DescribeAliasRequest_default_instance_;
class DescribeAliasResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeAliasResponse> _instance;
} _DescribeAliasResponse_default_instance_;
class ListAliasesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAliasesRequest> _instance;
} _ListAliasesRequest_default_instance_;
class ListAliasesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAliasesResponse> _instance;
} _ListAliasesResponse_default_instance_;
class CreateCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateCollectionRequest> _instance;
} _CreateCollectionRequest_default_instance_;
class DropCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropCollectionRequest> _instance;
} _DropCollectionRequest_default_instance_;
class AlterCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlterCollectionRequest> _instance;
} _AlterCollectionRequest_default_instance_;
class HasCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HasCollectionRequest> _instance;
} _HasCollectionRequest_default_instance_;
class BoolResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolResponse> _instance;
} _BoolResponse_default_instance_;
class StringResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringResponse> _instance;
} _StringResponse_default_instance_;
class DescribeCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeCollectionRequest> _instance;
} _DescribeCollectionRequest_default_instance_;
class DescribeCollectionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeCollectionResponse> _instance;
} _DescribeCollectionResponse_default_instance_;
class LoadCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadCollectionRequest> _instance;
} _LoadCollectionRequest_default_instance_;
class ReleaseCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseCollectionRequest> _instance;
} _ReleaseCollectionRequest_default_instance_;
class GetStatisticsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatisticsRequest> _instance;
} _GetStatisticsRequest_default_instance_;
class GetStatisticsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatisticsResponse> _instance;
} _GetStatisticsResponse_default_instance_;
class GetCollectionStatisticsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollectionStatisticsRequest> _instance;
} _GetCollectionStatisticsRequest_default_instance_;
class GetCollectionStatisticsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollectionStatisticsResponse> _instance;
} _GetCollectionStatisticsResponse_default_instance_;
class ShowCollectionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowCollectionsRequest> _instance;
} _ShowCollectionsRequest_default_instance_;
class ShowCollectionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowCollectionsResponse> _instance;
} _ShowCollectionsResponse_default_instance_;
class CreatePartitionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePartitionRequest> _instance;
} _CreatePartitionRequest_default_instance_;
class DropPartitionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropPartitionRequest> _instance;
} _DropPartitionRequest_default_instance_;
class HasPartitionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HasPartitionRequest> _instance;
} _HasPartitionRequest_default_instance_;
class LoadPartitionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadPartitionsRequest> _instance;
} _LoadPartitionsRequest_default_instance_;
class ReleasePartitionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleasePartitionsRequest> _instance;
} _ReleasePartitionsRequest_default_instance_;
class GetPartitionStatisticsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPartitionStatisticsRequest> _instance;
} _GetPartitionStatisticsRequest_default_instance_;
class GetPartitionStatisticsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPartitionStatisticsResponse> _instance;
} _GetPartitionStatisticsResponse_default_instance_;
class ShowPartitionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowPartitionsRequest> _instance;
} _ShowPartitionsRequest_default_instance_;
class ShowPartitionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowPartitionsResponse> _instance;
} _ShowPartitionsResponse_default_instance_;
class DescribeSegmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeSegmentRequest> _instance;
} _DescribeSegmentRequest_default_instance_;
class DescribeSegmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeSegmentResponse> _instance;
} _DescribeSegmentResponse_default_instance_;
class ShowSegmentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowSegmentsRequest> _instance;
} _ShowSegmentsRequest_default_instance_;
class ShowSegmentsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowSegmentsResponse> _instance;
} _ShowSegmentsResponse_default_instance_;
class CreateIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateIndexRequest> _instance;
} _CreateIndexRequest_default_instance_;
class AlterIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlterIndexRequest> _instance;
} _AlterIndexRequest_default_instance_;
class DescribeIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeIndexRequest> _instance;
} _DescribeIndexRequest_default_instance_;
class IndexDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexDescription> _instance;
} _IndexDescription_default_instance_;
class DescribeIndexResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeIndexResponse> _instance;
} _DescribeIndexResponse_default_instance_;
class GetIndexBuildProgressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexBuildProgressRequest> _instance;
} _GetIndexBuildProgressRequest_default_instance_;
class GetIndexBuildProgressResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexBuildProgressResponse> _instance;
} _GetIndexBuildProgressResponse_default_instance_;
class GetIndexStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexStateRequest> _instance;
} _GetIndexStateRequest_default_instance_;
class GetIndexStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexStateResponse> _instance;
} _GetIndexStateResponse_default_instance_;
class DropIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropIndexRequest> _instance;
} _DropIndexRequest_default_instance_;
class InsertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertRequest> _instance;
} _InsertRequest_default_instance_;
class UpsertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpsertRequest> _instance;
} _UpsertRequest_default_instance_;
class MutationResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutationResult> _instance;
} _MutationResult_default_instance_;
class DeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRequest> _instance;
} _DeleteRequest_default_instance_;
class SearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchRequest> _instance;
} _SearchRequest_default_instance_;
class HitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hits> _instance;
} _Hits_default_instance_;
class SearchResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchResults> _instance;
} _SearchResults_default_instance_;
class SearchRequestV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchRequestV2> _instance;
} _SearchRequestV2_default_instance_;
class FlushRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushRequest> _instance;
} _FlushRequest_default_instance_;
class FlushResponse_CollSegIDsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushResponse_CollSegIDsEntry_DoNotUse> _instance;
} _FlushResponse_CollSegIDsEntry_DoNotUse_default_instance_;
class FlushResponse_FlushCollSegIDsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushResponse_FlushCollSegIDsEntry_DoNotUse> _instance;
} _FlushResponse_FlushCollSegIDsEntry_DoNotUse_default_instance_;
class FlushResponse_CollSealTimesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushResponse_CollSealTimesEntry_DoNotUse> _instance;
} _FlushResponse_CollSealTimesEntry_DoNotUse_default_instance_;
class FlushResponse_CollFlushTsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushResponse_CollFlushTsEntry_DoNotUse> _instance;
} _FlushResponse_CollFlushTsEntry_DoNotUse_default_instance_;
class FlushResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushResponse> _instance;
} _FlushResponse_default_instance_;
class QueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryRequest> _instance;
} _QueryRequest_default_instance_;
class QueryResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResults> _instance;
} _QueryResults_default_instance_;
class VectorIDsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorIDs> _instance;
} _VectorIDs_default_instance_;
class VectorsArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorsArray> _instance;
  const ::milvus::proto::milvus::VectorIDs* id_array_;
  const ::milvus::proto::schema::VectorField* data_array_;
} _VectorsArray_default_instance_;
class CalcDistanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalcDistanceRequest> _instance;
} _CalcDistanceRequest_default_instance_;
class CalcDistanceResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalcDistanceResults> _instance;
  const ::milvus::proto::schema::IntArray* int_dist_;
  const ::milvus::proto::schema::FloatArray* float_dist_;
} _CalcDistanceResults_default_instance_;
class FlushAllRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushAllRequest> _instance;
} _FlushAllRequest_default_instance_;
class FlushAllResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushAllResponse> _instance;
} _FlushAllResponse_default_instance_;
class PersistentSegmentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistentSegmentInfo> _instance;
} _PersistentSegmentInfo_default_instance_;
class GetPersistentSegmentInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPersistentSegmentInfoRequest> _instance;
} _GetPersistentSegmentInfoRequest_default_instance_;
class GetPersistentSegmentInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPersistentSegmentInfoResponse> _instance;
} _GetPersistentSegmentInfoResponse_default_instance_;
class QuerySegmentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuerySegmentInfo> _instance;
} _QuerySegmentInfo_default_instance_;
class GetQuerySegmentInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetQuerySegmentInfoRequest> _instance;
} _GetQuerySegmentInfoRequest_default_instance_;
class GetQuerySegmentInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetQuerySegmentInfoResponse> _instance;
} _GetQuerySegmentInfoResponse_default_instance_;
class DummyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DummyRequest> _instance;
} _DummyRequest_default_instance_;
class DummyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DummyResponse> _instance;
} _DummyResponse_default_instance_;
class RegisterLinkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterLinkRequest> _instance;
} _RegisterLinkRequest_default_instance_;
class RegisterLinkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterLinkResponse> _instance;
} _RegisterLinkResponse_default_instance_;
class GetMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMetricsRequest> _instance;
} _GetMetricsRequest_default_instance_;
class GetMetricsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMetricsResponse> _instance;
} _GetMetricsResponse_default_instance_;
class ComponentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComponentInfo> _instance;
} _ComponentInfo_default_instance_;
class ComponentStatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComponentStates> _instance;
} _ComponentStates_default_instance_;
class GetComponentStatesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetComponentStatesRequest> _instance;
} _GetComponentStatesRequest_default_instance_;
class LoadBalanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadBalanceRequest> _instance;
} _LoadBalanceRequest_default_instance_;
class ManualCompactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualCompactionRequest> _instance;
} _ManualCompactionRequest_default_instance_;
class ManualCompactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualCompactionResponse> _instance;
} _ManualCompactionResponse_default_instance_;
class GetCompactionStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCompactionStateRequest> _instance;
} _GetCompactionStateRequest_default_instance_;
class GetCompactionStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCompactionStateResponse> _instance;
} _GetCompactionStateResponse_default_instance_;
class GetCompactionPlansRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCompactionPlansRequest> _instance;
} _GetCompactionPlansRequest_default_instance_;
class GetCompactionPlansResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCompactionPlansResponse> _instance;
} _GetCompactionPlansResponse_default_instance_;
class CompactionMergeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompactionMergeInfo> _instance;
} _CompactionMergeInfo_default_instance_;
class GetFlushStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFlushStateRequest> _instance;
} _GetFlushStateRequest_default_instance_;
class GetFlushStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFlushStateResponse> _instance;
} _GetFlushStateResponse_default_instance_;
class GetFlushAllStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFlushAllStateRequest> _instance;
} _GetFlushAllStateRequest_default_instance_;
class GetFlushAllStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFlushAllStateResponse> _instance;
} _GetFlushAllStateResponse_default_instance_;
class ImportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImportRequest> _instance;
} _ImportRequest_default_instance_;
class ImportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImportResponse> _instance;
} _ImportResponse_default_instance_;
class GetImportStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetImportStateRequest> _instance;
} _GetImportStateRequest_default_instance_;
class GetImportStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetImportStateResponse> _instance;
} _GetImportStateResponse_default_instance_;
class ListImportTasksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListImportTasksRequest> _instance;
} _ListImportTasksRequest_default_instance_;
class ListImportTasksResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListImportTasksResponse> _instance;
} _ListImportTasksResponse_default_instance_;
class GetReplicasRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetReplicasRequest> _instance;
} _GetReplicasRequest_default_instance_;
class GetReplicasResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetReplicasResponse> _instance;
} _GetReplicasResponse_default_instance_;
class ReplicaInfo_NumOutboundNodeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicaInfo_NumOutboundNodeEntry_DoNotUse> _instance;
} _ReplicaInfo_NumOutboundNodeEntry_DoNotUse_default_instance_;
class ReplicaInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicaInfo> _instance;
} _ReplicaInfo_default_instance_;
class ShardReplicaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShardReplica> _instance;
} _ShardReplica_default_instance_;
class CreateCredentialRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateCredentialRequest> _instance;
} _CreateCredentialRequest_default_instance_;
class UpdateCredentialRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCredentialRequest> _instance;
} _UpdateCredentialRequest_default_instance_;
class DeleteCredentialRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteCredentialRequest> _instance;
} _DeleteCredentialRequest_default_instance_;
class ListCredUsersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCredUsersResponse> _instance;
} _ListCredUsersResponse_default_instance_;
class ListCredUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCredUsersRequest> _instance;
} _ListCredUsersRequest_default_instance_;
class RoleEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleEntity> _instance;
} _RoleEntity_default_instance_;
class UserEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserEntity> _instance;
} _UserEntity_default_instance_;
class CreateRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRoleRequest> _instance;
} _CreateRoleRequest_default_instance_;
class DropRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropRoleRequest> _instance;
} _DropRoleRequest_default_instance_;
class OperateUserRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperateUserRoleRequest> _instance;
} _OperateUserRoleRequest_default_instance_;
class SelectRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectRoleRequest> _instance;
} _SelectRoleRequest_default_instance_;
class RoleResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleResult> _instance;
} _RoleResult_default_instance_;
class SelectRoleResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectRoleResponse> _instance;
} _SelectRoleResponse_default_instance_;
class SelectUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectUserRequest> _instance;
} _SelectUserRequest_default_instance_;
class UserResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserResult> _instance;
} _UserResult_default_instance_;
class SelectUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectUserResponse> _instance;
} _SelectUserResponse_default_instance_;
class ObjectEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectEntity> _instance;
} _ObjectEntity_default_instance_;
class PrivilegeEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrivilegeEntity> _instance;
} _PrivilegeEntity_default_instance_;
class GrantorEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrantorEntity> _instance;
} _GrantorEntity_default_instance_;
class GrantPrivilegeEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrantPrivilegeEntity> _instance;
} _GrantPrivilegeEntity_default_instance_;
class GrantEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrantEntity> _instance;
} _GrantEntity_default_instance_;
class SelectGrantRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectGrantRequest> _instance;
} _SelectGrantRequest_default_instance_;
class SelectGrantResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectGrantResponse> _instance;
} _SelectGrantResponse_default_instance_;
class OperatePrivilegeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperatePrivilegeRequest> _instance;
} _OperatePrivilegeRequest_default_instance_;
class GetLoadingProgressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLoadingProgressRequest> _instance;
} _GetLoadingProgressRequest_default_instance_;
class GetLoadingProgressResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLoadingProgressResponse> _instance;
} _GetLoadingProgressResponse_default_instance_;
class GetLoadStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLoadStateRequest> _instance;
} _GetLoadStateRequest_default_instance_;
class GetLoadStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLoadStateResponse> _instance;
} _GetLoadStateResponse_default_instance_;
class MilvusExtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MilvusExt> _instance;
} _MilvusExt_default_instance_;
class GetVersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVersionRequest> _instance;
} _GetVersionRequest_default_instance_;
class GetVersionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVersionResponse> _instance;
} _GetVersionResponse_default_instance_;
class CheckHealthRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckHealthRequest> _instance;
} _CheckHealthRequest_default_instance_;
class CheckHealthResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckHealthResponse> _instance;
} _CheckHealthResponse_default_instance_;
class CreateResourceGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateResourceGroupRequest> _instance;
} _CreateResourceGroupRequest_default_instance_;
class DropResourceGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropResourceGroupRequest> _instance;
} _DropResourceGroupRequest_default_instance_;
class TransferNodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferNodeRequest> _instance;
} _TransferNodeRequest_default_instance_;
class TransferReplicaRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferReplicaRequest> _instance;
} _TransferReplicaRequest_default_instance_;
class ListResourceGroupsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListResourceGroupsRequest> _instance;
} _ListResourceGroupsRequest_default_instance_;
class ListResourceGroupsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListResourceGroupsResponse> _instance;
} _ListResourceGroupsResponse_default_instance_;
class DescribeResourceGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeResourceGroupRequest> _instance;
} _DescribeResourceGroupRequest_default_instance_;
class DescribeResourceGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeResourceGroupResponse> _instance;
} _DescribeResourceGroupResponse_default_instance_;
class ResourceGroup_NumLoadedReplicaEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceGroup_NumLoadedReplicaEntry_DoNotUse> _instance;
} _ResourceGroup_NumLoadedReplicaEntry_DoNotUse_default_instance_;
class ResourceGroup_NumOutgoingNodeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceGroup_NumOutgoingNodeEntry_DoNotUse> _instance;
} _ResourceGroup_NumOutgoingNodeEntry_DoNotUse_default_instance_;
class ResourceGroup_NumIncomingNodeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceGroup_NumIncomingNodeEntry_DoNotUse> _instance;
} _ResourceGroup_NumIncomingNodeEntry_DoNotUse_default_instance_;
class ResourceGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceGroup> _instance;
} _ResourceGroup_default_instance_;
class RenameCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenameCollectionRequest> _instance;
} _RenameCollectionRequest_default_instance_;
class GetIndexStatisticsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexStatisticsRequest> _instance;
} _GetIndexStatisticsRequest_default_instance_;
class GetIndexStatisticsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexStatisticsResponse> _instance;
} _GetIndexStatisticsResponse_default_instance_;
class ConnectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectRequest> _instance;
} _ConnectRequest_default_instance_;
class ConnectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectResponse> _instance;
} _ConnectResponse_default_instance_;
class AllocTimestampRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocTimestampRequest> _instance;
} _AllocTimestampRequest_default_instance_;
class AllocTimestampResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocTimestampResponse> _instance;
} _AllocTimestampResponse_default_instance_;
class CreateDatabaseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateDatabaseRequest> _instance;
} _CreateDatabaseRequest_default_instance_;
class DropDatabaseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropDatabaseRequest> _instance;
} _DropDatabaseRequest_default_instance_;
class ListDatabasesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDatabasesRequest> _instance;
} _ListDatabasesRequest_default_instance_;
class ListDatabasesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDatabasesResponse> _instance;
} _ListDatabasesResponse_default_instance_;
class ReplicateMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicateMessageRequest> _instance;
} _ReplicateMessageRequest_default_instance_;
class ReplicateMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicateMessageResponse> _instance;
} _ReplicateMessageResponse_default_instance_;
}  // namespace milvus
}  // namespace proto
}  // namespace milvus
static void InitDefaultsscc_info_AllocTimestampRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_AllocTimestampRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::AllocTimestampRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::AllocTimestampRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllocTimestampRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllocTimestampRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_AllocTimestampResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_AllocTimestampResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::AllocTimestampResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::AllocTimestampResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllocTimestampResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllocTimestampResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_AlterAliasRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_AlterAliasRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::AlterAliasRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::AlterAliasRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlterAliasRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AlterAliasRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_AlterCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_AlterCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::AlterCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::AlterCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlterCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AlterCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_AlterIndexRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_AlterIndexRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::AlterIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::AlterIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlterIndexRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AlterIndexRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_BoolResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_BoolResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::BoolResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::BoolResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoolResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BoolResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_CalcDistanceRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CalcDistanceRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CalcDistanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CalcDistanceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CalcDistanceRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CalcDistanceRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_VectorsArray_milvus_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_CalcDistanceResults_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CalcDistanceResults_default_instance_;
    new (ptr) ::milvus::proto::milvus::CalcDistanceResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CalcDistanceResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CalcDistanceResults_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CalcDistanceResults_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_IntArray_schema_2eproto.base,
      &scc_info_FloatArray_schema_2eproto.base,}};

static void InitDefaultsscc_info_CheckHealthRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CheckHealthRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CheckHealthRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CheckHealthRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckHealthRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckHealthRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_CheckHealthResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CheckHealthResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::CheckHealthResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CheckHealthResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckHealthResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CheckHealthResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_CompactionMergeInfo_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CompactionMergeInfo_default_instance_;
    new (ptr) ::milvus::proto::milvus::CompactionMergeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CompactionMergeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompactionMergeInfo_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompactionMergeInfo_milvus_2eproto}, {}};

static void InitDefaultsscc_info_ComponentInfo_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ComponentInfo_default_instance_;
    new (ptr) ::milvus::proto::milvus::ComponentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ComponentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ComponentInfo_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ComponentInfo_milvus_2eproto}, {
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_ComponentStates_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ComponentStates_default_instance_;
    new (ptr) ::milvus::proto::milvus::ComponentStates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ComponentStates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ComponentStates_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ComponentStates_milvus_2eproto}, {
      &scc_info_ComponentInfo_milvus_2eproto.base,
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ConnectRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ConnectRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ConnectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ConnectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConnectRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConnectRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_ClientInfo_common_2eproto.base,}};

static void InitDefaultsscc_info_ConnectResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ConnectResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ConnectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ConnectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConnectResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConnectResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_ServerInfo_common_2eproto.base,}};

static void InitDefaultsscc_info_CreateAliasRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CreateAliasRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CreateAliasRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CreateAliasRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateAliasRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateAliasRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_CreateCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CreateCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CreateCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CreateCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_CreateCredentialRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CreateCredentialRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CreateCredentialRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CreateCredentialRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateCredentialRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateCredentialRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_CreateDatabaseRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CreateDatabaseRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CreateDatabaseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CreateDatabaseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateDatabaseRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateDatabaseRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_CreateIndexRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CreateIndexRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CreateIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CreateIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateIndexRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateIndexRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_CreatePartitionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CreatePartitionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CreatePartitionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CreatePartitionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreatePartitionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreatePartitionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_CreateResourceGroupRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CreateResourceGroupRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CreateResourceGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CreateResourceGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateResourceGroupRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateResourceGroupRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_CreateRoleRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CreateRoleRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CreateRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CreateRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateRoleRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateRoleRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_RoleEntity_milvus_2eproto.base,}};

static void InitDefaultsscc_info_DeleteCredentialRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DeleteCredentialRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DeleteCredentialRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DeleteCredentialRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteCredentialRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteCredentialRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DeleteRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DeleteRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeAliasRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeAliasRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeAliasRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeAliasRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeAliasRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescribeAliasRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeAliasResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeAliasResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeAliasResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeAliasResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeAliasResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescribeAliasResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescribeCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeCollectionResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeCollectionResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeCollectionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeCollectionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DescribeCollectionResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_DescribeCollectionResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_CollectionSchema_schema_2eproto.base,
      &scc_info_KeyDataPair_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeIndexRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeIndexRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeIndexRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescribeIndexRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeIndexResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeIndexResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeIndexResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeIndexResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DescribeIndexResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DescribeIndexResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_IndexDescription_milvus_2eproto.base,}};

static void InitDefaultsscc_info_DescribeResourceGroupRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeResourceGroupRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeResourceGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeResourceGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeResourceGroupRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescribeResourceGroupRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeResourceGroupResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeResourceGroupResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeResourceGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeResourceGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DescribeResourceGroupResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DescribeResourceGroupResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_ResourceGroup_milvus_2eproto.base,}};

static void InitDefaultsscc_info_DescribeSegmentRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeSegmentRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeSegmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeSegmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeSegmentRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescribeSegmentRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeSegmentResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeSegmentResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeSegmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeSegmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeSegmentResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescribeSegmentResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_DropAliasRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DropAliasRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DropAliasRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DropAliasRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropAliasRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DropAliasRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DropCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DropCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DropCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DropCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DropCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DropDatabaseRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DropDatabaseRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DropDatabaseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DropDatabaseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropDatabaseRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DropDatabaseRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DropIndexRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DropIndexRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DropIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DropIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropIndexRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DropIndexRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DropPartitionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DropPartitionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DropPartitionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DropPartitionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropPartitionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DropPartitionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DropResourceGroupRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DropResourceGroupRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DropResourceGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DropResourceGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropResourceGroupRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DropResourceGroupRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DropRoleRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DropRoleRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DropRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DropRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropRoleRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DropRoleRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DummyRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DummyRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DummyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DummyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DummyRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DummyRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_DummyResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DummyResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::DummyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DummyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DummyResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DummyResponse_milvus_2eproto}, {}};

static void InitDefaultsscc_info_FlushAllRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_FlushAllRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::FlushAllRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::FlushAllRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushAllRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlushAllRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_FlushAllResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_FlushAllResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::FlushAllResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::FlushAllResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushAllResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlushAllResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_FlushRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_FlushRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::FlushRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::FlushRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlushRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_FlushResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_FlushResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::FlushResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::FlushResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FlushResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_FlushResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_FlushResponse_CollSegIDsEntry_DoNotUse_milvus_2eproto.base,
      &scc_info_FlushResponse_FlushCollSegIDsEntry_DoNotUse_milvus_2eproto.base,
      &scc_info_FlushResponse_CollSealTimesEntry_DoNotUse_milvus_2eproto.base,
      &scc_info_FlushResponse_CollFlushTsEntry_DoNotUse_milvus_2eproto.base,}};

static void InitDefaultsscc_info_FlushResponse_CollFlushTsEntry_DoNotUse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_FlushResponse_CollFlushTsEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::milvus::FlushResponse_CollFlushTsEntry_DoNotUse();
  }
  ::milvus::proto::milvus::FlushResponse_CollFlushTsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushResponse_CollFlushTsEntry_DoNotUse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlushResponse_CollFlushTsEntry_DoNotUse_milvus_2eproto}, {}};

static void InitDefaultsscc_info_FlushResponse_CollSealTimesEntry_DoNotUse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_FlushResponse_CollSealTimesEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse();
  }
  ::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushResponse_CollSealTimesEntry_DoNotUse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlushResponse_CollSealTimesEntry_DoNotUse_milvus_2eproto}, {}};

static void InitDefaultsscc_info_FlushResponse_CollSegIDsEntry_DoNotUse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_FlushResponse_CollSegIDsEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse();
  }
  ::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushResponse_CollSegIDsEntry_DoNotUse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlushResponse_CollSegIDsEntry_DoNotUse_milvus_2eproto}, {
      &scc_info_LongArray_schema_2eproto.base,}};

static void InitDefaultsscc_info_FlushResponse_FlushCollSegIDsEntry_DoNotUse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_FlushResponse_FlushCollSegIDsEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse();
  }
  ::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushResponse_FlushCollSegIDsEntry_DoNotUse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlushResponse_FlushCollSegIDsEntry_DoNotUse_milvus_2eproto}, {
      &scc_info_LongArray_schema_2eproto.base,}};

static void InitDefaultsscc_info_GetCollectionStatisticsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetCollectionStatisticsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetCollectionStatisticsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetCollectionStatisticsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCollectionStatisticsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCollectionStatisticsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetCollectionStatisticsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetCollectionStatisticsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetCollectionStatisticsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetCollectionStatisticsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetCollectionStatisticsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetCollectionStatisticsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_GetCompactionPlansRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetCompactionPlansRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetCompactionPlansRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetCompactionPlansRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCompactionPlansRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetCompactionPlansRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_GetCompactionPlansResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetCompactionPlansResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetCompactionPlansResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetCompactionPlansResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetCompactionPlansResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetCompactionPlansResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_CompactionMergeInfo_milvus_2eproto.base,}};

static void InitDefaultsscc_info_GetCompactionStateRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetCompactionStateRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetCompactionStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetCompactionStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCompactionStateRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetCompactionStateRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_GetCompactionStateResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetCompactionStateResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetCompactionStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetCompactionStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCompactionStateResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCompactionStateResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_GetComponentStatesRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetComponentStatesRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetComponentStatesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetComponentStatesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetComponentStatesRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetComponentStatesRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_GetFlushAllStateRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetFlushAllStateRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetFlushAllStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetFlushAllStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFlushAllStateRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFlushAllStateRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetFlushAllStateResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetFlushAllStateResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetFlushAllStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetFlushAllStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFlushAllStateResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFlushAllStateResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_GetFlushStateRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetFlushStateRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetFlushStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetFlushStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFlushStateRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetFlushStateRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_GetFlushStateResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetFlushStateResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetFlushStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetFlushStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFlushStateResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFlushStateResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_GetImportStateRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetImportStateRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetImportStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetImportStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetImportStateRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetImportStateRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_GetImportStateResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetImportStateResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetImportStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetImportStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetImportStateResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetImportStateResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_GetIndexBuildProgressRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetIndexBuildProgressRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetIndexBuildProgressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetIndexBuildProgressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetIndexBuildProgressRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetIndexBuildProgressRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetIndexBuildProgressResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetIndexBuildProgressResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetIndexBuildProgressResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetIndexBuildProgressResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetIndexBuildProgressResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetIndexBuildProgressResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_GetIndexStateRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetIndexStateRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetIndexStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetIndexStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetIndexStateRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetIndexStateRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetIndexStateResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetIndexStateResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetIndexStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetIndexStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetIndexStateResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetIndexStateResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_GetIndexStatisticsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetIndexStatisticsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetIndexStatisticsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetIndexStatisticsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetIndexStatisticsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetIndexStatisticsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetIndexStatisticsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetIndexStatisticsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetIndexStatisticsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetIndexStatisticsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetIndexStatisticsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetIndexStatisticsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_IndexDescription_milvus_2eproto.base,}};

static void InitDefaultsscc_info_GetLoadStateRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetLoadStateRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetLoadStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetLoadStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLoadStateRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLoadStateRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetLoadStateResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetLoadStateResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetLoadStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetLoadStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLoadStateResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLoadStateResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_GetLoadingProgressRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetLoadingProgressRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetLoadingProgressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetLoadingProgressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLoadingProgressRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLoadingProgressRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetLoadingProgressResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetLoadingProgressResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetLoadingProgressResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetLoadingProgressResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLoadingProgressResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLoadingProgressResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_GetMetricsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetMetricsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMetricsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMetricsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetMetricsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetMetricsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetMetricsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetMetricsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMetricsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMetricsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_GetPartitionStatisticsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetPartitionStatisticsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetPartitionStatisticsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetPartitionStatisticsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPartitionStatisticsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPartitionStatisticsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetPartitionStatisticsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetPartitionStatisticsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetPartitionStatisticsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetPartitionStatisticsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetPartitionStatisticsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetPartitionStatisticsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_GetPersistentSegmentInfoRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetPersistentSegmentInfoRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetPersistentSegmentInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetPersistentSegmentInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPersistentSegmentInfoRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPersistentSegmentInfoRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetPersistentSegmentInfoResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetPersistentSegmentInfoResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetPersistentSegmentInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetPersistentSegmentInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetPersistentSegmentInfoResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetPersistentSegmentInfoResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_PersistentSegmentInfo_milvus_2eproto.base,}};

static void InitDefaultsscc_info_GetQuerySegmentInfoRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetQuerySegmentInfoRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetQuerySegmentInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetQuerySegmentInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetQuerySegmentInfoRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetQuerySegmentInfoRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetQuerySegmentInfoResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetQuerySegmentInfoResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetQuerySegmentInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetQuerySegmentInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetQuerySegmentInfoResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetQuerySegmentInfoResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_QuerySegmentInfo_milvus_2eproto.base,}};

static void InitDefaultsscc_info_GetReplicasRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetReplicasRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetReplicasRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetReplicasRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetReplicasRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetReplicasRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetReplicasResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetReplicasResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetReplicasResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetReplicasResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetReplicasResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetReplicasResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_ReplicaInfo_milvus_2eproto.base,}};

static void InitDefaultsscc_info_GetStatisticsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetStatisticsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetStatisticsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetStatisticsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStatisticsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStatisticsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetStatisticsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetStatisticsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetStatisticsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetStatisticsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetStatisticsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetStatisticsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_GetVersionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetVersionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetVersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetVersionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVersionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetVersionRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_GetVersionResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetVersionResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetVersionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetVersionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetVersionResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetVersionResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_GrantEntity_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GrantEntity_default_instance_;
    new (ptr) ::milvus::proto::milvus::GrantEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GrantEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GrantEntity_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GrantEntity_milvus_2eproto}, {
      &scc_info_RoleEntity_milvus_2eproto.base,
      &scc_info_ObjectEntity_milvus_2eproto.base,
      &scc_info_GrantorEntity_milvus_2eproto.base,}};

static void InitDefaultsscc_info_GrantPrivilegeEntity_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GrantPrivilegeEntity_default_instance_;
    new (ptr) ::milvus::proto::milvus::GrantPrivilegeEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GrantPrivilegeEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GrantPrivilegeEntity_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GrantPrivilegeEntity_milvus_2eproto}, {
      &scc_info_GrantorEntity_milvus_2eproto.base,}};

static void InitDefaultsscc_info_GrantorEntity_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GrantorEntity_default_instance_;
    new (ptr) ::milvus::proto::milvus::GrantorEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GrantorEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GrantorEntity_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GrantorEntity_milvus_2eproto}, {
      &scc_info_UserEntity_milvus_2eproto.base,
      &scc_info_PrivilegeEntity_milvus_2eproto.base,}};

static void InitDefaultsscc_info_HasCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_HasCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::HasCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::HasCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HasCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HasCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_HasPartitionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_HasPartitionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::HasPartitionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::HasPartitionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HasPartitionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HasPartitionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_Hits_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_Hits_default_instance_;
    new (ptr) ::milvus::proto::milvus::Hits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::Hits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hits_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hits_milvus_2eproto}, {}};

static void InitDefaultsscc_info_ImportRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ImportRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ImportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ImportRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImportRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImportRequest_milvus_2eproto}, {
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_ImportResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ImportResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ImportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ImportResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImportResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImportResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_IndexDescription_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_IndexDescription_default_instance_;
    new (ptr) ::milvus::proto::milvus::IndexDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::IndexDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IndexDescription_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IndexDescription_milvus_2eproto}, {
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_InsertRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_InsertRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::InsertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::InsertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_FieldData_schema_2eproto.base,}};

static void InitDefaultsscc_info_ListAliasesRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ListAliasesRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ListAliasesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ListAliasesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAliasesRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAliasesRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ListAliasesResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ListAliasesResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ListAliasesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ListAliasesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAliasesResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAliasesResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ListCredUsersRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ListCredUsersRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ListCredUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ListCredUsersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCredUsersRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCredUsersRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ListCredUsersResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ListCredUsersResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ListCredUsersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ListCredUsersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCredUsersResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCredUsersResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ListDatabasesRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ListDatabasesRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ListDatabasesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ListDatabasesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListDatabasesRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListDatabasesRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ListDatabasesResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ListDatabasesResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ListDatabasesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ListDatabasesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListDatabasesResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListDatabasesResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ListImportTasksRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ListImportTasksRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ListImportTasksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ListImportTasksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListImportTasksRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListImportTasksRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_ListImportTasksResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ListImportTasksResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ListImportTasksResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ListImportTasksResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListImportTasksResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListImportTasksResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_GetImportStateResponse_milvus_2eproto.base,}};

static void InitDefaultsscc_info_ListResourceGroupsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ListResourceGroupsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ListResourceGroupsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ListResourceGroupsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListResourceGroupsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListResourceGroupsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ListResourceGroupsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ListResourceGroupsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ListResourceGroupsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ListResourceGroupsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListResourceGroupsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListResourceGroupsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_LoadBalanceRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_LoadBalanceRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::LoadBalanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::LoadBalanceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadBalanceRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadBalanceRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_LoadCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_LoadCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::LoadCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::LoadCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_LoadPartitionsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_LoadPartitionsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::LoadPartitionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::LoadPartitionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadPartitionsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadPartitionsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ManualCompactionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ManualCompactionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ManualCompactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ManualCompactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualCompactionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ManualCompactionRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_ManualCompactionResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ManualCompactionResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ManualCompactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ManualCompactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualCompactionResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ManualCompactionResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_MilvusExt_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_MilvusExt_default_instance_;
    new (ptr) ::milvus::proto::milvus::MilvusExt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::MilvusExt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MilvusExt_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MilvusExt_milvus_2eproto}, {}};

static void InitDefaultsscc_info_MutationResult_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_MutationResult_default_instance_;
    new (ptr) ::milvus::proto::milvus::MutationResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::MutationResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MutationResult_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MutationResult_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_IDs_schema_2eproto.base,}};

static void InitDefaultsscc_info_ObjectEntity_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ObjectEntity_default_instance_;
    new (ptr) ::milvus::proto::milvus::ObjectEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ObjectEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectEntity_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectEntity_milvus_2eproto}, {}};

static void InitDefaultsscc_info_OperatePrivilegeRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_OperatePrivilegeRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::OperatePrivilegeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::OperatePrivilegeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OperatePrivilegeRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OperatePrivilegeRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_GrantEntity_milvus_2eproto.base,}};

static void InitDefaultsscc_info_OperateUserRoleRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_OperateUserRoleRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::OperateUserRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::OperateUserRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperateUserRoleRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OperateUserRoleRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_PersistentSegmentInfo_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_PersistentSegmentInfo_default_instance_;
    new (ptr) ::milvus::proto::milvus::PersistentSegmentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::PersistentSegmentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistentSegmentInfo_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PersistentSegmentInfo_milvus_2eproto}, {}};

static void InitDefaultsscc_info_PrivilegeEntity_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_PrivilegeEntity_default_instance_;
    new (ptr) ::milvus::proto::milvus::PrivilegeEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::PrivilegeEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivilegeEntity_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrivilegeEntity_milvus_2eproto}, {}};

static void InitDefaultsscc_info_QueryRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_QueryRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::QueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::QueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueryRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QueryRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_QueryResults_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_QueryResults_default_instance_;
    new (ptr) ::milvus::proto::milvus::QueryResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::QueryResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueryResults_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QueryResults_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_FieldData_schema_2eproto.base,}};

static void InitDefaultsscc_info_QuerySegmentInfo_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_QuerySegmentInfo_default_instance_;
    new (ptr) ::milvus::proto::milvus::QuerySegmentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::QuerySegmentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuerySegmentInfo_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuerySegmentInfo_milvus_2eproto}, {}};

static void InitDefaultsscc_info_RegisterLinkRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_RegisterLinkRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::RegisterLinkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::RegisterLinkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterLinkRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterLinkRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_RegisterLinkResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_RegisterLinkResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::RegisterLinkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::RegisterLinkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegisterLinkResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RegisterLinkResponse_milvus_2eproto}, {
      &scc_info_Address_common_2eproto.base,
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ReleaseCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ReleaseCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ReleaseCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleaseCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReleaseCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ReleasePartitionsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ReleasePartitionsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ReleasePartitionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ReleasePartitionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleasePartitionsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReleasePartitionsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_RenameCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_RenameCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::RenameCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::RenameCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RenameCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RenameCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ReplicaInfo_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ReplicaInfo_default_instance_;
    new (ptr) ::milvus::proto::milvus::ReplicaInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ReplicaInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReplicaInfo_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReplicaInfo_milvus_2eproto}, {
      &scc_info_ShardReplica_milvus_2eproto.base,
      &scc_info_ReplicaInfo_NumOutboundNodeEntry_DoNotUse_milvus_2eproto.base,}};

static void InitDefaultsscc_info_ReplicaInfo_NumOutboundNodeEntry_DoNotUse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ReplicaInfo_NumOutboundNodeEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse();
  }
  ::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicaInfo_NumOutboundNodeEntry_DoNotUse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplicaInfo_NumOutboundNodeEntry_DoNotUse_milvus_2eproto}, {}};

static void InitDefaultsscc_info_ReplicateMessageRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ReplicateMessageRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ReplicateMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ReplicateMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReplicateMessageRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReplicateMessageRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_MsgPosition_msg_2eproto.base,}};

static void InitDefaultsscc_info_ReplicateMessageResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ReplicateMessageResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ReplicateMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ReplicateMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplicateMessageResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplicateMessageResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ResourceGroup_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ResourceGroup_default_instance_;
    new (ptr) ::milvus::proto::milvus::ResourceGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ResourceGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ResourceGroup_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ResourceGroup_milvus_2eproto}, {
      &scc_info_ResourceGroup_NumLoadedReplicaEntry_DoNotUse_milvus_2eproto.base,
      &scc_info_ResourceGroup_NumOutgoingNodeEntry_DoNotUse_milvus_2eproto.base,
      &scc_info_ResourceGroup_NumIncomingNodeEntry_DoNotUse_milvus_2eproto.base,}};

static void InitDefaultsscc_info_ResourceGroup_NumIncomingNodeEntry_DoNotUse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ResourceGroup_NumIncomingNodeEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse();
  }
  ::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceGroup_NumIncomingNodeEntry_DoNotUse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceGroup_NumIncomingNodeEntry_DoNotUse_milvus_2eproto}, {}};

static void InitDefaultsscc_info_ResourceGroup_NumLoadedReplicaEntry_DoNotUse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ResourceGroup_NumLoadedReplicaEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse();
  }
  ::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceGroup_NumLoadedReplicaEntry_DoNotUse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceGroup_NumLoadedReplicaEntry_DoNotUse_milvus_2eproto}, {}};

static void InitDefaultsscc_info_ResourceGroup_NumOutgoingNodeEntry_DoNotUse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ResourceGroup_NumOutgoingNodeEntry_DoNotUse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse();
  }
  ::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceGroup_NumOutgoingNodeEntry_DoNotUse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceGroup_NumOutgoingNodeEntry_DoNotUse_milvus_2eproto}, {}};

static void InitDefaultsscc_info_RoleEntity_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_RoleEntity_default_instance_;
    new (ptr) ::milvus::proto::milvus::RoleEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::RoleEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleEntity_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleEntity_milvus_2eproto}, {}};

static void InitDefaultsscc_info_RoleResult_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_RoleResult_default_instance_;
    new (ptr) ::milvus::proto::milvus::RoleResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::RoleResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoleResult_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoleResult_milvus_2eproto}, {
      &scc_info_RoleEntity_milvus_2eproto.base,
      &scc_info_UserEntity_milvus_2eproto.base,}};

static void InitDefaultsscc_info_SearchRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_SearchRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::SearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::SearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SearchRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SearchRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_SearchRequestV2_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_SearchRequestV2_default_instance_;
    new (ptr) ::milvus::proto::milvus::SearchRequestV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::SearchRequestV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SearchRequestV2_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SearchRequestV2_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_SearchRequest_milvus_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_SearchResults_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_SearchResults_default_instance_;
    new (ptr) ::milvus::proto::milvus::SearchResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::SearchResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SearchResults_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SearchResults_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_SearchResultData_schema_2eproto.base,}};

static void InitDefaultsscc_info_SelectGrantRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_SelectGrantRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::SelectGrantRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::SelectGrantRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SelectGrantRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SelectGrantRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_GrantEntity_milvus_2eproto.base,}};

static void InitDefaultsscc_info_SelectGrantResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_SelectGrantResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::SelectGrantResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::SelectGrantResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SelectGrantResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SelectGrantResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_GrantEntity_milvus_2eproto.base,}};

static void InitDefaultsscc_info_SelectRoleRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_SelectRoleRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::SelectRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::SelectRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SelectRoleRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SelectRoleRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_RoleEntity_milvus_2eproto.base,}};

static void InitDefaultsscc_info_SelectRoleResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_SelectRoleResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::SelectRoleResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::SelectRoleResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SelectRoleResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SelectRoleResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_RoleResult_milvus_2eproto.base,}};

static void InitDefaultsscc_info_SelectUserRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_SelectUserRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::SelectUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::SelectUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SelectUserRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SelectUserRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_UserEntity_milvus_2eproto.base,}};

static void InitDefaultsscc_info_SelectUserResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_SelectUserResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::SelectUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::SelectUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SelectUserResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SelectUserResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_UserResult_milvus_2eproto.base,}};

static void InitDefaultsscc_info_ShardReplica_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShardReplica_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShardReplica();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShardReplica::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShardReplica_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShardReplica_milvus_2eproto}, {}};

static void InitDefaultsscc_info_ShowCollectionsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowCollectionsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowCollectionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowCollectionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowCollectionsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShowCollectionsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ShowCollectionsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowCollectionsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowCollectionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowCollectionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowCollectionsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShowCollectionsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ShowPartitionsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowPartitionsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowPartitionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowPartitionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowPartitionsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShowPartitionsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ShowPartitionsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowPartitionsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowPartitionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowPartitionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowPartitionsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShowPartitionsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ShowSegmentsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowSegmentsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowSegmentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowSegmentsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowSegmentsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShowSegmentsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ShowSegmentsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowSegmentsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowSegmentsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowSegmentsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowSegmentsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShowSegmentsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_StringResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_StringResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::StringResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::StringResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StringResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_TransferNodeRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_TransferNodeRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::TransferNodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::TransferNodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferNodeRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferNodeRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_TransferReplicaRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_TransferReplicaRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::TransferReplicaRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::TransferReplicaRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferReplicaRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferReplicaRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCredentialRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_UpdateCredentialRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::UpdateCredentialRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::UpdateCredentialRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateCredentialRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateCredentialRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_UpsertRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_UpsertRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::UpsertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::UpsertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpsertRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpsertRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_FieldData_schema_2eproto.base,}};

static void InitDefaultsscc_info_UserEntity_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_UserEntity_default_instance_;
    new (ptr) ::milvus::proto::milvus::UserEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::UserEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEntity_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserEntity_milvus_2eproto}, {}};

static void InitDefaultsscc_info_UserResult_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_UserResult_default_instance_;
    new (ptr) ::milvus::proto::milvus::UserResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::UserResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserResult_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UserResult_milvus_2eproto}, {
      &scc_info_UserEntity_milvus_2eproto.base,
      &scc_info_RoleEntity_milvus_2eproto.base,}};

static void InitDefaultsscc_info_VectorIDs_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_VectorIDs_default_instance_;
    new (ptr) ::milvus::proto::milvus::VectorIDs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::VectorIDs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VectorIDs_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VectorIDs_milvus_2eproto}, {
      &scc_info_IDs_schema_2eproto.base,}};

static void InitDefaultsscc_info_VectorsArray_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_VectorsArray_default_instance_;
    new (ptr) ::milvus::proto::milvus::VectorsArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::VectorsArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VectorsArray_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VectorsArray_milvus_2eproto}, {
      &scc_info_VectorIDs_milvus_2eproto.base,
      &scc_info_VectorField_schema_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_milvus_2eproto[164];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_milvus_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_milvus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_milvus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateAliasRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateAliasRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateAliasRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateAliasRequest, alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropAliasRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropAliasRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropAliasRequest, alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterAliasRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterAliasRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterAliasRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterAliasRequest, alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasRequest, alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasResponse, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasResponse, alias_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeAliasResponse, collection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesRequest, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesResponse, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesResponse, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListAliasesResponse, aliases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, schema_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, shards_num_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, consistency_level_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, properties_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, num_partitions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterCollectionRequest, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, time_stamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::BoolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::BoolResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::BoolResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::StringResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::StringResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::StringResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, time_stamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, schema_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, virtual_channel_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, physical_channel_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, created_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, created_utc_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, shards_num_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, aliases_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, start_positions_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, consistency_level_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, properties_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, num_partitions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, replica_number_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, resource_groups_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, refresh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsRequest, guarantee_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetStatisticsResponse, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsResponse, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, collection_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, collection_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, collection_ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, created_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, created_utc_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, inmemory_percentages_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, query_service_available_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, replica_number_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, resource_groups_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, refresh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, partition_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsResponse, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, partitionids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, created_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, created_utc_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, inmemory_percentages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, segmentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, buildid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, enable_index_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, fieldid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, partitionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsResponse, segmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, extra_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterIndexRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterIndexRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterIndexRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterIndexRequest, index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AlterIndexRequest, extra_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, indexed_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, total_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, index_state_fail_reason_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, pending_index_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexResponse, index_descriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressResponse, indexed_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexBuildProgressResponse, total_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateResponse, state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateResponse, fail_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, fields_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, hash_keys_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, num_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, fields_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, hash_keys_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpsertRequest, num_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, succ_index_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, err_index_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, acknowledged_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, insert_cnt_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, delete_cnt_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, upsert_cnt_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MutationResult, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, expr_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, hash_keys_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteRequest, consistency_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, dsl_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, placeholder_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, dsl_type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, output_fields_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, search_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, travel_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, guarantee_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, nq_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, not_return_all_meta_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, consistency_level_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, use_default_consistency_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, search_by_primary_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, row_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, scores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchResults, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchResults, results_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchResults, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, requests_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, rank_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, travel_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, guarantee_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, not_return_all_meta_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, output_fields_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, consistency_level_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequestV2, use_default_consistency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, collection_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollFlushTsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollFlushTsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollFlushTsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse_CollFlushTsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, coll_segids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, flush_coll_segids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, coll_seal_times_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushResponse, coll_flush_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, expr_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, output_fields_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, travel_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, guarantee_timestamp_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, query_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, not_return_all_meta_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, consistency_level_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryRequest, use_default_consistency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryResults, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryResults, fields_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryResults, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QueryResults, output_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorIDs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorIDs, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorIDs, field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorIDs, id_array_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorIDs, partition_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorsArray, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorsArray, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::milvus::proto::milvus::VectorsArrayDefaultTypeInternal, id_array_),
  offsetof(::milvus::proto::milvus::VectorsArrayDefaultTypeInternal, data_array_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::VectorsArray, array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceRequest, op_left_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceRequest, op_right_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceRequest, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceResults, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceResults, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceResults, status_),
  offsetof(::milvus::proto::milvus::CalcDistanceResultsDefaultTypeInternal, int_dist_),
  offsetof(::milvus::proto::milvus::CalcDistanceResultsDefaultTypeInternal, float_dist_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CalcDistanceResults, array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushAllRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushAllRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushAllResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushAllResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushAllResponse, flush_all_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, num_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, dbname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, collectionname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoResponse, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, mem_size_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, num_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, nodeid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, nodeids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, dbname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, collectionname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoResponse, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DummyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DummyRequest, request_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DummyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DummyResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkResponse, address_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsResponse, response_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetMetricsResponse, component_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentInfo, nodeid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentInfo, role_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentInfo, state_code_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentInfo, extra_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentStates, state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentStates, subcomponent_states_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ComponentStates, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetComponentStatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, src_nodeid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, dst_nodeids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, sealed_segmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, collectionname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadBalanceRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionRequest, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionRequest, timetravel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionResponse, compactionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ManualCompactionResponse, compactionplancount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateRequest, compactionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, executingplanno_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, timeoutplanno_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, completedplanno_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionStateResponse, failedplanno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansRequest, compactionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansResponse, state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCompactionPlansResponse, mergeinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CompactionMergeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CompactionMergeInfo, sources_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CompactionMergeInfo, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateRequest, segmentids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateRequest, flush_ts_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateRequest, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushStateResponse, flushed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateRequest, flush_all_ts_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetFlushAllStateResponse, flushed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, channel_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, row_based_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, files_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, options_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ImportResponse, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateRequest, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, state_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, row_count_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, id_list_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, infos_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, collection_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, segment_ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetImportStateResponse, create_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListImportTasksResponse, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, with_shard_nodes_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetReplicasResponse, replicas_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, replicaid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, partition_ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, shard_replicas_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, node_ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, resource_group_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicaInfo, num_outbound_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShardReplica, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShardReplica, leaderid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShardReplica, leader_addr_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShardReplica, dm_channel_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShardReplica, node_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, username_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, password_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, created_utc_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCredentialRequest, modified_utc_timestamps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, username_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, oldpassword_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, newpassword_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, created_utc_timestamps_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UpdateCredentialRequest, modified_utc_timestamps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteCredentialRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteCredentialRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DeleteCredentialRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListCredUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListCredUsersResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListCredUsersResponse, usernames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListCredUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListCredUsersRequest, base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RoleEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RoleEntity, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UserEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UserEntity, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateRoleRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateRoleRequest, entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropRoleRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropRoleRequest, role_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperateUserRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperateUserRoleRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperateUserRoleRequest, username_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperateUserRoleRequest, role_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperateUserRoleRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleRequest, role_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleRequest, include_user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RoleResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RoleResult, role_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RoleResult, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectRoleResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserRequest, user_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserRequest, include_role_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UserResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UserResult, user_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::UserResult, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectUserResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ObjectEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ObjectEntity, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PrivilegeEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PrivilegeEntity, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantorEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantorEntity, user_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantorEntity, privilege_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantPrivilegeEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantPrivilegeEntity, entities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, role_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, object_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, object_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, grantor_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GrantEntity, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantRequest, entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SelectGrantResponse, entities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperatePrivilegeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperatePrivilegeRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperatePrivilegeRequest, entity_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::OperatePrivilegeRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressRequest, partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressResponse, progress_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadingProgressResponse, refresh_progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateRequest, partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetLoadStateResponse, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MilvusExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::MilvusExt, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetVersionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetVersionResponse, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthResponse, ishealthy_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthResponse, reasons_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CheckHealthResponse, quota_states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateResourceGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateResourceGroupRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateResourceGroupRequest, resource_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropResourceGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropResourceGroupRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropResourceGroupRequest, resource_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferNodeRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferNodeRequest, source_resource_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferNodeRequest, target_resource_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferNodeRequest, num_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, source_resource_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, target_resource_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, num_replica_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::TransferReplicaRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListResourceGroupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListResourceGroupsRequest, base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListResourceGroupsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListResourceGroupsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListResourceGroupsResponse, resource_groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupRequest, resource_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeResourceGroupResponse, resource_group_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, capacity_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, num_available_node_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, num_loaded_replica_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, num_outgoing_node_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ResourceGroup, num_incoming_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RenameCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RenameCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RenameCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RenameCollectionRequest, oldname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RenameCollectionRequest, newname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RenameCollectionRequest, newdbname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsRequest, index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsRequest, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStatisticsResponse, index_descriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectRequest, client_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectResponse, server_info_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ConnectResponse, identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AllocTimestampRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AllocTimestampRequest, base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AllocTimestampResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AllocTimestampResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::AllocTimestampResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateDatabaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateDatabaseRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateDatabaseRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropDatabaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropDatabaseRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropDatabaseRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListDatabasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListDatabasesRequest, base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListDatabasesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListDatabasesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListDatabasesResponse, db_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ListDatabasesResponse, created_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicateMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicateMessageRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicateMessageRequest, channel_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicateMessageRequest, begints_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicateMessageRequest, endts_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicateMessageRequest, msgs_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicateMessageRequest, startpositions_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicateMessageRequest, endpositions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicateMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicateMessageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReplicateMessageResponse, position_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::milvus::proto::milvus::CreateAliasRequest)},
  { 9, -1, sizeof(::milvus::proto::milvus::DropAliasRequest)},
  { 17, -1, sizeof(::milvus::proto::milvus::AlterAliasRequest)},
  { 26, -1, sizeof(::milvus::proto::milvus::DescribeAliasRequest)},
  { 34, -1, sizeof(::milvus::proto::milvus::DescribeAliasResponse)},
  { 43, -1, sizeof(::milvus::proto::milvus::ListAliasesRequest)},
  { 51, -1, sizeof(::milvus::proto::milvus::ListAliasesResponse)},
  { 60, -1, sizeof(::milvus::proto::milvus::CreateCollectionRequest)},
  { 73, -1, sizeof(::milvus::proto::milvus::DropCollectionRequest)},
  { 81, -1, sizeof(::milvus::proto::milvus::AlterCollectionRequest)},
  { 91, -1, sizeof(::milvus::proto::milvus::HasCollectionRequest)},
  { 100, -1, sizeof(::milvus::proto::milvus::BoolResponse)},
  { 107, -1, sizeof(::milvus::proto::milvus::StringResponse)},
  { 114, -1, sizeof(::milvus::proto::milvus::DescribeCollectionRequest)},
  { 124, -1, sizeof(::milvus::proto::milvus::DescribeCollectionResponse)},
  { 144, -1, sizeof(::milvus::proto::milvus::LoadCollectionRequest)},
  { 155, -1, sizeof(::milvus::proto::milvus::ReleaseCollectionRequest)},
  { 163, -1, sizeof(::milvus::proto::milvus::GetStatisticsRequest)},
  { 173, -1, sizeof(::milvus::proto::milvus::GetStatisticsResponse)},
  { 180, -1, sizeof(::milvus::proto::milvus::GetCollectionStatisticsRequest)},
  { 188, -1, sizeof(::milvus::proto::milvus::GetCollectionStatisticsResponse)},
  { 195, -1, sizeof(::milvus::proto::milvus::ShowCollectionsRequest)},
  { 205, -1, sizeof(::milvus::proto::milvus::ShowCollectionsResponse)},
  { 217, -1, sizeof(::milvus::proto::milvus::CreatePartitionRequest)},
  { 226, -1, sizeof(::milvus::proto::milvus::DropPartitionRequest)},
  { 235, -1, sizeof(::milvus::proto::milvus::HasPartitionRequest)},
  { 244, -1, sizeof(::milvus::proto::milvus::LoadPartitionsRequest)},
  { 256, -1, sizeof(::milvus::proto::milvus::ReleasePartitionsRequest)},
  { 265, -1, sizeof(::milvus::proto::milvus::GetPartitionStatisticsRequest)},
  { 274, -1, sizeof(::milvus::proto::milvus::GetPartitionStatisticsResponse)},
  { 281, -1, sizeof(::milvus::proto::milvus::ShowPartitionsRequest)},
  { 292, -1, sizeof(::milvus::proto::milvus::ShowPartitionsResponse)},
  { 303, -1, sizeof(::milvus::proto::milvus::DescribeSegmentRequest)},
  { 311, -1, sizeof(::milvus::proto::milvus::DescribeSegmentResponse)},
  { 321, -1, sizeof(::milvus::proto::milvus::ShowSegmentsRequest)},
  { 329, -1, sizeof(::milvus::proto::milvus::ShowSegmentsResponse)},
  { 336, -1, sizeof(::milvus::proto::milvus::CreateIndexRequest)},
  { 347, -1, sizeof(::milvus::proto::milvus::AlterIndexRequest)},
  { 357, -1, sizeof(::milvus::proto::milvus::DescribeIndexRequest)},
  { 368, -1, sizeof(::milvus::proto::milvus::IndexDescription)},
  { 382, -1, sizeof(::milvus::proto::milvus::DescribeIndexResponse)},
  { 389, -1, sizeof(::milvus::proto::milvus::GetIndexBuildProgressRequest)},
  { 399, -1, sizeof(::milvus::proto::milvus::GetIndexBuildProgressResponse)},
  { 407, -1, sizeof(::milvus::proto::milvus::GetIndexStateRequest)},
  { 417, -1, sizeof(::milvus::proto::milvus::GetIndexStateResponse)},
  { 425, -1, sizeof(::milvus::proto::milvus::DropIndexRequest)},
  { 435, -1, sizeof(::milvus::proto::milvus::InsertRequest)},
  { 447, -1, sizeof(::milvus::proto::milvus::UpsertRequest)},
  { 459, -1, sizeof(::milvus::proto::milvus::MutationResult)},
  { 473, -1, sizeof(::milvus::proto::milvus::DeleteRequest)},
  { 485, -1, sizeof(::milvus::proto::milvus::SearchRequest)},
  { 506, -1, sizeof(::milvus::proto::milvus::Hits)},
  { 514, -1, sizeof(::milvus::proto::milvus::SearchResults)},
  { 522, -1, sizeof(::milvus::proto::milvus::SearchRequestV2)},
  { 539, -1, sizeof(::milvus::proto::milvus::FlushRequest)},
  { 547, 554, sizeof(::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse)},
  { 556, 563, sizeof(::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse)},
  { 565, 572, sizeof(::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse)},
  { 574, 581, sizeof(::milvus::proto::milvus::FlushResponse_CollFlushTsEntry_DoNotUse)},
  { 583, -1, sizeof(::milvus::proto::milvus::FlushResponse)},
  { 594, -1, sizeof(::milvus::proto::milvus::QueryRequest)},
  { 611, -1, sizeof(::milvus::proto::milvus::QueryResults)},
  { 620, -1, sizeof(::milvus::proto::milvus::VectorIDs)},
  { 629, -1, sizeof(::milvus::proto::milvus::VectorsArray)},
  { 637, -1, sizeof(::milvus::proto::milvus::CalcDistanceRequest)},
  { 646, -1, sizeof(::milvus::proto::milvus::CalcDistanceResults)},
  { 655, -1, sizeof(::milvus::proto::milvus::FlushAllRequest)},
  { 662, -1, sizeof(::milvus::proto::milvus::FlushAllResponse)},
  { 669, -1, sizeof(::milvus::proto::milvus::PersistentSegmentInfo)},
  { 679, -1, sizeof(::milvus::proto::milvus::GetPersistentSegmentInfoRequest)},
  { 687, -1, sizeof(::milvus::proto::milvus::GetPersistentSegmentInfoResponse)},
  { 694, -1, sizeof(::milvus::proto::milvus::QuerySegmentInfo)},
  { 709, -1, sizeof(::milvus::proto::milvus::GetQuerySegmentInfoRequest)},
  { 717, -1, sizeof(::milvus::proto::milvus::GetQuerySegmentInfoResponse)},
  { 724, -1, sizeof(::milvus::proto::milvus::DummyRequest)},
  { 730, -1, sizeof(::milvus::proto::milvus::DummyResponse)},
  { 736, -1, sizeof(::milvus::proto::milvus::RegisterLinkRequest)},
  { 741, -1, sizeof(::milvus::proto::milvus::RegisterLinkResponse)},
  { 748, -1, sizeof(::milvus::proto::milvus::GetMetricsRequest)},
  { 755, -1, sizeof(::milvus::proto::milvus::GetMetricsResponse)},
  { 763, -1, sizeof(::milvus::proto::milvus::ComponentInfo)},
  { 772, -1, sizeof(::milvus::proto::milvus::ComponentStates)},
  { 780, -1, sizeof(::milvus::proto::milvus::GetComponentStatesRequest)},
  { 785, -1, sizeof(::milvus::proto::milvus::LoadBalanceRequest)},
  { 796, -1, sizeof(::milvus::proto::milvus::ManualCompactionRequest)},
  { 803, -1, sizeof(::milvus::proto::milvus::ManualCompactionResponse)},
  { 811, -1, sizeof(::milvus::proto::milvus::GetCompactionStateRequest)},
  { 817, -1, sizeof(::milvus::proto::milvus::GetCompactionStateResponse)},
  { 828, -1, sizeof(::milvus::proto::milvus::GetCompactionPlansRequest)},
  { 834, -1, sizeof(::milvus::proto::milvus::GetCompactionPlansResponse)},
  { 842, -1, sizeof(::milvus::proto::milvus::CompactionMergeInfo)},
  { 849, -1, sizeof(::milvus::proto::milvus::GetFlushStateRequest)},
  { 858, -1, sizeof(::milvus::proto::milvus::GetFlushStateResponse)},
  { 865, -1, sizeof(::milvus::proto::milvus::GetFlushAllStateRequest)},
  { 873, -1, sizeof(::milvus::proto::milvus::GetFlushAllStateResponse)},
  { 880, -1, sizeof(::milvus::proto::milvus::ImportRequest)},
  { 892, -1, sizeof(::milvus::proto::milvus::ImportResponse)},
  { 899, -1, sizeof(::milvus::proto::milvus::GetImportStateRequest)},
  { 905, -1, sizeof(::milvus::proto::milvus::GetImportStateResponse)},
  { 919, -1, sizeof(::milvus::proto::milvus::ListImportTasksRequest)},
  { 927, -1, sizeof(::milvus::proto::milvus::ListImportTasksResponse)},
  { 934, -1, sizeof(::milvus::proto::milvus::GetReplicasRequest)},
  { 944, -1, sizeof(::milvus::proto::milvus::GetReplicasResponse)},
  { 951, 958, sizeof(::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse)},
  { 960, -1, sizeof(::milvus::proto::milvus::ReplicaInfo)},
  { 972, -1, sizeof(::milvus::proto::milvus::ShardReplica)},
  { 981, -1, sizeof(::milvus::proto::milvus::CreateCredentialRequest)},
  { 991, -1, sizeof(::milvus::proto::milvus::UpdateCredentialRequest)},
  { 1002, -1, sizeof(::milvus::proto::milvus::DeleteCredentialRequest)},
  { 1009, -1, sizeof(::milvus::proto::milvus::ListCredUsersResponse)},
  { 1016, -1, sizeof(::milvus::proto::milvus::ListCredUsersRequest)},
  { 1022, -1, sizeof(::milvus::proto::milvus::RoleEntity)},
  { 1028, -1, sizeof(::milvus::proto::milvus::UserEntity)},
  { 1034, -1, sizeof(::milvus::proto::milvus::CreateRoleRequest)},
  { 1041, -1, sizeof(::milvus::proto::milvus::DropRoleRequest)},
  { 1048, -1, sizeof(::milvus::proto::milvus::OperateUserRoleRequest)},
  { 1057, -1, sizeof(::milvus::proto::milvus::SelectRoleRequest)},
  { 1065, -1, sizeof(::milvus::proto::milvus::RoleResult)},
  { 1072, -1, sizeof(::milvus::proto::milvus::SelectRoleResponse)},
  { 1079, -1, sizeof(::milvus::proto::milvus::SelectUserRequest)},
  { 1087, -1, sizeof(::milvus::proto::milvus::UserResult)},
  { 1094, -1, sizeof(::milvus::proto::milvus::SelectUserResponse)},
  { 1101, -1, sizeof(::milvus::proto::milvus::ObjectEntity)},
  { 1107, -1, sizeof(::milvus::proto::milvus::PrivilegeEntity)},
  { 1113, -1, sizeof(::milvus::proto::milvus::GrantorEntity)},
  { 1120, -1, sizeof(::milvus::proto::milvus::GrantPrivilegeEntity)},
  { 1126, -1, sizeof(::milvus::proto::milvus::GrantEntity)},
  { 1136, -1, sizeof(::milvus::proto::milvus::SelectGrantRequest)},
  { 1143, -1, sizeof(::milvus::proto::milvus::SelectGrantResponse)},
  { 1150, -1, sizeof(::milvus::proto::milvus::OperatePrivilegeRequest)},
  { 1158, -1, sizeof(::milvus::proto::milvus::GetLoadingProgressRequest)},
  { 1167, -1, sizeof(::milvus::proto::milvus::GetLoadingProgressResponse)},
  { 1175, -1, sizeof(::milvus::proto::milvus::GetLoadStateRequest)},
  { 1184, -1, sizeof(::milvus::proto::milvus::GetLoadStateResponse)},
  { 1191, -1, sizeof(::milvus::proto::milvus::MilvusExt)},
  { 1197, -1, sizeof(::milvus::proto::milvus::GetVersionRequest)},
  { 1202, -1, sizeof(::milvus::proto::milvus::GetVersionResponse)},
  { 1209, -1, sizeof(::milvus::proto::milvus::CheckHealthRequest)},
  { 1214, -1, sizeof(::milvus::proto::milvus::CheckHealthResponse)},
  { 1223, -1, sizeof(::milvus::proto::milvus::CreateResourceGroupRequest)},
  { 1230, -1, sizeof(::milvus::proto::milvus::DropResourceGroupRequest)},
  { 1237, -1, sizeof(::milvus::proto::milvus::TransferNodeRequest)},
  { 1246, -1, sizeof(::milvus::proto::milvus::TransferReplicaRequest)},
  { 1257, -1, sizeof(::milvus::proto::milvus::ListResourceGroupsRequest)},
  { 1263, -1, sizeof(::milvus::proto::milvus::ListResourceGroupsResponse)},
  { 1270, -1, sizeof(::milvus::proto::milvus::DescribeResourceGroupRequest)},
  { 1277, -1, sizeof(::milvus::proto::milvus::DescribeResourceGroupResponse)},
  { 1284, 1291, sizeof(::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse)},
  { 1293, 1300, sizeof(::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse)},
  { 1302, 1309, sizeof(::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse)},
  { 1311, -1, sizeof(::milvus::proto::milvus::ResourceGroup)},
  { 1322, -1, sizeof(::milvus::proto::milvus::RenameCollectionRequest)},
  { 1332, -1, sizeof(::milvus::proto::milvus::GetIndexStatisticsRequest)},
  { 1342, -1, sizeof(::milvus::proto::milvus::GetIndexStatisticsResponse)},
  { 1349, -1, sizeof(::milvus::proto::milvus::ConnectRequest)},
  { 1356, -1, sizeof(::milvus::proto::milvus::ConnectResponse)},
  { 1364, -1, sizeof(::milvus::proto::milvus::AllocTimestampRequest)},
  { 1370, -1, sizeof(::milvus::proto::milvus::AllocTimestampResponse)},
  { 1377, -1, sizeof(::milvus::proto::milvus::CreateDatabaseRequest)},
  { 1384, -1, sizeof(::milvus::proto::milvus::DropDatabaseRequest)},
  { 1391, -1, sizeof(::milvus::proto::milvus::ListDatabasesRequest)},
  { 1397, -1, sizeof(::milvus::proto::milvus::ListDatabasesResponse)},
  { 1405, -1, sizeof(::milvus::proto::milvus::ReplicateMessageRequest)},
  { 1417, -1, sizeof(::milvus::proto::milvus::ReplicateMessageResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CreateAliasRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DropAliasRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_AlterAliasRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeAliasRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeAliasResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ListAliasesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ListAliasesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CreateCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DropCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_AlterCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_HasCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_BoolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_StringResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeCollectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_LoadCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ReleaseCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetStatisticsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetStatisticsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetCollectionStatisticsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetCollectionStatisticsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowCollectionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowCollectionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CreatePartitionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DropPartitionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_HasPartitionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_LoadPartitionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ReleasePartitionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetPartitionStatisticsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetPartitionStatisticsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowPartitionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowPartitionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeSegmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeSegmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowSegmentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowSegmentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CreateIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_AlterIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_IndexDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetIndexBuildProgressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetIndexBuildProgressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetIndexStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetIndexStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DropIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_InsertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_UpsertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_MutationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_SearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_Hits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_SearchResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_SearchRequestV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_FlushRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_FlushResponse_CollSegIDsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_FlushResponse_FlushCollSegIDsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_FlushResponse_CollSealTimesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_FlushResponse_CollFlushTsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_FlushResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_QueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_QueryResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_VectorIDs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_VectorsArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CalcDistanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CalcDistanceResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_FlushAllRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_FlushAllResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_PersistentSegmentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetPersistentSegmentInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetPersistentSegmentInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_QuerySegmentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetQuerySegmentInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetQuerySegmentInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DummyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DummyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_RegisterLinkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_RegisterLinkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ComponentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ComponentStates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetComponentStatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_LoadBalanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ManualCompactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ManualCompactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetCompactionStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetCompactionStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetCompactionPlansRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetCompactionPlansResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CompactionMergeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetFlushStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetFlushStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetFlushAllStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetFlushAllStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ImportRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ImportResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetImportStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetImportStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ListImportTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ListImportTasksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetReplicasRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetReplicasResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ReplicaInfo_NumOutboundNodeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ReplicaInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShardReplica_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CreateCredentialRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_UpdateCredentialRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DeleteCredentialRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ListCredUsersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ListCredUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_RoleEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_UserEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CreateRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DropRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_OperateUserRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_SelectRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_RoleResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_SelectRoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_SelectUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_UserResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_SelectUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ObjectEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_PrivilegeEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GrantorEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GrantPrivilegeEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GrantEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_SelectGrantRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_SelectGrantResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_OperatePrivilegeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetLoadingProgressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetLoadingProgressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetLoadStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetLoadStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_MilvusExt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CheckHealthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CheckHealthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CreateResourceGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DropResourceGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_TransferNodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_TransferReplicaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ListResourceGroupsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ListResourceGroupsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeResourceGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeResourceGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ResourceGroup_NumLoadedReplicaEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ResourceGroup_NumOutgoingNodeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ResourceGroup_NumIncomingNodeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ResourceGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_RenameCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetIndexStatisticsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetIndexStatisticsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ConnectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ConnectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_AllocTimestampRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_AllocTimestampResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CreateDatabaseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DropDatabaseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ListDatabasesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ListDatabasesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ReplicateMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ReplicateMessageResponse_default_instance_),
};

const char descriptor_table_protodef_milvus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014milvus.proto\022\023milvus.proto.milvus\032\014com"
  "mon.proto\032\014schema.proto\032\013feder.proto\032\tms"
  "g.proto\032 google/protobuf/descriptor.prot"
  "o\"\215\001\n\022CreateAliasRequest\022*\n\004base\030\001 \001(\0132\034"
  ".milvus.proto.common.MsgBase\022\017\n\007db_name\030"
  "\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\r\n\005alias\030"
  "\004 \001(\t:\022\312>\017\010\001\020,\030\377\377\377\377\377\377\377\377\377\001\"r\n\020DropAliasRe"
  "quest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.commo"
  "n.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\r\n\005alias\030\003 \001("
  "\t:\022\312>\017\010\001\020-\030\377\377\377\377\377\377\377\377\377\001\"\214\001\n\021AlterAliasRequ"
  "est\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common."
  "MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_n"
  "ame\030\003 \001(\t\022\r\n\005alias\030\004 \001(\t:\022\312>\017\010\001\020,\030\377\377\377\377\377\377"
  "\377\377\377\001\"v\n\024DescribeAliasRequest\022*\n\004base\030\001 \001"
  "(\0132\034.milvus.proto.common.MsgBase\022\017\n\007db_n"
  "ame\030\002 \001(\t\022\r\n\005alias\030\003 \001(\t:\022\312>\017\010\001\020.\030\377\377\377\377\377\377"
  "\377\377\377\001\"x\n\025DescribeAliasResponse\022+\n\006status\030"
  "\001 \001(\0132\033.milvus.proto.common.Status\022\017\n\007db"
  "_name\030\002 \001(\t\022\r\n\005alias\030\003 \001(\t\022\022\n\ncollection"
  "\030\004 \001(\t\"~\n\022ListAliasesRequest\022*\n\004base\030\001 \001"
  "(\0132\034.milvus.proto.common.MsgBase\022\017\n\007db_n"
  "ame\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t:\022\312>\017\010"
  "\001\020/\030\377\377\377\377\377\377\377\377\377\001\"}\n\023ListAliasesResponse\022+\n"
  "\006status\030\001 \001(\0132\033.milvus.proto.common.Stat"
  "us\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003"
  " \001(\t\022\017\n\007aliases\030\004 \003(\t\"\270\002\n\027CreateCollecti"
  "onRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.c"
  "ommon.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collec"
  "tion_name\030\003 \001(\t\022\016\n\006schema\030\004 \001(\014\022\022\n\nshard"
  "s_num\030\005 \001(\005\022@\n\021consistency_level\030\006 \001(\0162%"
  ".milvus.proto.common.ConsistencyLevel\0225\n"
  "\nproperties\030\007 \003(\0132!.milvus.proto.common."
  "KeyValuePair\022\026\n\016num_partitions\030\010 \001(\003:\022\312>"
  "\017\010\001\020\001\030\377\377\377\377\377\377\377\377\377\001\"\201\001\n\025DropCollectionReque"
  "st\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.M"
  "sgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_na"
  "me\030\003 \001(\t:\022\312>\017\010\001\020\002\030\377\377\377\377\377\377\377\377\377\001\"\317\001\n\026AlterCo"
  "llectionRequest\022*\n\004base\030\001 \001(\0132\034.milvus.p"
  "roto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017"
  "collection_name\030\003 \001(\t\022\024\n\014collectionID\030\004 "
  "\001(\003\0225\n\nproperties\030\005 \003(\0132!.milvus.proto.c"
  "ommon.KeyValuePair:\022\312>\017\010\001\020\001\030\377\377\377\377\377\377\377\377\377\001\"\200"
  "\001\n\024HasCollectionRequest\022*\n\004base\030\001 \001(\0132\034."
  "milvus.proto.common.MsgBase\022\017\n\007db_name\030\002"
  " \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\022\n\ntime_st"
  "amp\030\004 \001(\004\"J\n\014BoolResponse\022+\n\006status\030\001 \001("
  "\0132\033.milvus.proto.common.Status\022\r\n\005value\030"
  "\002 \001(\010\"L\n\016StringResponse\022+\n\006status\030\001 \001(\0132"
  "\033.milvus.proto.common.Status\022\r\n\005value\030\002 "
  "\001(\t\"\257\001\n\031DescribeCollectionRequest\022*\n\004bas"
  "e\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\017\n"
  "\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022"
  "\024\n\014collectionID\030\004 \001(\003\022\022\n\ntime_stamp\030\005 \001("
  "\004:\022\312>\017\010\001\020\003\030\377\377\377\377\377\377\377\377\377\001\"\252\004\n\032DescribeCollec"
  "tionResponse\022+\n\006status\030\001 \001(\0132\033.milvus.pr"
  "oto.common.Status\0225\n\006schema\030\002 \001(\0132%.milv"
  "us.proto.schema.CollectionSchema\022\024\n\014coll"
  "ectionID\030\003 \001(\003\022\035\n\025virtual_channel_names\030"
  "\004 \003(\t\022\036\n\026physical_channel_names\030\005 \003(\t\022\031\n"
  "\021created_timestamp\030\006 \001(\004\022\035\n\025created_utc_"
  "timestamp\030\007 \001(\004\022\022\n\nshards_num\030\010 \001(\005\022\017\n\007a"
  "liases\030\t \003(\t\0229\n\017start_positions\030\n \003(\0132 ."
  "milvus.proto.common.KeyDataPair\022@\n\021consi"
  "stency_level\030\013 \001(\0162%.milvus.proto.common"
  ".ConsistencyLevel\022\027\n\017collection_name\030\014 \001"
  "(\t\0225\n\nproperties\030\r \003(\0132!.milvus.proto.co"
  "mmon.KeyValuePair\022\017\n\007db_name\030\016 \001(\t\022\026\n\016nu"
  "m_partitions\030\017 \001(\003\"\270\001\n\025LoadCollectionReq"
  "uest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common"
  ".MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_"
  "name\030\003 \001(\t\022\026\n\016replica_number\030\004 \001(\005\022\027\n\017re"
  "source_groups\030\005 \003(\t\022\017\n\007refresh\030\006 \001(\010:\007\312>"
  "\004\020\005\030\003\"y\n\030ReleaseCollectionRequest\022*\n\004bas"
  "e\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\017\n"
  "\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t:"
  "\007\312>\004\020\006\030\003\"\253\001\n\024GetStatisticsRequest\022*\n\004bas"
  "e\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\017\n"
  "\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022"
  "\027\n\017partition_names\030\004 \003(\t\022\033\n\023guarantee_ti"
  "mestamp\030\005 \001(\004:\007\312>\004\020\n\030\003\"v\n\025GetStatisticsR"
  "esponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.c"
  "ommon.Status\0220\n\005stats\030\002 \003(\0132!.milvus.pro"
  "to.common.KeyValuePair\"\177\n\036GetCollectionS"
  "tatisticsRequest\022*\n\004base\030\001 \001(\0132\034.milvus."
  "proto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n"
  "\017collection_name\030\003 \001(\t:\007\312>\004\020\n\030\003\"\200\001\n\037GetC"
  "ollectionStatisticsResponse\022+\n\006status\030\001 "
  "\001(\0132\033.milvus.proto.common.Status\0220\n\005stat"
  "s\030\002 \003(\0132!.milvus.proto.common.KeyValuePa"
  "ir\"\310\001\n\026ShowCollectionsRequest\022*\n\004base\030\001 "
  "\001(\0132\034.milvus.proto.common.MsgBase\022\017\n\007db_"
  "name\030\002 \001(\t\022\022\n\ntime_stamp\030\003 \001(\004\022+\n\004type\030\004"
  " \001(\0162\035.milvus.proto.milvus.ShowType\022\034\n\020c"
  "ollection_names\030\005 \003(\tB\002\030\001:\022\312>\017\010\001\020\004\030\377\377\377\377\377"
  "\377\377\377\377\001\"\367\001\n\027ShowCollectionsResponse\022+\n\006sta"
  "tus\030\001 \001(\0132\033.milvus.proto.common.Status\022\030"
  "\n\020collection_names\030\002 \003(\t\022\026\n\016collection_i"
  "ds\030\003 \003(\003\022\032\n\022created_timestamps\030\004 \003(\004\022\036\n\026"
  "created_utc_timestamps\030\005 \003(\004\022 \n\024inMemory"
  "_percentages\030\006 \003(\003B\002\030\001\022\037\n\027query_service_"
  "available\030\007 \003(\010\"\217\001\n\026CreatePartitionReque"
  "st\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.M"
  "sgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_na"
  "me\030\003 \001(\t\022\026\n\016partition_name\030\004 \001(\t:\007\312>\004\020\'\030"
  "\003\"\215\001\n\024DropPartitionRequest\022*\n\004base\030\001 \001(\013"
  "2\034.milvus.proto.common.MsgBase\022\017\n\007db_nam"
  "e\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\026\n\016part"
  "ition_name\030\004 \001(\t:\007\312>\004\020(\030\003\"\214\001\n\023HasPartiti"
  "onRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.c"
  "ommon.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collec"
  "tion_name\030\003 \001(\t\022\026\n\016partition_name\030\004 \001(\t:"
  "\007\312>\004\020*\030\003\"\321\001\n\025LoadPartitionsRequest\022*\n\004ba"
  "se\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\017"
  "\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t"
  "\022\027\n\017partition_names\030\004 \003(\t\022\026\n\016replica_num"
  "ber\030\005 \001(\005\022\027\n\017resource_groups\030\006 \003(\t\022\017\n\007re"
  "fresh\030\007 \001(\010:\007\312>\004\020\005\030\003\"\222\001\n\030ReleasePartitio"
  "nsRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.c"
  "ommon.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collec"
  "tion_name\030\003 \001(\t\022\027\n\017partition_names\030\004 \003(\t"
  ":\007\312>\004\020\006\030\003\"\215\001\n\035GetPartitionStatisticsRequ"
  "est\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common."
  "MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_n"
  "ame\030\003 \001(\t\022\026\n\016partition_name\030\004 \001(\t\"\177\n\036Get"
  "PartitionStatisticsResponse\022+\n\006status\030\001 "
  "\001(\0132\033.milvus.proto.common.Status\0220\n\005stat"
  "s\030\002 \003(\0132!.milvus.proto.common.KeyValuePa"
  "ir\"\326\001\n\025ShowPartitionsRequest\022*\n\004base\030\001 \001"
  "(\0132\034.milvus.proto.common.MsgBase\022\017\n\007db_n"
  "ame\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\024\n\014co"
  "llectionID\030\004 \001(\003\022\027\n\017partition_names\030\005 \003("
  "\t\022/\n\004type\030\006 \001(\0162\035.milvus.proto.milvus.Sh"
  "owTypeB\002\030\001:\007\312>\004\020)\030\003\"\322\001\n\026ShowPartitionsRe"
  "sponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.co"
  "mmon.Status\022\027\n\017partition_names\030\002 \003(\t\022\024\n\014"
  "partitionIDs\030\003 \003(\003\022\032\n\022created_timestamps"
  "\030\004 \003(\004\022\036\n\026created_utc_timestamps\030\005 \003(\004\022 "
  "\n\024inMemory_percentages\030\006 \003(\003B\002\030\001\"m\n\026Desc"
  "ribeSegmentRequest\022*\n\004base\030\001 \001(\0132\034.milvu"
  "s.proto.common.MsgBase\022\024\n\014collectionID\030\002"
  " \001(\003\022\021\n\tsegmentID\030\003 \001(\003\"\217\001\n\027DescribeSegm"
  "entResponse\022+\n\006status\030\001 \001(\0132\033.milvus.pro"
  "to.common.Status\022\017\n\007indexID\030\002 \001(\003\022\017\n\007bui"
  "ldID\030\003 \001(\003\022\024\n\014enable_index\030\004 \001(\010\022\017\n\007fiel"
  "dID\030\005 \001(\003\"l\n\023ShowSegmentsRequest\022*\n\004base"
  "\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\024\n\014"
  "collectionID\030\002 \001(\003\022\023\n\013partitionID\030\003 \001(\003\""
  "W\n\024ShowSegmentsResponse\022+\n\006status\030\001 \001(\0132"
  "\033.milvus.proto.common.Status\022\022\n\nsegmentI"
  "Ds\030\002 \003(\003\"\324\001\n\022CreateIndexRequest\022*\n\004base\030"
  "\001 \001(\0132\034.milvus.proto.common.MsgBase\022\017\n\007d"
  "b_name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\022\n"
  "\nfield_name\030\004 \001(\t\0227\n\014extra_params\030\005 \003(\0132"
  "!.milvus.proto.common.KeyValuePair\022\022\n\nin"
  "dex_name\030\006 \001(\t:\007\312>\004\020\013\030\003\"\277\001\n\021AlterIndexRe"
  "quest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.commo"
  "n.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection"
  "_name\030\003 \001(\t\022\022\n\nindex_name\030\004 \001(\t\0227\n\014extra"
  "_params\030\005 \003(\0132!.milvus.proto.common.KeyV"
  "aluePair:\007\312>\004\020\013\030\003\"\260\001\n\024DescribeIndexReque"
  "st\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.M"
  "sgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_na"
  "me\030\003 \001(\t\022\022\n\nfield_name\030\004 \001(\t\022\022\n\nindex_na"
  "me\030\005 \001(\t\022\021\n\ttimestamp\030\006 \001(\004:\007\312>\004\020\014\030\003\"\225\002\n"
  "\020IndexDescription\022\022\n\nindex_name\030\001 \001(\t\022\017\n"
  "\007indexID\030\002 \001(\003\0221\n\006params\030\003 \003(\0132!.milvus."
  "proto.common.KeyValuePair\022\022\n\nfield_name\030"
  "\004 \001(\t\022\024\n\014indexed_rows\030\005 \001(\003\022\022\n\ntotal_row"
  "s\030\006 \001(\003\022.\n\005state\030\007 \001(\0162\037.milvus.proto.co"
  "mmon.IndexState\022\037\n\027index_state_fail_reas"
  "on\030\010 \001(\t\022\032\n\022pending_index_rows\030\t \001(\003\"\207\001\n"
  "\025DescribeIndexResponse\022+\n\006status\030\001 \001(\0132\033"
  ".milvus.proto.common.Status\022A\n\022index_des"
  "criptions\030\002 \003(\0132%.milvus.proto.milvus.In"
  "dexDescription\"\245\001\n\034GetIndexBuildProgress"
  "Request\022*\n\004base\030\001 \001(\0132\034.milvus.proto.com"
  "mon.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collecti"
  "on_name\030\003 \001(\t\022\022\n\nfield_name\030\004 \001(\t\022\022\n\nind"
  "ex_name\030\005 \001(\t:\007\312>\004\020\014\030\003\"v\n\035GetIndexBuildP"
  "rogressResponse\022+\n\006status\030\001 \001(\0132\033.milvus"
  ".proto.common.Status\022\024\n\014indexed_rows\030\002 \001"
  "(\003\022\022\n\ntotal_rows\030\003 \001(\003\"\235\001\n\024GetIndexState"
  "Request\022*\n\004base\030\001 \001(\0132\034.milvus.proto.com"
  "mon.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collecti"
  "on_name\030\003 \001(\t\022\022\n\nfield_name\030\004 \001(\t\022\022\n\nind"
  "ex_name\030\005 \001(\t:\007\312>\004\020\014\030\003\"\211\001\n\025GetIndexState"
  "Response\022+\n\006status\030\001 \001(\0132\033.milvus.proto."
  "common.Status\022.\n\005state\030\002 \001(\0162\037.milvus.pr"
  "oto.common.IndexState\022\023\n\013fail_reason\030\003 \001"
  "(\t\"\231\001\n\020DropIndexRequest\022*\n\004base\030\001 \001(\0132\034."
  "milvus.proto.common.MsgBase\022\017\n\007db_name\030\002"
  " \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\022\n\nfield_n"
  "ame\030\004 \001(\t\022\022\n\nindex_name\030\005 \001(\t:\007\312>\004\020\r\030\003\"\340"
  "\001\n\rInsertRequest\022*\n\004base\030\001 \001(\0132\034.milvus."
  "proto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n"
  "\017collection_name\030\003 \001(\t\022\026\n\016partition_name"
  "\030\004 \001(\t\0223\n\013fields_data\030\005 \003(\0132\036.milvus.pro"
  "to.schema.FieldData\022\021\n\thash_keys\030\006 \003(\r\022\020"
  "\n\010num_rows\030\007 \001(\r:\007\312>\004\020\010\030\003\"\340\001\n\rUpsertRequ"
  "est\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common."
  "MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_n"
  "ame\030\003 \001(\t\022\026\n\016partition_name\030\004 \001(\t\0223\n\013fie"
  "lds_data\030\005 \003(\0132\036.milvus.proto.schema.Fie"
  "ldData\022\021\n\thash_keys\030\006 \003(\r\022\020\n\010num_rows\030\007 "
  "\001(\r:\007\312>\004\020\031\030\003\"\360\001\n\016MutationResult\022+\n\006statu"
  "s\030\001 \001(\0132\033.milvus.proto.common.Status\022%\n\003"
  "IDs\030\002 \001(\0132\030.milvus.proto.schema.IDs\022\022\n\ns"
  "ucc_index\030\003 \003(\r\022\021\n\terr_index\030\004 \003(\r\022\024\n\014ac"
  "knowledged\030\005 \001(\010\022\022\n\ninsert_cnt\030\006 \001(\003\022\022\n\n"
  "delete_cnt\030\007 \001(\003\022\022\n\nupsert_cnt\030\010 \001(\003\022\021\n\t"
  "timestamp\030\t \001(\004\"\351\001\n\rDeleteRequest\022*\n\004bas"
  "e\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\017\n"
  "\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022"
  "\026\n\016partition_name\030\004 \001(\t\022\014\n\004expr\030\005 \001(\t\022\021\n"
  "\thash_keys\030\006 \003(\r\022@\n\021consistency_level\030\007 "
  "\001(\0162%.milvus.proto.common.ConsistencyLev"
  "el:\007\312>\004\020\t\030\003\"\223\004\n\rSearchRequest\022*\n\004base\030\001 "
  "\001(\0132\034.milvus.proto.common.MsgBase\022\017\n\007db_"
  "name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\027\n\017p"
  "artition_names\030\004 \003(\t\022\013\n\003dsl\030\005 \001(\t\022\031\n\021pla"
  "ceholder_group\030\006 \001(\014\022.\n\010dsl_type\030\007 \001(\0162\034"
  ".milvus.proto.common.DslType\022\025\n\routput_f"
  "ields\030\010 \003(\t\0228\n\rsearch_params\030\t \003(\0132!.mil"
  "vus.proto.common.KeyValuePair\022\030\n\020travel_"
  "timestamp\030\n \001(\004\022\033\n\023guarantee_timestamp\030\013"
  " \001(\004\022\n\n\002nq\030\014 \001(\003\022\033\n\023not_return_all_meta\030"
  "\r \001(\010\022@\n\021consistency_level\030\016 \001(\0162%.milvu"
  "s.proto.common.ConsistencyLevel\022\037\n\027use_d"
  "efault_consistency\030\017 \001(\010\022\036\n\026search_by_pr"
  "imary_keys\030\020 \001(\010:\007\312>\004\020\016\030\003\"5\n\004Hits\022\013\n\003IDs"
  "\030\001 \003(\003\022\020\n\010row_data\030\002 \003(\014\022\016\n\006scores\030\003 \003(\002"
  "\"\215\001\n\rSearchResults\022+\n\006status\030\001 \001(\0132\033.mil"
  "vus.proto.common.Status\0226\n\007results\030\002 \001(\013"
  "2%.milvus.proto.schema.SearchResultData\022"
  "\027\n\017collection_name\030\003 \001(\t\"\305\003\n\017SearchReque"
  "stV2\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common"
  ".MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_"
  "name\030\003 \001(\t\022\027\n\017partition_names\030\004 \003(\t\0224\n\010r"
  "equests\030\005 \003(\0132\".milvus.proto.milvus.Sear"
  "chRequest\0226\n\013rank_params\030\006 \003(\0132!.milvus."
  "proto.common.KeyValuePair\022\030\n\020travel_time"
  "stamp\030\007 \001(\004\022\033\n\023guarantee_timestamp\030\010 \001(\004"
  "\022\033\n\023not_return_all_meta\030\t \001(\010\022\025\n\routput_"
  "fields\030\n \003(\t\022@\n\021consistency_level\030\013 \001(\0162"
  "%.milvus.proto.common.ConsistencyLevel\022\037"
  "\n\027use_default_consistency\030\014 \001(\010:\007\312>\004\020\016\030\003"
  "\"n\n\014FlushRequest\022*\n\004base\030\001 \001(\0132\034.milvus."
  "proto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\030\n"
  "\020collection_names\030\003 \003(\t:\007\312>\004\020\017 \003\"\233\005\n\rFlu"
  "shResponse\022+\n\006status\030\001 \001(\0132\033.milvus.prot"
  "o.common.Status\022\017\n\007db_name\030\002 \001(\t\022G\n\013coll"
  "_segIDs\030\003 \003(\01322.milvus.proto.milvus.Flus"
  "hResponse.CollSegIDsEntry\022R\n\021flush_coll_"
  "segIDs\030\004 \003(\01327.milvus.proto.milvus.Flush"
  "Response.FlushCollSegIDsEntry\022N\n\017coll_se"
  "al_times\030\005 \003(\01325.milvus.proto.milvus.Flu"
  "shResponse.CollSealTimesEntry\022J\n\rcoll_fl"
  "ush_ts\030\006 \003(\01323.milvus.proto.milvus.Flush"
  "Response.CollFlushTsEntry\032Q\n\017CollSegIDsE"
  "ntry\022\013\n\003key\030\001 \001(\t\022-\n\005value\030\002 \001(\0132\036.milvu"
  "s.proto.schema.LongArray:\0028\001\032V\n\024FlushCol"
  "lSegIDsEntry\022\013\n\003key\030\001 \001(\t\022-\n\005value\030\002 \001(\013"
  "2\036.milvus.proto.schema.LongArray:\0028\001\0324\n\022"
  "CollSealTimesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\003:\0028\001\0322\n\020CollFlushTsEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\004:\0028\001\"\233\003\n\014QueryRequest\022"
  "*\n\004base\030\001 \001(\0132\034.milvus.proto.common.MsgB"
  "ase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030"
  "\003 \001(\t\022\014\n\004expr\030\004 \001(\t\022\025\n\routput_fields\030\005 \003"
  "(\t\022\027\n\017partition_names\030\006 \003(\t\022\030\n\020travel_ti"
  "mestamp\030\007 \001(\004\022\033\n\023guarantee_timestamp\030\010 \001"
  "(\004\0227\n\014query_params\030\t \003(\0132!.milvus.proto."
  "common.KeyValuePair\022\033\n\023not_return_all_me"
  "ta\030\n \001(\010\022@\n\021consistency_level\030\013 \001(\0162%.mi"
  "lvus.proto.common.ConsistencyLevel\022\037\n\027us"
  "e_default_consistency\030\014 \001(\010:\007\312>\004\020\020\030\003\"\240\001\n"
  "\014QueryResults\022+\n\006status\030\001 \001(\0132\033.milvus.p"
  "roto.common.Status\0223\n\013fields_data\030\002 \003(\0132"
  "\036.milvus.proto.schema.FieldData\022\027\n\017colle"
  "ction_name\030\003 \001(\t\022\025\n\routput_fields\030\004 \003(\t\""
  "}\n\tVectorIDs\022\027\n\017collection_name\030\001 \001(\t\022\022\n"
  "\nfield_name\030\002 \001(\t\022*\n\010id_array\030\003 \001(\0132\030.mi"
  "lvus.proto.schema.IDs\022\027\n\017partition_names"
  "\030\004 \003(\t\"\203\001\n\014VectorsArray\0222\n\010id_array\030\001 \001("
  "\0132\036.milvus.proto.milvus.VectorIDsH\000\0226\n\nd"
  "ata_array\030\002 \001(\0132 .milvus.proto.schema.Ve"
  "ctorFieldH\000B\007\n\005array\"\335\001\n\023CalcDistanceReq"
  "uest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common"
  ".MsgBase\0222\n\007op_left\030\002 \001(\0132!.milvus.proto"
  ".milvus.VectorsArray\0223\n\010op_right\030\003 \001(\0132!"
  ".milvus.proto.milvus.VectorsArray\0221\n\006par"
  "ams\030\004 \003(\0132!.milvus.proto.common.KeyValue"
  "Pair\"\265\001\n\023CalcDistanceResults\022+\n\006status\030\001"
  " \001(\0132\033.milvus.proto.common.Status\0221\n\010int"
  "_dist\030\002 \001(\0132\035.milvus.proto.schema.IntArr"
  "ayH\000\0225\n\nfloat_dist\030\003 \001(\0132\037.milvus.proto."
  "schema.FloatArrayH\000B\007\n\005array\"b\n\017FlushAll"
  "Request\022*\n\004base\030\001 \001(\0132\034.milvus.proto.com"
  "mon.MsgBase\022\017\n\007db_name\030\002 \001(\t:\022\312>\017\010\001\020&\030\377\377"
  "\377\377\377\377\377\377\377\001\"U\n\020FlushAllResponse\022+\n\006status\030\001"
  " \001(\0132\033.milvus.proto.common.Status\022\024\n\014flu"
  "sh_all_ts\030\002 \001(\004\"\231\001\n\025PersistentSegmentInf"
  "o\022\021\n\tsegmentID\030\001 \001(\003\022\024\n\014collectionID\030\002 \001"
  "(\003\022\023\n\013partitionID\030\003 \001(\003\022\020\n\010num_rows\030\004 \001("
  "\003\0220\n\005state\030\005 \001(\0162!.milvus.proto.common.S"
  "egmentState\"u\n\037GetPersistentSegmentInfoR"
  "equest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.comm"
  "on.MsgBase\022\016\n\006dbName\030\002 \001(\t\022\026\n\016collection"
  "Name\030\003 \001(\t\"\212\001\n GetPersistentSegmentInfoR"
  "esponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.c"
  "ommon.Status\0229\n\005infos\030\002 \003(\0132*.milvus.pro"
  "to.milvus.PersistentSegmentInfo\"\360\001\n\020Quer"
  "ySegmentInfo\022\021\n\tsegmentID\030\001 \001(\003\022\024\n\014colle"
  "ctionID\030\002 \001(\003\022\023\n\013partitionID\030\003 \001(\003\022\020\n\010me"
  "m_size\030\004 \001(\003\022\020\n\010num_rows\030\005 \001(\003\022\022\n\nindex_"
  "name\030\006 \001(\t\022\017\n\007indexID\030\007 \001(\003\022\022\n\006nodeID\030\010 "
  "\001(\003B\002\030\001\0220\n\005state\030\t \001(\0162!.milvus.proto.co"
  "mmon.SegmentState\022\017\n\007nodeIds\030\n \003(\003\"p\n\032Ge"
  "tQuerySegmentInfoRequest\022*\n\004base\030\001 \001(\0132\034"
  ".milvus.proto.common.MsgBase\022\016\n\006dbName\030\002"
  " \001(\t\022\026\n\016collectionName\030\003 \001(\t\"\200\001\n\033GetQuer"
  "ySegmentInfoResponse\022+\n\006status\030\001 \001(\0132\033.m"
  "ilvus.proto.common.Status\0224\n\005infos\030\002 \003(\013"
  "2%.milvus.proto.milvus.QuerySegmentInfo\""
  "$\n\014DummyRequest\022\024\n\014request_type\030\001 \001(\t\"!\n"
  "\rDummyResponse\022\020\n\010response\030\001 \001(\t\"\025\n\023Regi"
  "sterLinkRequest\"r\n\024RegisterLinkResponse\022"
  "-\n\007address\030\001 \001(\0132\034.milvus.proto.common.A"
  "ddress\022+\n\006status\030\002 \001(\0132\033.milvus.proto.co"
  "mmon.Status\"P\n\021GetMetricsRequest\022*\n\004base"
  "\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\017\n\007"
  "request\030\002 \001(\t\"k\n\022GetMetricsResponse\022+\n\006s"
  "tatus\030\001 \001(\0132\033.milvus.proto.common.Status"
  "\022\020\n\010response\030\002 \001(\t\022\026\n\016component_name\030\003 \001"
  "(\t\"\230\001\n\rComponentInfo\022\016\n\006nodeID\030\001 \001(\003\022\014\n\004"
  "role\030\002 \001(\t\0222\n\nstate_code\030\003 \001(\0162\036.milvus."
  "proto.common.StateCode\0225\n\nextra_info\030\004 \003"
  "(\0132!.milvus.proto.common.KeyValuePair\"\262\001"
  "\n\017ComponentStates\0221\n\005state\030\001 \001(\0132\".milvu"
  "s.proto.milvus.ComponentInfo\022\?\n\023subcompo"
  "nent_states\030\002 \003(\0132\".milvus.proto.milvus."
  "ComponentInfo\022+\n\006status\030\003 \001(\0132\033.milvus.p"
  "roto.common.Status\"\033\n\031GetComponentStates"
  "Request\"\266\001\n\022LoadBalanceRequest\022*\n\004base\030\001"
  " \001(\0132\034.milvus.proto.common.MsgBase\022\022\n\nsr"
  "c_nodeID\030\002 \001(\003\022\023\n\013dst_nodeIDs\030\003 \003(\003\022\031\n\021s"
  "ealed_segmentIDs\030\004 \003(\003\022\026\n\016collectionName"
  "\030\005 \001(\t\022\017\n\007db_name\030\006 \001(\t:\007\312>\004\020\021\030\005\"L\n\027Manu"
  "alCompactionRequest\022\024\n\014collectionID\030\001 \001("
  "\003\022\022\n\ntimetravel\030\002 \001(\004:\007\312>\004\020\007\030\001\"z\n\030Manual"
  "CompactionResponse\022+\n\006status\030\001 \001(\0132\033.mil"
  "vus.proto.common.Status\022\024\n\014compactionID\030"
  "\002 \001(\003\022\033\n\023compactionPlanCount\030\003 \001(\005\"1\n\031Ge"
  "tCompactionStateRequest\022\024\n\014compactionID\030"
  "\001 \001(\003\"\335\001\n\032GetCompactionStateResponse\022+\n\006"
  "status\030\001 \001(\0132\033.milvus.proto.common.Statu"
  "s\0223\n\005state\030\002 \001(\0162$.milvus.proto.common.C"
  "ompactionState\022\027\n\017executingPlanNo\030\003 \001(\003\022"
  "\025\n\rtimeoutPlanNo\030\004 \001(\003\022\027\n\017completedPlanN"
  "o\030\005 \001(\003\022\024\n\014failedPlanNo\030\006 \001(\003\"1\n\031GetComp"
  "actionPlansRequest\022\024\n\014compactionID\030\001 \001(\003"
  "\"\274\001\n\032GetCompactionPlansResponse\022+\n\006statu"
  "s\030\001 \001(\0132\033.milvus.proto.common.Status\0223\n\005"
  "state\030\002 \001(\0162$.milvus.proto.common.Compac"
  "tionState\022<\n\nmergeInfos\030\003 \003(\0132(.milvus.p"
  "roto.milvus.CompactionMergeInfo\"6\n\023Compa"
  "ctionMergeInfo\022\017\n\007sources\030\001 \003(\003\022\016\n\006targe"
  "t\030\002 \001(\003\"o\n\024GetFlushStateRequest\022\022\n\nsegme"
  "ntIDs\030\001 \003(\003\022\020\n\010flush_ts\030\002 \001(\004\022\017\n\007db_name"
  "\030\003 \001(\t\022\027\n\017collection_name\030\004 \001(\t:\007\312>\004\020+\030\004"
  "\"U\n\025GetFlushStateResponse\022+\n\006status\030\001 \001("
  "\0132\033.milvus.proto.common.Status\022\017\n\007flushe"
  "d\030\002 \001(\010\"l\n\027GetFlushAllStateRequest\022*\n\004ba"
  "se\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\024"
  "\n\014flush_all_ts\030\002 \001(\004\022\017\n\007db_name\030\003 \001(\t\"X\n"
  "\030GetFlushAllStateResponse\022+\n\006status\030\001 \001("
  "\0132\033.milvus.proto.common.Status\022\017\n\007flushe"
  "d\030\002 \001(\010\"\307\001\n\rImportRequest\022\027\n\017collection_"
  "name\030\001 \001(\t\022\026\n\016partition_name\030\002 \001(\t\022\025\n\rch"
  "annel_names\030\003 \003(\t\022\021\n\trow_based\030\004 \001(\010\022\r\n\005"
  "files\030\005 \003(\t\0222\n\007options\030\006 \003(\0132!.milvus.pr"
  "oto.common.KeyValuePair\022\017\n\007db_name\030\007 \001(\t"
  ":\007\312>\004\020\022\030\001\"L\n\016ImportResponse\022+\n\006status\030\001 "
  "\001(\0132\033.milvus.proto.common.Status\022\r\n\005task"
  "s\030\002 \003(\003\"%\n\025GetImportStateRequest\022\014\n\004task"
  "\030\001 \001(\003\"\227\002\n\026GetImportStateResponse\022+\n\006sta"
  "tus\030\001 \001(\0132\033.milvus.proto.common.Status\022/"
  "\n\005state\030\002 \001(\0162 .milvus.proto.common.Impo"
  "rtState\022\021\n\trow_count\030\003 \001(\003\022\017\n\007id_list\030\004 "
  "\003(\003\0220\n\005infos\030\005 \003(\0132!.milvus.proto.common"
  ".KeyValuePair\022\n\n\002id\030\006 \001(\003\022\025\n\rcollection_"
  "id\030\007 \001(\003\022\023\n\013segment_ids\030\010 \003(\003\022\021\n\tcreate_"
  "ts\030\t \001(\003\"Q\n\026ListImportTasksRequest\022\027\n\017co"
  "llection_name\030\001 \001(\t\022\r\n\005limit\030\002 \001(\003\022\017\n\007db"
  "_name\030\003 \001(\t\"\202\001\n\027ListImportTasksResponse\022"
  "+\n\006status\030\001 \001(\0132\033.milvus.proto.common.St"
  "atus\022:\n\005tasks\030\002 \003(\0132+.milvus.proto.milvu"
  "s.GetImportStateResponse\"\232\001\n\022GetReplicas"
  "Request\022*\n\004base\030\001 \001(\0132\034.milvus.proto.com"
  "mon.MsgBase\022\024\n\014collectionID\030\002 \001(\003\022\030\n\020wit"
  "h_shard_nodes\030\003 \001(\010\022\027\n\017collection_name\030\004"
  " \001(\t\022\017\n\007db_name\030\005 \001(\t\"v\n\023GetReplicasResp"
  "onse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.comm"
  "on.Status\0222\n\010replicas\030\002 \003(\0132 .milvus.pro"
  "to.milvus.ReplicaInfo\"\301\002\n\013ReplicaInfo\022\021\n"
  "\treplicaID\030\001 \001(\003\022\024\n\014collectionID\030\002 \001(\003\022\025"
  "\n\rpartition_ids\030\003 \003(\003\0229\n\016shard_replicas\030"
  "\004 \003(\0132!.milvus.proto.milvus.ShardReplica"
  "\022\020\n\010node_ids\030\005 \003(\003\022\033\n\023resource_group_nam"
  "e\030\006 \001(\t\022P\n\021num_outbound_node\030\007 \003(\01325.mil"
  "vus.proto.milvus.ReplicaInfo.NumOutbound"
  "NodeEntry\0326\n\024NumOutboundNodeEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"`\n\014ShardReplic"
  "a\022\020\n\010leaderID\030\001 \001(\003\022\023\n\013leader_addr\030\002 \001(\t"
  "\022\027\n\017dm_channel_name\030\003 \001(\t\022\020\n\010node_ids\030\004 "
  "\003(\003\"\276\001\n\027CreateCredentialRequest\022*\n\004base\030"
  "\001 \001(\0132\034.milvus.proto.common.MsgBase\022\020\n\010u"
  "sername\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\036\n\026creat"
  "ed_utc_timestamps\030\004 \001(\004\022\037\n\027modified_utc_"
  "timestamps\030\005 \001(\004:\022\312>\017\010\001\020\023\030\377\377\377\377\377\377\377\377\377\001\"\315\001\n"
  "\027UpdateCredentialRequest\022*\n\004base\030\001 \001(\0132\034"
  ".milvus.proto.common.MsgBase\022\020\n\010username"
  "\030\002 \001(\t\022\023\n\013oldPassword\030\003 \001(\t\022\023\n\013newPasswo"
  "rd\030\004 \001(\t\022\036\n\026created_utc_timestamps\030\005 \001(\004"
  "\022\037\n\027modified_utc_timestamps\030\006 \001(\004:\t\312>\006\010\002"
  "\020\024\030\002\"k\n\027DeleteCredentialRequest\022*\n\004base\030"
  "\001 \001(\0132\034.milvus.proto.common.MsgBase\022\020\n\010u"
  "sername\030\002 \001(\t:\022\312>\017\010\001\020\025\030\377\377\377\377\377\377\377\377\377\001\"W\n\025Lis"
  "tCredUsersResponse\022+\n\006status\030\001 \001(\0132\033.mil"
  "vus.proto.common.Status\022\021\n\tusernames\030\002 \003"
  "(\t\"V\n\024ListCredUsersRequest\022*\n\004base\030\001 \001(\013"
  "2\034.milvus.proto.common.MsgBase:\022\312>\017\010\001\020\026\030"
  "\377\377\377\377\377\377\377\377\377\001\"\032\n\nRoleEntity\022\014\n\004name\030\001 \001(\t\"\032"
  "\n\nUserEntity\022\014\n\004name\030\001 \001(\t\"\204\001\n\021CreateRol"
  "eRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.co"
  "mmon.MsgBase\022/\n\006entity\030\002 \001(\0132\037.milvus.pr"
  "oto.milvus.RoleEntity:\022\312>\017\010\001\020\023\030\377\377\377\377\377\377\377\377\377"
  "\001\"d\n\017DropRoleRequest\022*\n\004base\030\001 \001(\0132\034.mil"
  "vus.proto.common.MsgBase\022\021\n\trole_name\030\002 "
  "\001(\t:\022\312>\017\010\001\020\025\030\377\377\377\377\377\377\377\377\377\001\"\265\001\n\026OperateUserR"
  "oleRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto."
  "common.MsgBase\022\020\n\010username\030\002 \001(\t\022\021\n\trole"
  "_name\030\003 \001(\t\0226\n\004type\030\004 \001(\0162(.milvus.proto"
  ".milvus.OperateUserRoleType:\022\312>\017\010\001\020\027\030\377\377\377"
  "\377\377\377\377\377\377\001\"\235\001\n\021SelectRoleRequest\022*\n\004base\030\001 "
  "\001(\0132\034.milvus.proto.common.MsgBase\022-\n\004rol"
  "e\030\002 \001(\0132\037.milvus.proto.milvus.RoleEntity"
  "\022\031\n\021include_user_info\030\003 \001(\010:\022\312>\017\010\001\020\026\030\377\377\377"
  "\377\377\377\377\377\377\001\"k\n\nRoleResult\022-\n\004role\030\001 \001(\0132\037.mi"
  "lvus.proto.milvus.RoleEntity\022.\n\005users\030\002 "
  "\003(\0132\037.milvus.proto.milvus.UserEntity\"s\n\022"
  "SelectRoleResponse\022+\n\006status\030\001 \001(\0132\033.mil"
  "vus.proto.common.Status\0220\n\007results\030\002 \003(\013"
  "2\037.milvus.proto.milvus.RoleResult\"\224\001\n\021Se"
  "lectUserRequest\022*\n\004base\030\001 \001(\0132\034.milvus.p"
  "roto.common.MsgBase\022-\n\004user\030\002 \001(\0132\037.milv"
  "us.proto.milvus.UserEntity\022\031\n\021include_ro"
  "le_info\030\003 \001(\010:\t\312>\006\010\002\020\030\030\002\"k\n\nUserResult\022-"
  "\n\004user\030\001 \001(\0132\037.milvus.proto.milvus.UserE"
  "ntity\022.\n\005roles\030\002 \003(\0132\037.milvus.proto.milv"
  "us.RoleEntity\"s\n\022SelectUserResponse\022+\n\006s"
  "tatus\030\001 \001(\0132\033.milvus.proto.common.Status"
  "\0220\n\007results\030\002 \003(\0132\037.milvus.proto.milvus."
  "UserResult\"\034\n\014ObjectEntity\022\014\n\004name\030\001 \001(\t"
  "\"\037\n\017PrivilegeEntity\022\014\n\004name\030\001 \001(\t\"w\n\rGra"
  "ntorEntity\022-\n\004user\030\001 \001(\0132\037.milvus.proto."
  "milvus.UserEntity\0227\n\tprivilege\030\002 \001(\0132$.m"
  "ilvus.proto.milvus.PrivilegeEntity\"L\n\024Gr"
  "antPrivilegeEntity\0224\n\010entities\030\001 \003(\0132\".m"
  "ilvus.proto.milvus.GrantorEntity\"\312\001\n\013Gra"
  "ntEntity\022-\n\004role\030\001 \001(\0132\037.milvus.proto.mi"
  "lvus.RoleEntity\0221\n\006object\030\002 \001(\0132!.milvus"
  ".proto.milvus.ObjectEntity\022\023\n\013object_nam"
  "e\030\003 \001(\t\0223\n\007grantor\030\004 \001(\0132\".milvus.proto."
  "milvus.GrantorEntity\022\017\n\007db_name\030\005 \001(\t\"\206\001"
  "\n\022SelectGrantRequest\022*\n\004base\030\001 \001(\0132\034.mil"
  "vus.proto.common.MsgBase\0220\n\006entity\030\002 \001(\013"
  "2 .milvus.proto.milvus.GrantEntity:\022\312>\017\010"
  "\001\020\026\030\377\377\377\377\377\377\377\377\377\001\"v\n\023SelectGrantResponse\022+\n"
  "\006status\030\001 \001(\0132\033.milvus.proto.common.Stat"
  "us\0222\n\010entities\030\002 \003(\0132 .milvus.proto.milv"
  "us.GrantEntity\"\304\001\n\027OperatePrivilegeReque"
  "st\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.M"
  "sgBase\0220\n\006entity\030\002 \001(\0132 .milvus.proto.mi"
  "lvus.GrantEntity\0227\n\004type\030\003 \001(\0162).milvus."
  "proto.milvus.OperatePrivilegeType:\022\312>\017\010\001"
  "\020\027\030\377\377\377\377\377\377\377\377\377\001\"\223\001\n\031GetLoadingProgressRequ"
  "est\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common."
  "MsgBase\022\027\n\017collection_name\030\002 \001(\t\022\027\n\017part"
  "ition_names\030\003 \003(\t\022\017\n\007db_name\030\004 \001(\t:\007\312>\004\020"
  "\005\030\002\"u\n\032GetLoadingProgressResponse\022+\n\006sta"
  "tus\030\001 \001(\0132\033.milvus.proto.common.Status\022\020"
  "\n\010progress\030\002 \001(\003\022\030\n\020refresh_progress\030\003 \001"
  "(\003\"\215\001\n\023GetLoadStateRequest\022*\n\004base\030\001 \001(\013"
  "2\034.milvus.proto.common.MsgBase\022\027\n\017collec"
  "tion_name\030\002 \001(\t\022\027\n\017partition_names\030\003 \003(\t"
  "\022\017\n\007db_name\030\004 \001(\t:\007\312>\004\020\005\030\002\"r\n\024GetLoadSta"
  "teResponse\022+\n\006status\030\001 \001(\0132\033.milvus.prot"
  "o.common.Status\022-\n\005state\030\002 \001(\0162\036.milvus."
  "proto.common.LoadState\"\034\n\tMilvusExt\022\017\n\007v"
  "ersion\030\001 \001(\t\"\023\n\021GetVersionRequest\"R\n\022Get"
  "VersionResponse\022+\n\006status\030\001 \001(\0132\033.milvus"
  ".proto.common.Status\022\017\n\007version\030\002 \001(\t\"\024\n"
  "\022CheckHealthRequest\"\235\001\n\023CheckHealthRespo"
  "nse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.commo"
  "n.Status\022\021\n\tisHealthy\030\002 \001(\010\022\017\n\007reasons\030\003"
  " \003(\t\0225\n\014quota_states\030\004 \003(\0162\037.milvus.prot"
  "o.milvus.QuotaState\"t\n\032CreateResourceGro"
  "upRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.c"
  "ommon.MsgBase\022\026\n\016resource_group\030\002 \001(\t:\022\312"
  ">\017\010\001\020\032\030\377\377\377\377\377\377\377\377\377\001\"r\n\030DropResourceGroupRe"
  "quest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.commo"
  "n.MsgBase\022\026\n\016resource_group\030\002 \001(\t:\022\312>\017\010\001"
  "\020\033\030\377\377\377\377\377\377\377\377\377\001\"\245\001\n\023TransferNodeRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e\022\035\n\025source_resource_group\030\002 \001(\t\022\035\n\025targ"
  "et_resource_group\030\003 \001(\t\022\020\n\010num_node\030\004 \001("
  "\005:\022\312>\017\010\001\020\036\030\377\377\377\377\377\377\377\377\377\001\"\325\001\n\026TransferReplic"
  "aRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.co"
  "mmon.MsgBase\022\035\n\025source_resource_group\030\002 "
  "\001(\t\022\035\n\025target_resource_group\030\003 \001(\t\022\027\n\017co"
  "llection_name\030\004 \001(\t\022\023\n\013num_replica\030\005 \001(\003"
  "\022\017\n\007db_name\030\006 \001(\t:\022\312>\017\010\001\020\037\030\377\377\377\377\377\377\377\377\377\001\"[\n"
  "\031ListResourceGroupsRequest\022*\n\004base\030\001 \001(\013"
  "2\034.milvus.proto.common.MsgBase:\022\312>\017\010\001\020\035\030"
  "\377\377\377\377\377\377\377\377\377\001\"b\n\032ListResourceGroupsResponse"
  "\022+\n\006status\030\001 \001(\0132\033.milvus.proto.common.S"
  "tatus\022\027\n\017resource_groups\030\002 \003(\t\"v\n\034Descri"
  "beResourceGroupRequest\022*\n\004base\030\001 \001(\0132\034.m"
  "ilvus.proto.common.MsgBase\022\026\n\016resource_g"
  "roup\030\002 \001(\t:\022\312>\017\010\001\020\034\030\377\377\377\377\377\377\377\377\377\001\"\210\001\n\035Descr"
  "ibeResourceGroupResponse\022+\n\006status\030\001 \001(\013"
  "2\033.milvus.proto.common.Status\022:\n\016resourc"
  "e_group\030\002 \001(\0132\".milvus.proto.milvus.Reso"
  "urceGroup\"\362\003\n\rResourceGroup\022\014\n\004name\030\001 \001("
  "\t\022\020\n\010capacity\030\002 \001(\005\022\032\n\022num_available_nod"
  "e\030\003 \001(\005\022T\n\022num_loaded_replica\030\004 \003(\01328.mi"
  "lvus.proto.milvus.ResourceGroup.NumLoade"
  "dReplicaEntry\022R\n\021num_outgoing_node\030\005 \003(\013"
  "27.milvus.proto.milvus.ResourceGroup.Num"
  "OutgoingNodeEntry\022R\n\021num_incoming_node\030\006"
  " \003(\01327.milvus.proto.milvus.ResourceGroup"
  ".NumIncomingNodeEntry\0327\n\025NumLoadedReplic"
  "aEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\0326"
  "\n\024NumOutgoingNodeEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\005:\0028\001\0326\n\024NumIncomingNodeEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"\237\001\n\027Renam"
  "eCollectionRequest\022*\n\004base\030\001 \001(\0132\034.milvu"
  "s.proto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022"
  "\017\n\007oldName\030\003 \001(\t\022\017\n\007newName\030\004 \001(\t\022\021\n\tnew"
  "DBName\030\005 \001(\t:\022\312>\017\010\001\020\"\030\377\377\377\377\377\377\377\377\377\001\"\241\001\n\031Get"
  "IndexStatisticsRequest\022*\n\004base\030\001 \001(\0132\034.m"
  "ilvus.proto.common.MsgBase\022\017\n\007db_name\030\002 "
  "\001(\t\022\027\n\017collection_name\030\003 \001(\t\022\022\n\nindex_na"
  "me\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001(\004:\007\312>\004\020\014\030\003\"\214\001\n"
  "\032GetIndexStatisticsResponse\022+\n\006status\030\001 "
  "\001(\0132\033.milvus.proto.common.Status\022A\n\022inde"
  "x_descriptions\030\002 \003(\0132%.milvus.proto.milv"
  "us.IndexDescription\"r\n\016ConnectRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e\0224\n\013client_info\030\002 \001(\0132\037.milvus.proto.co"
  "mmon.ClientInfo\"\210\001\n\017ConnectResponse\022+\n\006s"
  "tatus\030\001 \001(\0132\033.milvus.proto.common.Status"
  "\0224\n\013server_info\030\002 \001(\0132\037.milvus.proto.com"
  "mon.ServerInfo\022\022\n\nidentifier\030\003 \001(\003\"C\n\025Al"
  "locTimestampRequest\022*\n\004base\030\001 \001(\0132\034.milv"
  "us.proto.common.MsgBase\"X\n\026AllocTimestam"
  "pResponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto"
  ".common.Status\022\021\n\ttimestamp\030\002 \001(\004\"h\n\025Cre"
  "ateDatabaseRequest\022*\n\004base\030\001 \001(\0132\034.milvu"
  "s.proto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t:"
  "\022\312>\017\010\001\020#\030\377\377\377\377\377\377\377\377\377\001\"f\n\023DropDatabaseReque"
  "st\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.M"
  "sgBase\022\017\n\007db_name\030\002 \001(\t:\022\312>\017\010\001\020$\030\377\377\377\377\377\377\377"
  "\377\377\001\"V\n\024ListDatabasesRequest\022*\n\004base\030\001 \001("
  "\0132\034.milvus.proto.common.MsgBase:\022\312>\017\010\001\020%"
  "\030\377\377\377\377\377\377\377\377\377\001\"\205\001\n\025ListDatabasesResponse\022+\n"
  "\006status\030\001 \001(\0132\033.milvus.proto.common.Stat"
  "us\022\020\n\010db_names\030\002 \003(\t\022\031\n\021created_timestam"
  "p\030\003 \003(\004:\022\312>\017\010\001\020\004\030\377\377\377\377\377\377\377\377\377\001\"\365\001\n\027Replicat"
  "eMessageRequest\022*\n\004base\030\001 \001(\0132\034.milvus.p"
  "roto.common.MsgBase\022\024\n\014channel_name\030\002 \001("
  "\t\022\017\n\007BeginTs\030\003 \001(\004\022\r\n\005EndTs\030\004 \001(\004\022\014\n\004Msg"
  "s\030\005 \003(\014\0225\n\016StartPositions\030\006 \003(\0132\035.milvus"
  ".proto.msg.MsgPosition\0223\n\014EndPositions\030\007"
  " \003(\0132\035.milvus.proto.msg.MsgPosition\"Y\n\030R"
  "eplicateMessageResponse\022+\n\006status\030\001 \001(\0132"
  "\033.milvus.proto.common.Status\022\020\n\010position"
  "\030\002 \001(\t*%\n\010ShowType\022\007\n\003All\020\000\022\014\n\010InMemory\020"
  "\001\032\002\030\001*@\n\023OperateUserRoleType\022\021\n\rAddUserT"
  "oRole\020\000\022\026\n\022RemoveUserFromRole\020\001*-\n\024Opera"
  "tePrivilegeType\022\t\n\005Grant\020\000\022\n\n\006Revoke\020\001*]"
  "\n\nQuotaState\022\013\n\007Unknown\020\000\022\017\n\013ReadLimited"
  "\020\002\022\020\n\014WriteLimited\020\003\022\016\n\nDenyToRead\020\004\022\017\n\013"
  "DenyToWrite\020\0052\373A\n\rMilvusService\022_\n\020Creat"
  "eCollection\022,.milvus.proto.milvus.Create"
  "CollectionRequest\032\033.milvus.proto.common."
  "Status\"\000\022[\n\016DropCollection\022*.milvus.prot"
  "o.milvus.DropCollectionRequest\032\033.milvus."
  "proto.common.Status\"\000\022_\n\rHasCollection\022)"
  ".milvus.proto.milvus.HasCollectionReques"
  "t\032!.milvus.proto.milvus.BoolResponse\"\000\022["
  "\n\016LoadCollection\022*.milvus.proto.milvus.L"
  "oadCollectionRequest\032\033.milvus.proto.comm"
  "on.Status\"\000\022a\n\021ReleaseCollection\022-.milvu"
  "s.proto.milvus.ReleaseCollectionRequest\032"
  "\033.milvus.proto.common.Status\"\000\022w\n\022Descri"
  "beCollection\022..milvus.proto.milvus.Descr"
  "ibeCollectionRequest\032/.milvus.proto.milv"
  "us.DescribeCollectionResponse\"\000\022\206\001\n\027GetC"
  "ollectionStatistics\0223.milvus.proto.milvu"
  "s.GetCollectionStatisticsRequest\0324.milvu"
  "s.proto.milvus.GetCollectionStatisticsRe"
  "sponse\"\000\022n\n\017ShowCollections\022+.milvus.pro"
  "to.milvus.ShowCollectionsRequest\032,.milvu"
  "s.proto.milvus.ShowCollectionsResponse\"\000"
  "\022]\n\017AlterCollection\022+.milvus.proto.milvu"
  "s.AlterCollectionRequest\032\033.milvus.proto."
  "common.Status\"\000\022]\n\017CreatePartition\022+.mil"
  "vus.proto.milvus.CreatePartitionRequest\032"
  "\033.milvus.proto.common.Status\"\000\022Y\n\rDropPa"
  "rtition\022).milvus.proto.milvus.DropPartit"
  "ionRequest\032\033.milvus.proto.common.Status\""
  "\000\022]\n\014HasPartition\022(.milvus.proto.milvus."
  "HasPartitionRequest\032!.milvus.proto.milvu"
  "s.BoolResponse\"\000\022[\n\016LoadPartitions\022*.mil"
  "vus.proto.milvus.LoadPartitionsRequest\032\033"
  ".milvus.proto.common.Status\"\000\022a\n\021Release"
  "Partitions\022-.milvus.proto.milvus.Release"
  "PartitionsRequest\032\033.milvus.proto.common."
  "Status\"\000\022\203\001\n\026GetPartitionStatistics\0222.mi"
  "lvus.proto.milvus.GetPartitionStatistics"
  "Request\0323.milvus.proto.milvus.GetPartiti"
  "onStatisticsResponse\"\000\022k\n\016ShowPartitions"
  "\022*.milvus.proto.milvus.ShowPartitionsReq"
  "uest\032+.milvus.proto.milvus.ShowPartition"
  "sResponse\"\000\022w\n\022GetLoadingProgress\022..milv"
  "us.proto.milvus.GetLoadingProgressReques"
  "t\032/.milvus.proto.milvus.GetLoadingProgre"
  "ssResponse\"\000\022e\n\014GetLoadState\022(.milvus.pr"
  "oto.milvus.GetLoadStateRequest\032).milvus."
  "proto.milvus.GetLoadStateResponse\"\000\022U\n\013C"
  "reateAlias\022\'.milvus.proto.milvus.CreateA"
  "liasRequest\032\033.milvus.proto.common.Status"
  "\"\000\022Q\n\tDropAlias\022%.milvus.proto.milvus.Dr"
  "opAliasRequest\032\033.milvus.proto.common.Sta"
  "tus\"\000\022S\n\nAlterAlias\022&.milvus.proto.milvu"
  "s.AlterAliasRequest\032\033.milvus.proto.commo"
  "n.Status\"\000\022h\n\rDescribeAlias\022).milvus.pro"
  "to.milvus.DescribeAliasRequest\032*.milvus."
  "proto.milvus.DescribeAliasResponse\"\000\022b\n\013"
  "ListAliases\022\'.milvus.proto.milvus.ListAl"
  "iasesRequest\032(.milvus.proto.milvus.ListA"
  "liasesResponse\"\000\022U\n\013CreateIndex\022\'.milvus"
  ".proto.milvus.CreateIndexRequest\032\033.milvu"
  "s.proto.common.Status\"\000\022S\n\nAlterIndex\022&."
  "milvus.proto.milvus.AlterIndexRequest\032\033."
  "milvus.proto.common.Status\"\000\022h\n\rDescribe"
  "Index\022).milvus.proto.milvus.DescribeInde"
  "xRequest\032*.milvus.proto.milvus.DescribeI"
  "ndexResponse\"\000\022w\n\022GetIndexStatistics\022..m"
  "ilvus.proto.milvus.GetIndexStatisticsReq"
  "uest\032/.milvus.proto.milvus.GetIndexStati"
  "sticsResponse\"\000\022k\n\rGetIndexState\022).milvu"
  "s.proto.milvus.GetIndexStateRequest\032*.mi"
  "lvus.proto.milvus.GetIndexStateResponse\""
  "\003\210\002\001\022\203\001\n\025GetIndexBuildProgress\0221.milvus."
  "proto.milvus.GetIndexBuildProgressReques"
  "t\0322.milvus.proto.milvus.GetIndexBuildPro"
  "gressResponse\"\003\210\002\001\022Q\n\tDropIndex\022%.milvus"
  ".proto.milvus.DropIndexRequest\032\033.milvus."
  "proto.common.Status\"\000\022S\n\006Insert\022\".milvus"
  ".proto.milvus.InsertRequest\032#.milvus.pro"
  "to.milvus.MutationResult\"\000\022S\n\006Delete\022\".m"
  "ilvus.proto.milvus.DeleteRequest\032#.milvu"
  "s.proto.milvus.MutationResult\"\000\022S\n\006Upser"
  "t\022\".milvus.proto.milvus.UpsertRequest\032#."
  "milvus.proto.milvus.MutationResult\"\000\022R\n\006"
  "Search\022\".milvus.proto.milvus.SearchReque"
  "st\032\".milvus.proto.milvus.SearchResults\"\000"
  "\022V\n\010SearchV2\022$.milvus.proto.milvus.Searc"
  "hRequestV2\032\".milvus.proto.milvus.SearchR"
  "esults\"\000\022P\n\005Flush\022!.milvus.proto.milvus."
  "FlushRequest\032\".milvus.proto.milvus.Flush"
  "Response\"\000\022O\n\005Query\022!.milvus.proto.milvu"
  "s.QueryRequest\032!.milvus.proto.milvus.Que"
  "ryResults\"\000\022d\n\014CalcDistance\022(.milvus.pro"
  "to.milvus.CalcDistanceRequest\032(.milvus.p"
  "roto.milvus.CalcDistanceResults\"\000\022Y\n\010Flu"
  "shAll\022$.milvus.proto.milvus.FlushAllRequ"
  "est\032%.milvus.proto.milvus.FlushAllRespon"
  "se\"\000\022h\n\rGetFlushState\022).milvus.proto.mil"
  "vus.GetFlushStateRequest\032*.milvus.proto."
  "milvus.GetFlushStateResponse\"\000\022q\n\020GetFlu"
  "shAllState\022,.milvus.proto.milvus.GetFlus"
  "hAllStateRequest\032-.milvus.proto.milvus.G"
  "etFlushAllStateResponse\"\000\022\211\001\n\030GetPersist"
  "entSegmentInfo\0224.milvus.proto.milvus.Get"
  "PersistentSegmentInfoRequest\0325.milvus.pr"
  "oto.milvus.GetPersistentSegmentInfoRespo"
  "nse\"\000\022z\n\023GetQuerySegmentInfo\022/.milvus.pr"
  "oto.milvus.GetQuerySegmentInfoRequest\0320."
  "milvus.proto.milvus.GetQuerySegmentInfoR"
  "esponse\"\000\022b\n\013GetReplicas\022\'.milvus.proto."
  "milvus.GetReplicasRequest\032(.milvus.proto"
  ".milvus.GetReplicasResponse\"\000\022P\n\005Dummy\022!"
  ".milvus.proto.milvus.DummyRequest\032\".milv"
  "us.proto.milvus.DummyResponse\"\000\022e\n\014Regis"
  "terLink\022(.milvus.proto.milvus.RegisterLi"
  "nkRequest\032).milvus.proto.milvus.Register"
  "LinkResponse\"\000\022_\n\nGetMetrics\022&.milvus.pr"
  "oto.milvus.GetMetricsRequest\032\'.milvus.pr"
  "oto.milvus.GetMetricsResponse\"\000\022l\n\022GetCo"
  "mponentStates\022..milvus.proto.milvus.GetC"
  "omponentStatesRequest\032$.milvus.proto.mil"
  "vus.ComponentStates\"\000\022U\n\013LoadBalance\022\'.m"
  "ilvus.proto.milvus.LoadBalanceRequest\032\033."
  "milvus.proto.common.Status\"\000\022w\n\022GetCompa"
  "ctionState\022..milvus.proto.milvus.GetComp"
  "actionStateRequest\032/.milvus.proto.milvus"
  ".GetCompactionStateResponse\"\000\022q\n\020ManualC"
  "ompaction\022,.milvus.proto.milvus.ManualCo"
  "mpactionRequest\032-.milvus.proto.milvus.Ma"
  "nualCompactionResponse\"\000\022\200\001\n\033GetCompacti"
  "onStateWithPlans\022..milvus.proto.milvus.G"
  "etCompactionPlansRequest\032/.milvus.proto."
  "milvus.GetCompactionPlansResponse\"\000\022S\n\006I"
  "mport\022\".milvus.proto.milvus.ImportReques"
  "t\032#.milvus.proto.milvus.ImportResponse\"\000"
  "\022k\n\016GetImportState\022*.milvus.proto.milvus"
  ".GetImportStateRequest\032+.milvus.proto.mi"
  "lvus.GetImportStateResponse\"\000\022n\n\017ListImp"
  "ortTasks\022+.milvus.proto.milvus.ListImpor"
  "tTasksRequest\032,.milvus.proto.milvus.List"
  "ImportTasksResponse\"\000\022_\n\020CreateCredentia"
  "l\022,.milvus.proto.milvus.CreateCredential"
  "Request\032\033.milvus.proto.common.Status\"\000\022_"
  "\n\020UpdateCredential\022,.milvus.proto.milvus"
  ".UpdateCredentialRequest\032\033.milvus.proto."
  "common.Status\"\000\022_\n\020DeleteCredential\022,.mi"
  "lvus.proto.milvus.DeleteCredentialReques"
  "t\032\033.milvus.proto.common.Status\"\000\022h\n\rList"
  "CredUsers\022).milvus.proto.milvus.ListCred"
  "UsersRequest\032*.milvus.proto.milvus.ListC"
  "redUsersResponse\"\000\022S\n\nCreateRole\022&.milvu"
  "s.proto.milvus.CreateRoleRequest\032\033.milvu"
  "s.proto.common.Status\"\000\022O\n\010DropRole\022$.mi"
  "lvus.proto.milvus.DropRoleRequest\032\033.milv"
  "us.proto.common.Status\"\000\022]\n\017OperateUserR"
  "ole\022+.milvus.proto.milvus.OperateUserRol"
  "eRequest\032\033.milvus.proto.common.Status\"\000\022"
  "_\n\nSelectRole\022&.milvus.proto.milvus.Sele"
  "ctRoleRequest\032\'.milvus.proto.milvus.Sele"
  "ctRoleResponse\"\000\022_\n\nSelectUser\022&.milvus."
  "proto.milvus.SelectUserRequest\032\'.milvus."
  "proto.milvus.SelectUserResponse\"\000\022_\n\020Ope"
  "ratePrivilege\022,.milvus.proto.milvus.Oper"
  "atePrivilegeRequest\032\033.milvus.proto.commo"
  "n.Status\"\000\022b\n\013SelectGrant\022\'.milvus.proto"
  ".milvus.SelectGrantRequest\032(.milvus.prot"
  "o.milvus.SelectGrantResponse\"\000\022_\n\nGetVer"
  "sion\022&.milvus.proto.milvus.GetVersionReq"
  "uest\032\'.milvus.proto.milvus.GetVersionRes"
  "ponse\"\000\022b\n\013CheckHealth\022\'.milvus.proto.mi"
  "lvus.CheckHealthRequest\032(.milvus.proto.m"
  "ilvus.CheckHealthResponse\"\000\022e\n\023CreateRes"
  "ourceGroup\022/.milvus.proto.milvus.CreateR"
  "esourceGroupRequest\032\033.milvus.proto.commo"
  "n.Status\"\000\022a\n\021DropResourceGroup\022-.milvus"
  ".proto.milvus.DropResourceGroupRequest\032\033"
  ".milvus.proto.common.Status\"\000\022W\n\014Transfe"
  "rNode\022(.milvus.proto.milvus.TransferNode"
  "Request\032\033.milvus.proto.common.Status\"\000\022]"
  "\n\017TransferReplica\022+.milvus.proto.milvus."
  "TransferReplicaRequest\032\033.milvus.proto.co"
  "mmon.Status\"\000\022w\n\022ListResourceGroups\022..mi"
  "lvus.proto.milvus.ListResourceGroupsRequ"
  "est\032/.milvus.proto.milvus.ListResourceGr"
  "oupsResponse\"\000\022\200\001\n\025DescribeResourceGroup"
  "\0221.milvus.proto.milvus.DescribeResourceG"
  "roupRequest\0322.milvus.proto.milvus.Descri"
  "beResourceGroupResponse\"\000\022_\n\020RenameColle"
  "ction\022,.milvus.proto.milvus.RenameCollec"
  "tionRequest\032\033.milvus.proto.common.Status"
  "\"\000\022u\n\022ListIndexedSegment\022-.milvus.proto."
  "feder.ListIndexedSegmentRequest\032..milvus"
  ".proto.feder.ListIndexedSegmentResponse\""
  "\000\022\207\001\n\030DescribeSegmentIndexData\0223.milvus."
  "proto.feder.DescribeSegmentIndexDataRequ"
  "est\0324.milvus.proto.feder.DescribeSegment"
  "IndexDataResponse\"\000\022V\n\007Connect\022#.milvus."
  "proto.milvus.ConnectRequest\032$.milvus.pro"
  "to.milvus.ConnectResponse\"\000\022k\n\016AllocTime"
  "stamp\022*.milvus.proto.milvus.AllocTimesta"
  "mpRequest\032+.milvus.proto.milvus.AllocTim"
  "estampResponse\"\000\022[\n\016CreateDatabase\022*.mil"
  "vus.proto.milvus.CreateDatabaseRequest\032\033"
  ".milvus.proto.common.Status\"\000\022W\n\014DropDat"
  "abase\022(.milvus.proto.milvus.DropDatabase"
  "Request\032\033.milvus.proto.common.Status\"\000\022h"
  "\n\rListDatabases\022).milvus.proto.milvus.Li"
  "stDatabasesRequest\032*.milvus.proto.milvus"
  ".ListDatabasesResponse\"\000\022q\n\020ReplicateMes"
  "sage\022,.milvus.proto.milvus.ReplicateMess"
  "ageRequest\032-.milvus.proto.milvus.Replica"
  "teMessageResponse\"\0002u\n\014ProxyService\022e\n\014R"
  "egisterLink\022(.milvus.proto.milvus.Regist"
  "erLinkRequest\032).milvus.proto.milvus.Regi"
  "sterLinkResponse\"\000:U\n\016milvus_ext_obj\022\034.g"
  "oogle.protobuf.FileOptions\030\351\007 \001(\0132\036.milv"
  "us.proto.milvus.MilvusExtBm\n\016io.milvus.g"
  "rpcB\013MilvusProtoP\001Z4github.com/milvus-io"
  "/milvus-proto/go-api/v2/milvuspb\240\001\001\252\002\022Mi"
  "lvus.Client.Grpcb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_milvus_2eproto_deps[5] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_feder_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_msg_2eproto,
  &::descriptor_table_schema_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_milvus_2eproto_sccs[164] = {
  &scc_info_AllocTimestampRequest_milvus_2eproto.base,
  &scc_info_AllocTimestampResponse_milvus_2eproto.base,
  &scc_info_AlterAliasRequest_milvus_2eproto.base,
  &scc_info_AlterCollectionRequest_milvus_2eproto.base,
  &scc_info_AlterIndexRequest_milvus_2eproto.base,
  &scc_info_BoolResponse_milvus_2eproto.base,
  &scc_info_CalcDistanceRequest_milvus_2eproto.base,
  &scc_info_CalcDistanceResults_milvus_2eproto.base,
  &scc_info_CheckHealthRequest_milvus_2eproto.base,
  &scc_info_CheckHealthResponse_milvus_2eproto.base,
  &scc_info_CompactionMergeInfo_milvus_2eproto.base,
  &scc_info_ComponentInfo_milvus_2eproto.base,
  &scc_info_ComponentStates_milvus_2eproto.base,
  &scc_info_ConnectRequest_milvus_2eproto.base,
  &scc_info_ConnectResponse_milvus_2eproto.base,
  &scc_info_CreateAliasRequest_milvus_2eproto.base,
  &scc_info_CreateCollectionRequest_milvus_2eproto.base,
  &scc_info_CreateCredentialRequest_milvus_2eproto.base,
  &scc_info_CreateDatabaseRequest_milvus_2eproto.base,
  &scc_info_CreateIndexRequest_milvus_2eproto.base,
  &scc_info_CreatePartitionRequest_milvus_2eproto.base,
  &scc_info_CreateResourceGroupRequest_milvus_2eproto.base,
  &scc_info_CreateRoleRequest_milvus_2eproto.base,
  &scc_info_DeleteCredentialRequest_milvus_2eproto.base,
  &scc_info_DeleteRequest_milvus_2eproto.base,
  &scc_info_DescribeAliasRequest_milvus_2eproto.base,
  &scc_info_DescribeAliasResponse_milvus_2eproto.base,
  &scc_info_DescribeCollectionRequest_milvus_2eproto.base,
  &scc_info_DescribeCollectionResponse_milvus_2eproto.base,
  &scc_info_DescribeIndexRequest_milvus_2eproto.base,
  &scc_info_DescribeIndexResponse_milvus_2eproto.base,
  &scc_info_DescribeResourceGroupRequest_milvus_2eproto.base,
  &scc_info_DescribeResourceGroupResponse_milvus_2eproto.base,
  &scc_info_DescribeSegmentRequest_milvus_2eproto.base,
  &scc_info_DescribeSegmentResponse_milvus_2eproto.base,
  &scc_info_DropAliasRequest_milvus_2eproto.base,
  &scc_info_DropCollectionRequest_milvus_2eproto.base,
  &scc_info_DropDatabaseRequest_milvus_2eproto.base,
  &scc_info_DropIndexRequest_milvus_2eproto.base,
  &scc_info_DropPartitionRequest_milvus_2eproto.base,
  &scc_info_DropResourceGroupRequest_milvus_2eproto.base,
  &scc_info_DropRoleRequest_milvus_2eproto.base,
  &scc_info_DummyRequest_milvus_2eproto.base,
  &scc_info_DummyResponse_milvus_2eproto.base,
  &scc_info_FlushAllRequest_milvus_2eproto.base,
  &scc_info_FlushAllResponse_milvus_2eproto.base,
  &scc_info_FlushRequest_milvus_2eproto.base,
  &scc_info_FlushResponse_milvus_2eproto.base,
  &scc_info_FlushResponse_CollFlushTsEntry_DoNotUse_milvus_2eproto.base,
  &scc_info_FlushResponse_CollSealTimesEntry_DoNotUse_milvus_2eproto.base,
  &scc_info_FlushResponse_CollSegIDsEntry_DoNotUse_milvus_2eproto.base,
  &scc_info_FlushResponse_FlushCollSegIDsEntry_DoNotUse_milvus_2eproto.base,
  &scc_info_GetCollectionStatisticsRequest_milvus_2eproto.base,
  &scc_info_GetCollectionStatisticsResponse_milvus_2eproto.base,
  &scc_info_GetCompactionPlansRequest_milvus_2eproto.base,
  &scc_info_GetCompactionPlansResponse_milvus_2eproto.base,
  &scc_info_GetCompactionStateRequest_milvus_2eproto.base,
  &scc_info_GetCompactionStateResponse_milvus_2eproto.base,
  &scc_info_GetComponentStatesRequest_milvus_2eproto.base,
  &scc_info_GetFlushAllStateRequest_milvus_2eproto.base,
  &scc_info_GetFlushAllStateResponse_milvus_2eproto.base,
  &scc_info_GetFlushStateRequest_milvus_2eproto.base,
  &scc_info_GetFlushStateResponse_milvus_2eproto.base,
  &scc_info_GetImportStateRequest_milvus_2eproto.base,
  &scc_info_GetImportStateResponse_milvus_2eproto.base,
  &scc_info_GetIndexBuildProgressRequest_milvus_2eproto.base,
  &scc_info_GetIndexBuildProgressResponse_milvus_2eproto.base,
  &scc_info_GetIndexStateRequest_milvus_2eproto.base,
  &scc_info_GetIndexStateResponse_milvus_2eproto.base,
  &scc_info_GetIndexStatisticsRequest_milvus_2eproto.base,
  &scc_info_GetIndexStatisticsResponse_milvus_2eproto.base,
  &scc_info_GetLoadStateRequest_milvus_2eproto.base,
  &scc_info_GetLoadStateResponse_milvus_2eproto.base,
  &scc_info_GetLoadingProgressRequest_milvus_2eproto.base,
  &scc_info_GetLoadingProgressResponse_milvus_2eproto.base,
  &scc_info_GetMetricsRequest_milvus_2eproto.base,
  &scc_info_GetMetricsResponse_milvus_2eproto.base,
  &scc_info_GetPartitionStatisticsRequest_milvus_2eproto.base,
  &scc_info_GetPartitionStatisticsResponse_milvus_2eproto.base,
  &scc_info_GetPersistentSegmentInfoRequest_milvus_2eproto.base,
  &scc_info_GetPersistentSegmentInfoResponse_milvus_2eproto.base,
  &scc_info_GetQuerySegmentInfoRequest_milvus_2eproto.base,
  &scc_info_GetQuerySegmentInfoResponse_milvus_2eproto.base,
  &scc_info_GetReplicasRequest_milvus_2eproto.base,
  &scc_info_GetReplicasResponse_milvus_2eproto.base,
  &scc_info_GetStatisticsRequest_milvus_2eproto.base,
  &scc_info_GetStatisticsResponse_milvus_2eproto.base,
  &scc_info_GetVersionRequest_milvus_2eproto.base,
  &scc_info_GetVersionResponse_milvus_2eproto.base,
  &scc_info_GrantEntity_milvus_2eproto.base,
  &scc_info_GrantPrivilegeEntity_milvus_2eproto.base,
  &scc_info_GrantorEntity_milvus_2eproto.base,
  &scc_info_HasCollectionRequest_milvus_2eproto.base,
  &scc_info_HasPartitionRequest_milvus_2eproto.base,
  &scc_info_Hits_milvus_2eproto.base,
  &scc_info_ImportRequest_milvus_2eproto.base,
  &scc_info_ImportResponse_milvus_2eproto.base,
  &scc_info_IndexDescription_milvus_2eproto.base,
  &scc_info_InsertRequest_milvus_2eproto.base,
  &scc_info_ListAliasesRequest_milvus_2eproto.base,
  &scc_info_ListAliasesResponse_milvus_2eproto.base,
  &scc_info_ListCredUsersRequest_milvus_2eproto.base,
  &scc_info_ListCredUsersResponse_milvus_2eproto.base,
  &scc_info_ListDatabasesRequest_milvus_2eproto.base,
  &scc_info_ListDatabasesResponse_milvus_2eproto.base,
  &scc_info_ListImportTasksRequest_milvus_2eproto.base,
  &scc_info_ListImportTasksResponse_milvus_2eproto.base,
  &scc_info_ListResourceGroupsRequest_milvus_2eproto.base,
  &scc_info_ListResourceGroupsResponse_milvus_2eproto.base,
  &scc_info_LoadBalanceRequest_milvus_2eproto.base,
  &scc_info_LoadCollectionRequest_milvus_2eproto.base,
  &scc_info_LoadPartitionsRequest_milvus_2eproto.base,
  &scc_info_ManualCompactionRequest_milvus_2eproto.base,
  &scc_info_ManualCompactionResponse_milvus_2eproto.base,
  &scc_info_MilvusExt_milvus_2eproto.base,
  &scc_info_MutationResult_milvus_2eproto.base,
  &scc_info_ObjectEntity_milvus_2eproto.base,
  &scc_info_OperatePrivilegeRequest_milvus_2eproto.base,
  &scc_info_OperateUserRoleRequest_milvus_2eproto.base,
  &scc_info_PersistentSegmentInfo_milvus_2eproto.base,
  &scc_info_PrivilegeEntity_milvus_2eproto.base,
  &scc_info_QueryRequest_milvus_2eproto.base,
  &scc_info_QueryResults_milvus_2eproto.base,
  &scc_info_QuerySegmentInfo_milvus_2eproto.base,
  &scc_info_RegisterLinkRequest_milvus_2eproto.base,
  &scc_info_RegisterLinkResponse_milvus_2eproto.base,
  &scc_info_ReleaseCollectionRequest_milvus_2eproto.base,
  &scc_info_ReleasePartitionsRequest_milvus_2eproto.base,
  &scc_info_RenameCollectionRequest_milvus_2eproto.base,
  &scc_info_ReplicaInfo_milvus_2eproto.base,
  &scc_info_ReplicaInfo_NumOutboundNodeEntry_DoNotUse_milvus_2eproto.base,
  &scc_info_ReplicateMessageRequest_milvus_2eproto.base,
  &scc_info_ReplicateMessageResponse_milvus_2eproto.base,
  &scc_info_ResourceGroup_milvus_2eproto.base,
  &scc_info_ResourceGroup_NumIncomingNodeEntry_DoNotUse_milvus_2eproto.base,
  &scc_info_ResourceGroup_NumLoadedReplicaEntry_DoNotUse_milvus_2eproto.base,
  &scc_info_ResourceGroup_NumOutgoingNodeEntry_DoNotUse_milvus_2eproto.base,
  &scc_info_RoleEntity_milvus_2eproto.base,
  &scc_info_RoleResult_milvus_2eproto.base,
  &scc_info_SearchRequest_milvus_2eproto.base,
  &scc_info_SearchRequestV2_milvus_2eproto.base,
  &scc_info_SearchResults_milvus_2eproto.base,
  &scc_info_SelectGrantRequest_milvus_2eproto.base,
  &scc_info_SelectGrantResponse_milvus_2eproto.base,
  &scc_info_SelectRoleRequest_milvus_2eproto.base,
  &scc_info_SelectRoleResponse_milvus_2eproto.base,
  &scc_info_SelectUserRequest_milvus_2eproto.base,
  &scc_info_SelectUserResponse_milvus_2eproto.base,
  &scc_info_ShardReplica_milvus_2eproto.base,
  &scc_info_ShowCollectionsRequest_milvus_2eproto.base,
  &scc_info_ShowCollectionsResponse_milvus_2eproto.base,
  &scc_info_ShowPartitionsRequest_milvus_2eproto.base,
  &scc_info_ShowPartitionsResponse_milvus_2eproto.base,
  &scc_info_ShowSegmentsRequest_milvus_2eproto.base,
  &scc_info_ShowSegmentsResponse_milvus_2eproto.base,
  &scc_info_StringResponse_milvus_2eproto.base,
  &scc_info_TransferNodeRequest_milvus_2eproto.base,
  &scc_info_TransferReplicaRequest_milvus_2eproto.base,
  &scc_info_UpdateCredentialRequest_milvus_2eproto.base,
  &scc_info_UpsertRequest_milvus_2eproto.base,
  &scc_info_UserEntity_milvus_2eproto.base,
  &scc_info_UserResult_milvus_2eproto.base,
  &scc_info_VectorIDs_milvus_2eproto.base,
  &scc_info_VectorsArray_milvus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_milvus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_milvus_2eproto = {
  false, false, descriptor_table_protodef_milvus_2eproto, "milvus.proto", 32544,
  &descriptor_table_milvus_2eproto_once, descriptor_table_milvus_2eproto_sccs, descriptor_table_milvus_2eproto_deps, 164, 5,
  schemas, file_default_instances, TableStruct_milvus_2eproto::offsets,
  file_level_metadata_milvus_2eproto, 164, file_level_enum_descriptors_milvus_2eproto, file_level_service_descriptors_milvus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_milvus_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_milvus_2eproto)), true);
namespace milvus {
namespace proto {
namespace milvus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_milvus_2eproto);
  return file_level_enum_descriptors_milvus_2eproto[0];
}
bool ShowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperateUserRoleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_milvus_2eproto);
  return file_level_enum_descriptors_milvus_2eproto[1];
}
bool OperateUserRoleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperatePrivilegeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_milvus_2eproto);
  return file_level_enum_descriptors_milvus_2eproto[2];
}
bool OperatePrivilegeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuotaState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_milvus_2eproto);
  return file_level_enum_descriptors_milvus_2eproto[3];
}
bool QuotaState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CreateAliasRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CreateAliasRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class CreateAliasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateAliasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateAliasRequest::_Internal::base(const CreateAliasRequest* msg) {
  return *msg->base_;
}
void CreateAliasRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
CreateAliasRequest::CreateAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateAliasRequest)
}
CreateAliasRequest::CreateAliasRequest(const CreateAliasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateAliasRequest)
}

void CreateAliasRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAliasRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

CreateAliasRequest::~CreateAliasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateAliasRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateAliasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreateAliasRequest::ArenaDtor(void* object) {
  CreateAliasRequest* _this = reinterpret_cast< CreateAliasRequest* >(object);
  (void)_this;
}
void CreateAliasRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAliasRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAliasRequest& CreateAliasRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAliasRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CreateAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateAliasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAliasRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateAliasRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateAliasRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateAliasRequest.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAliasRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateAliasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateAliasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateAliasRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string alias = 4;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateAliasRequest.alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateAliasRequest)
  return target;
}

size_t CreateAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateAliasRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string alias = 4;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAliasRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CreateAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAliasRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAliasRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CreateAliasRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CreateAliasRequest)
    MergeFrom(*source);
  }
}

void CreateAliasRequest::MergeFrom(const CreateAliasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void CreateAliasRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CreateAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAliasRequest::CopyFrom(const CreateAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAliasRequest::IsInitialized() const {
  return true;
}

void CreateAliasRequest::InternalSwap(CreateAliasRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAliasRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropAliasRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DropAliasRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DropAliasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropAliasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropAliasRequest::_Internal::base(const DropAliasRequest* msg) {
  return *msg->base_;
}
void DropAliasRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DropAliasRequest::DropAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropAliasRequest)
}
DropAliasRequest::DropAliasRequest(const DropAliasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropAliasRequest)
}

void DropAliasRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropAliasRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DropAliasRequest::~DropAliasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropAliasRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropAliasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DropAliasRequest::ArenaDtor(void* object) {
  DropAliasRequest* _this = reinterpret_cast< DropAliasRequest* >(object);
  (void)_this;
}
void DropAliasRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropAliasRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropAliasRequest& DropAliasRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropAliasRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DropAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropAliasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropAliasRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropAliasRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropAliasRequest.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropAliasRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropAliasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropAliasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string alias = 3;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropAliasRequest.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropAliasRequest)
  return target;
}

size_t DropAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropAliasRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string alias = 3;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropAliasRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DropAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropAliasRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropAliasRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DropAliasRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DropAliasRequest)
    MergeFrom(*source);
  }
}

void DropAliasRequest::MergeFrom(const DropAliasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DropAliasRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DropAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropAliasRequest::CopyFrom(const DropAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropAliasRequest::IsInitialized() const {
  return true;
}

void DropAliasRequest::InternalSwap(DropAliasRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropAliasRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlterAliasRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_AlterAliasRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class AlterAliasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const AlterAliasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
AlterAliasRequest::_Internal::base(const AlterAliasRequest* msg) {
  return *msg->base_;
}
void AlterAliasRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
AlterAliasRequest::AlterAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.AlterAliasRequest)
}
AlterAliasRequest::AlterAliasRequest(const AlterAliasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.AlterAliasRequest)
}

void AlterAliasRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlterAliasRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

AlterAliasRequest::~AlterAliasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.AlterAliasRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlterAliasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void AlterAliasRequest::ArenaDtor(void* object) {
  AlterAliasRequest* _this = reinterpret_cast< AlterAliasRequest* >(object);
  (void)_this;
}
void AlterAliasRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlterAliasRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlterAliasRequest& AlterAliasRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlterAliasRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void AlterAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.AlterAliasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterAliasRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.AlterAliasRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.AlterAliasRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.AlterAliasRequest.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlterAliasRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.AlterAliasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterAliasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterAliasRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string alias = 4;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterAliasRequest.alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.AlterAliasRequest)
  return target;
}

size_t AlterAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.AlterAliasRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string alias = 4;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlterAliasRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.AlterAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AlterAliasRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlterAliasRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.AlterAliasRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.AlterAliasRequest)
    MergeFrom(*source);
  }
}

void AlterAliasRequest::MergeFrom(const AlterAliasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.AlterAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void AlterAliasRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.AlterAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlterAliasRequest::CopyFrom(const AlterAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.AlterAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterAliasRequest::IsInitialized() const {
  return true;
}

void AlterAliasRequest::InternalSwap(AlterAliasRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterAliasRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeAliasRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeAliasRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DescribeAliasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeAliasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeAliasRequest::_Internal::base(const DescribeAliasRequest* msg) {
  return *msg->base_;
}
void DescribeAliasRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DescribeAliasRequest::DescribeAliasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeAliasRequest)
}
DescribeAliasRequest::DescribeAliasRequest(const DescribeAliasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeAliasRequest)
}

void DescribeAliasRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeAliasRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DescribeAliasRequest::~DescribeAliasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeAliasRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeAliasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DescribeAliasRequest::ArenaDtor(void* object) {
  DescribeAliasRequest* _this = reinterpret_cast< DescribeAliasRequest* >(object);
  (void)_this;
}
void DescribeAliasRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeAliasRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeAliasRequest& DescribeAliasRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeAliasRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeAliasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeAliasRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeAliasRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeAliasRequest.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeAliasRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeAliasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeAliasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string alias = 3;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeAliasRequest.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeAliasRequest)
  return target;
}

size_t DescribeAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeAliasRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string alias = 3;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeAliasRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeAliasRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeAliasRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeAliasRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeAliasRequest)
    MergeFrom(*source);
  }
}

void DescribeAliasRequest::MergeFrom(const DescribeAliasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DescribeAliasRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeAliasRequest::CopyFrom(const DescribeAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeAliasRequest::IsInitialized() const {
  return true;
}

void DescribeAliasRequest::InternalSwap(DescribeAliasRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeAliasRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeAliasResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeAliasResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class DescribeAliasResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeAliasResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeAliasResponse::_Internal::status(const DescribeAliasResponse* msg) {
  return *msg->status_;
}
void DescribeAliasResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DescribeAliasResponse::DescribeAliasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeAliasResponse)
}
DescribeAliasResponse::DescribeAliasResponse(const DescribeAliasResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection().empty()) {
    collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeAliasResponse)
}

void DescribeAliasResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeAliasResponse_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

DescribeAliasResponse::~DescribeAliasResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeAliasResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeAliasResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void DescribeAliasResponse::ArenaDtor(void* object) {
  DescribeAliasResponse* _this = reinterpret_cast< DescribeAliasResponse* >(object);
  (void)_this;
}
void DescribeAliasResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeAliasResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeAliasResponse& DescribeAliasResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeAliasResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeAliasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeAliasResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeAliasResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeAliasResponse.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeAliasResponse.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeAliasResponse.collection"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeAliasResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeAliasResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeAliasResponse.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string alias = 3;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeAliasResponse.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  // string collection = 4;
  if (this->collection().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeAliasResponse.collection");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeAliasResponse)
  return target;
}

size_t DescribeAliasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeAliasResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string alias = 3;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // string collection = 4;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeAliasResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeAliasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeAliasResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeAliasResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeAliasResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeAliasResponse)
    MergeFrom(*source);
  }
}

void DescribeAliasResponse::MergeFrom(const DescribeAliasResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeAliasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.collection().size() > 0) {
    _internal_set_collection(from._internal_collection());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void DescribeAliasResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeAliasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeAliasResponse::CopyFrom(const DescribeAliasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeAliasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeAliasResponse::IsInitialized() const {
  return true;
}

void DescribeAliasResponse::InternalSwap(DescribeAliasResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeAliasResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAliasesRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ListAliasesRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ListAliasesRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ListAliasesRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ListAliasesRequest::_Internal::base(const ListAliasesRequest* msg) {
  return *msg->base_;
}
void ListAliasesRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ListAliasesRequest::ListAliasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListAliasesRequest)
}
ListAliasesRequest::ListAliasesRequest(const ListAliasesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListAliasesRequest)
}

void ListAliasesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAliasesRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

ListAliasesRequest::~ListAliasesRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListAliasesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAliasesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ListAliasesRequest::ArenaDtor(void* object) {
  ListAliasesRequest* _this = reinterpret_cast< ListAliasesRequest* >(object);
  (void)_this;
}
void ListAliasesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAliasesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAliasesRequest& ListAliasesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAliasesRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ListAliasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListAliasesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAliasesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ListAliasesRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ListAliasesRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAliasesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListAliasesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListAliasesRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListAliasesRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListAliasesRequest)
  return target;
}

size_t ListAliasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListAliasesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAliasesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ListAliasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAliasesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAliasesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ListAliasesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ListAliasesRequest)
    MergeFrom(*source);
  }
}

void ListAliasesRequest::MergeFrom(const ListAliasesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListAliasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void ListAliasesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ListAliasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAliasesRequest::CopyFrom(const ListAliasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListAliasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAliasesRequest::IsInitialized() const {
  return true;
}

void ListAliasesRequest::InternalSwap(ListAliasesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAliasesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAliasesResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ListAliasesResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ListAliasesResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListAliasesResponse* msg);
};

const ::milvus::proto::common::Status&
ListAliasesResponse::_Internal::status(const ListAliasesResponse* msg) {
  return *msg->status_;
}
void ListAliasesResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ListAliasesResponse::ListAliasesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  aliases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListAliasesResponse)
}
ListAliasesResponse::ListAliasesResponse(const ListAliasesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aliases_(from.aliases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListAliasesResponse)
}

void ListAliasesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAliasesResponse_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

ListAliasesResponse::~ListAliasesResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListAliasesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAliasesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void ListAliasesResponse::ArenaDtor(void* object) {
  ListAliasesResponse* _this = reinterpret_cast< ListAliasesResponse* >(object);
  (void)_this;
}
void ListAliasesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAliasesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAliasesResponse& ListAliasesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAliasesResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ListAliasesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListAliasesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aliases_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAliasesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ListAliasesResponse.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ListAliasesResponse.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aliases = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aliases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ListAliasesResponse.aliases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAliasesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListAliasesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListAliasesResponse.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListAliasesResponse.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string aliases = 4;
  for (int i = 0, n = this->_internal_aliases_size(); i < n; i++) {
    const auto& s = this->_internal_aliases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListAliasesResponse.aliases");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListAliasesResponse)
  return target;
}

size_t ListAliasesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListAliasesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aliases = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(aliases_.size());
  for (int i = 0, n = aliases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      aliases_.Get(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAliasesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ListAliasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAliasesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAliasesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ListAliasesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ListAliasesResponse)
    MergeFrom(*source);
  }
}

void ListAliasesResponse::MergeFrom(const ListAliasesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListAliasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aliases_.MergeFrom(from.aliases_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ListAliasesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ListAliasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAliasesResponse::CopyFrom(const ListAliasesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListAliasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAliasesResponse::IsInitialized() const {
  return true;
}

void ListAliasesResponse::InternalSwap(ListAliasesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  aliases_.InternalSwap(&other->aliases_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAliasesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CreateCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class CreateCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateCollectionRequest::_Internal::base(const CreateCollectionRequest* msg) {
  return *msg->base_;
}
void CreateCollectionRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void CreateCollectionRequest::clear_properties() {
  properties_.Clear();
}
CreateCollectionRequest::CreateCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateCollectionRequest)
}
CreateCollectionRequest::CreateCollectionRequest(const CreateCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_schema().empty()) {
    schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_schema(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&shards_num_, &from.shards_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_partitions_) -
    reinterpret_cast<char*>(&shards_num_)) + sizeof(num_partitions_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateCollectionRequest)
}

void CreateCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_partitions_) -
      reinterpret_cast<char*>(&base_)) + sizeof(num_partitions_));
}

CreateCollectionRequest::~CreateCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateCollectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreateCollectionRequest::ArenaDtor(void* object) {
  CreateCollectionRequest* _this = reinterpret_cast< CreateCollectionRequest* >(object);
  (void)_this;
}
void CreateCollectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateCollectionRequest& CreateCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CreateCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  schema_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&shards_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_partitions_) -
      reinterpret_cast<char*>(&shards_num_)) + sizeof(num_partitions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateCollectionRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateCollectionRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes schema = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_schema();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shards_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          shards_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.ConsistencyLevel consistency_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consistency_level(static_cast<::milvus::proto::common::ConsistencyLevel>(val));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair properties = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 num_partitions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_partitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCollectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // bytes schema = 4;
  if (this->schema().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_schema(), target);
  }

  // int32 shards_num = 5;
  if (this->shards_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_shards_num(), target);
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 6;
  if (this->consistency_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_consistency_level(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair properties = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_properties(i), target, stream);
  }

  // int64 num_partitions = 8;
  if (this->num_partitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_num_partitions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateCollectionRequest)
  return target;
}

size_t CreateCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateCollectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair properties = 7;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // bytes schema = 4;
  if (this->schema().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_schema());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int32 shards_num = 5;
  if (this->shards_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shards_num());
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 6;
  if (this->consistency_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_consistency_level());
  }

  // int64 num_partitions = 8;
  if (this->num_partitions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_partitions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CreateCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CreateCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CreateCollectionRequest)
    MergeFrom(*source);
  }
}

void CreateCollectionRequest::MergeFrom(const CreateCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.schema().size() > 0) {
    _internal_set_schema(from._internal_schema());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.shards_num() != 0) {
    _internal_set_shards_num(from._internal_shards_num());
  }
  if (from.consistency_level() != 0) {
    _internal_set_consistency_level(from._internal_consistency_level());
  }
  if (from.num_partitions() != 0) {
    _internal_set_num_partitions(from._internal_num_partitions());
  }
}

void CreateCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CreateCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCollectionRequest::CopyFrom(const CreateCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCollectionRequest::IsInitialized() const {
  return true;
}

void CreateCollectionRequest::InternalSwap(CreateCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  schema_.Swap(&other->schema_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateCollectionRequest, num_partitions_)
      + sizeof(CreateCollectionRequest::num_partitions_)
      - PROTOBUF_FIELD_OFFSET(CreateCollectionRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DropCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DropCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropCollectionRequest::_Internal::base(const DropCollectionRequest* msg) {
  return *msg->base_;
}
void DropCollectionRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DropCollectionRequest::DropCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropCollectionRequest)
}
DropCollectionRequest::DropCollectionRequest(const DropCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropCollectionRequest)
}

void DropCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DropCollectionRequest::~DropCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropCollectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DropCollectionRequest::ArenaDtor(void* object) {
  DropCollectionRequest* _this = reinterpret_cast< DropCollectionRequest* >(object);
  (void)_this;
}
void DropCollectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropCollectionRequest& DropCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DropCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropCollectionRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropCollectionRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropCollectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropCollectionRequest)
  return target;
}

size_t DropCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropCollectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DropCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DropCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DropCollectionRequest)
    MergeFrom(*source);
  }
}

void DropCollectionRequest::MergeFrom(const DropCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DropCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DropCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropCollectionRequest::CopyFrom(const DropCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropCollectionRequest::IsInitialized() const {
  return true;
}

void DropCollectionRequest::InternalSwap(DropCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlterCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_AlterCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class AlterCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const AlterCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
AlterCollectionRequest::_Internal::base(const AlterCollectionRequest* msg) {
  return *msg->base_;
}
void AlterCollectionRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void AlterCollectionRequest::clear_properties() {
  properties_.Clear();
}
AlterCollectionRequest::AlterCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.AlterCollectionRequest)
}
AlterCollectionRequest::AlterCollectionRequest(const AlterCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  collectionid_ = from.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.AlterCollectionRequest)
}

void AlterCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlterCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collectionid_) -
      reinterpret_cast<char*>(&base_)) + sizeof(collectionid_));
}

AlterCollectionRequest::~AlterCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.AlterCollectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlterCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void AlterCollectionRequest::ArenaDtor(void* object) {
  AlterCollectionRequest* _this = reinterpret_cast< AlterCollectionRequest* >(object);
  (void)_this;
}
void AlterCollectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlterCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlterCollectionRequest& AlterCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlterCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void AlterCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.AlterCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  collectionid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.AlterCollectionRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.AlterCollectionRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlterCollectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.AlterCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_collectionid(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair properties = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.AlterCollectionRequest)
  return target;
}

size_t AlterCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.AlterCollectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair properties = 5;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collectionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlterCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.AlterCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AlterCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlterCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.AlterCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.AlterCollectionRequest)
    MergeFrom(*source);
  }
}

void AlterCollectionRequest::MergeFrom(const AlterCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.AlterCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.collectionid() != 0) {
    _internal_set_collectionid(from._internal_collectionid());
  }
}

void AlterCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.AlterCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlterCollectionRequest::CopyFrom(const AlterCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.AlterCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterCollectionRequest::IsInitialized() const {
  return true;
}

void AlterCollectionRequest::InternalSwap(AlterCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlterCollectionRequest, collectionid_)
      + sizeof(AlterCollectionRequest::collectionid_)
      - PROTOBUF_FIELD_OFFSET(AlterCollectionRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HasCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_HasCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class HasCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const HasCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
HasCollectionRequest::_Internal::base(const HasCollectionRequest* msg) {
  return *msg->base_;
}
void HasCollectionRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
HasCollectionRequest::HasCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.HasCollectionRequest)
}
HasCollectionRequest::HasCollectionRequest(const HasCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  time_stamp_ = from.time_stamp_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.HasCollectionRequest)
}

void HasCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HasCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_stamp_) -
      reinterpret_cast<char*>(&base_)) + sizeof(time_stamp_));
}

HasCollectionRequest::~HasCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.HasCollectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HasCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void HasCollectionRequest::ArenaDtor(void* object) {
  HasCollectionRequest* _this = reinterpret_cast< HasCollectionRequest* >(object);
  (void)_this;
}
void HasCollectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HasCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HasCollectionRequest& HasCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HasCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void HasCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.HasCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  time_stamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HasCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.HasCollectionRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.HasCollectionRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 time_stamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HasCollectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.HasCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // uint64 time_stamp = 4;
  if (this->time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_time_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.HasCollectionRequest)
  return target;
}

size_t HasCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.HasCollectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 time_stamp = 4;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_stamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HasCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.HasCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HasCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HasCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.HasCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.HasCollectionRequest)
    MergeFrom(*source);
  }
}

void HasCollectionRequest::MergeFrom(const HasCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.HasCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.time_stamp() != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
}

void HasCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.HasCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HasCollectionRequest::CopyFrom(const HasCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.HasCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasCollectionRequest::IsInitialized() const {
  return true;
}

void HasCollectionRequest::InternalSwap(HasCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HasCollectionRequest, time_stamp_)
      + sizeof(HasCollectionRequest::time_stamp_)
      - PROTOBUF_FIELD_OFFSET(HasCollectionRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HasCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoolResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_BoolResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class BoolResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const BoolResponse* msg);
};

const ::milvus::proto::common::Status&
BoolResponse::_Internal::status(const BoolResponse* msg) {
  return *msg->status_;
}
void BoolResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BoolResponse::BoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.BoolResponse)
}
BoolResponse::BoolResponse(const BoolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.BoolResponse)
}

void BoolResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoolResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&status_)) + sizeof(value_));
}

BoolResponse::~BoolResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.BoolResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoolResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BoolResponse::ArenaDtor(void* object) {
  BoolResponse* _this = reinterpret_cast< BoolResponse* >(object);
  (void)_this;
}
void BoolResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoolResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolResponse& BoolResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoolResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void BoolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.BoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.BoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // bool value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.BoolResponse)
  return target;
}

size_t BoolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.BoolResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool value = 2;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.BoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoolResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.BoolResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.BoolResponse)
    MergeFrom(*source);
  }
}

void BoolResponse::MergeFrom(const BoolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.BoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void BoolResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.BoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolResponse::CopyFrom(const BoolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.BoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolResponse::IsInitialized() const {
  return true;
}

void BoolResponse::InternalSwap(BoolResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoolResponse, value_)
      + sizeof(BoolResponse::value_)
      - PROTOBUF_FIELD_OFFSET(BoolResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StringResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_StringResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class StringResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const StringResponse* msg);
};

const ::milvus::proto::common::Status&
StringResponse::_Internal::status(const StringResponse* msg) {
  return *msg->status_;
}
void StringResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
StringResponse::StringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.StringResponse)
}
StringResponse::StringResponse(const StringResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.StringResponse)
}

void StringResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringResponse_milvus_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

StringResponse::~StringResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.StringResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void StringResponse::ArenaDtor(void* object) {
  StringResponse* _this = reinterpret_cast< StringResponse* >(object);
  (void)_this;
}
void StringResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringResponse& StringResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void StringResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.StringResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.StringResponse.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.StringResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.StringResponse.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.StringResponse)
  return target;
}

size_t StringResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.StringResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.StringResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StringResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.StringResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.StringResponse)
    MergeFrom(*source);
  }
}

void StringResponse::MergeFrom(const StringResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.StringResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void StringResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.StringResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringResponse::CopyFrom(const StringResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.StringResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringResponse::IsInitialized() const {
  return true;
}

void StringResponse::InternalSwap(StringResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DescribeCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeCollectionRequest::_Internal::base(const DescribeCollectionRequest* msg) {
  return *msg->base_;
}
void DescribeCollectionRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DescribeCollectionRequest::DescribeCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeCollectionRequest)
}
DescribeCollectionRequest::DescribeCollectionRequest(const DescribeCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&collectionid_, &from.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_stamp_) -
    reinterpret_cast<char*>(&collectionid_)) + sizeof(time_stamp_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeCollectionRequest)
}

void DescribeCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_stamp_) -
      reinterpret_cast<char*>(&base_)) + sizeof(time_stamp_));
}

DescribeCollectionRequest::~DescribeCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeCollectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DescribeCollectionRequest::ArenaDtor(void* object) {
  DescribeCollectionRequest* _this = reinterpret_cast< DescribeCollectionRequest* >(object);
  (void)_this;
}
void DescribeCollectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeCollectionRequest& DescribeCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_stamp_) -
      reinterpret_cast<char*>(&collectionid_)) + sizeof(time_stamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 time_stamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeCollectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_collectionid(), target);
  }

  // uint64 time_stamp = 5;
  if (this->time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_time_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeCollectionRequest)
  return target;
}

size_t DescribeCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeCollectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collectionid());
  }

  // uint64 time_stamp = 5;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_stamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeCollectionRequest)
    MergeFrom(*source);
  }
}

void DescribeCollectionRequest::MergeFrom(const DescribeCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.collectionid() != 0) {
    _internal_set_collectionid(from._internal_collectionid());
  }
  if (from.time_stamp() != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
}

void DescribeCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeCollectionRequest::CopyFrom(const DescribeCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeCollectionRequest::IsInitialized() const {
  return true;
}

void DescribeCollectionRequest::InternalSwap(DescribeCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeCollectionRequest, time_stamp_)
      + sizeof(DescribeCollectionRequest::time_stamp_)
      - PROTOBUF_FIELD_OFFSET(DescribeCollectionRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeCollectionResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeCollectionResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
  ::milvus::proto::milvus::_DescribeCollectionResponse_default_instance_._instance.get_mutable()->schema_ = const_cast< ::milvus::proto::schema::CollectionSchema*>(
      ::milvus::proto::schema::CollectionSchema::internal_default_instance());
}
class DescribeCollectionResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeCollectionResponse* msg);
  static const ::milvus::proto::schema::CollectionSchema& schema(const DescribeCollectionResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeCollectionResponse::_Internal::status(const DescribeCollectionResponse* msg) {
  return *msg->status_;
}
const ::milvus::proto::schema::CollectionSchema&
DescribeCollectionResponse::_Internal::schema(const DescribeCollectionResponse* msg) {
  return *msg->schema_;
}
void DescribeCollectionResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void DescribeCollectionResponse::clear_schema() {
  if (GetArena() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
}
void DescribeCollectionResponse::clear_start_positions() {
  start_positions_.Clear();
}
void DescribeCollectionResponse::clear_properties() {
  properties_.Clear();
}
DescribeCollectionResponse::DescribeCollectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  virtual_channel_names_(arena),
  physical_channel_names_(arena),
  aliases_(arena),
  start_positions_(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeCollectionResponse)
}
DescribeCollectionResponse::DescribeCollectionResponse(const DescribeCollectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      virtual_channel_names_(from.virtual_channel_names_),
      physical_channel_names_(from.physical_channel_names_),
      aliases_(from.aliases_),
      start_positions_(from.start_positions_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_schema()) {
    schema_ = new ::milvus::proto::schema::CollectionSchema(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  ::memcpy(&collectionid_, &from.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_partitions_) -
    reinterpret_cast<char*>(&collectionid_)) + sizeof(num_partitions_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeCollectionResponse)
}

void DescribeCollectionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeCollectionResponse_milvus_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_partitions_) -
      reinterpret_cast<char*>(&status_)) + sizeof(num_partitions_));
}

DescribeCollectionResponse::~DescribeCollectionResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeCollectionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeCollectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete schema_;
}

void DescribeCollectionResponse::ArenaDtor(void* object) {
  DescribeCollectionResponse* _this = reinterpret_cast< DescribeCollectionResponse* >(object);
  (void)_this;
}
void DescribeCollectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeCollectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeCollectionResponse& DescribeCollectionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeCollectionResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeCollectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeCollectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_channel_names_.Clear();
  physical_channel_names_.Clear();
  aliases_.Clear();
  start_positions_.Clear();
  properties_.Clear();
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
  ::memset(&collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_partitions_) -
      reinterpret_cast<char*>(&collectionid_)) + sizeof(num_partitions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeCollectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.schema.CollectionSchema schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string virtual_channel_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_virtual_channel_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string physical_channel_names = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_physical_channel_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 created_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          created_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 created_utc_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_utc_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shards_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          shards_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aliases = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aliases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionResponse.aliases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyDataPair start_positions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_start_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consistency_level(static_cast<::milvus::proto::common::ConsistencyLevel>(val));
        } else goto handle_unusual;
        continue;
      // string collection_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionResponse.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair properties = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // string db_name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeCollectionResponse.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_partitions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          num_partitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeCollectionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeCollectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .milvus.proto.schema.CollectionSchema schema = 2;
  if (this->has_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::schema(this), target, stream);
  }

  // int64 collectionID = 3;
  if (this->collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_collectionid(), target);
  }

  // repeated string virtual_channel_names = 4;
  for (int i = 0, n = this->_internal_virtual_channel_names_size(); i < n; i++) {
    const auto& s = this->_internal_virtual_channel_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionResponse.virtual_channel_names");
    target = stream->WriteString(4, s, target);
  }

  // repeated string physical_channel_names = 5;
  for (int i = 0, n = this->_internal_physical_channel_names_size(); i < n; i++) {
    const auto& s = this->_internal_physical_channel_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionResponse.physical_channel_names");
    target = stream->WriteString(5, s, target);
  }

  // uint64 created_timestamp = 6;
  if (this->created_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_created_timestamp(), target);
  }

  // uint64 created_utc_timestamp = 7;
  if (this->created_utc_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_created_utc_timestamp(), target);
  }

  // int32 shards_num = 8;
  if (this->shards_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_shards_num(), target);
  }

  // repeated string aliases = 9;
  for (int i = 0, n = this->_internal_aliases_size(); i < n; i++) {
    const auto& s = this->_internal_aliases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionResponse.aliases");
    target = stream->WriteString(9, s, target);
  }

  // repeated .milvus.proto.common.KeyDataPair start_positions = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_start_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_start_positions(i), target, stream);
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  if (this->consistency_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_consistency_level(), target);
  }

  // string collection_name = 12;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionResponse.collection_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_collection_name(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair properties = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_properties(i), target, stream);
  }

  // string db_name = 14;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionResponse.db_name");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_db_name(), target);
  }

  // int64 num_partitions = 15;
  if (this->num_partitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_num_partitions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeCollectionResponse)
  return target;
}

size_t DescribeCollectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeCollectionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string virtual_channel_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(virtual_channel_names_.size());
  for (int i = 0, n = virtual_channel_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      virtual_channel_names_.Get(i));
  }

  // repeated string physical_channel_names = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(physical_channel_names_.size());
  for (int i = 0, n = physical_channel_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      physical_channel_names_.Get(i));
  }

  // repeated string aliases = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(aliases_.size());
  for (int i = 0, n = aliases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      aliases_.Get(i));
  }

  // repeated .milvus.proto.common.KeyDataPair start_positions = 10;
  total_size += 1UL * this->_internal_start_positions_size();
  for (const auto& msg : this->start_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.common.KeyValuePair properties = 13;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string collection_name = 12;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 14;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .milvus.proto.schema.CollectionSchema schema = 2;
  if (this->has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  // int64 collectionID = 3;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collectionid());
  }

  // uint64 created_timestamp = 6;
  if (this->created_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_created_timestamp());
  }

  // uint64 created_utc_timestamp = 7;
  if (this->created_utc_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_created_utc_timestamp());
  }

  // int32 shards_num = 8;
  if (this->shards_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shards_num());
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  if (this->consistency_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_consistency_level());
  }

  // int64 num_partitions = 15;
  if (this->num_partitions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_partitions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeCollectionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeCollectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeCollectionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeCollectionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeCollectionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeCollectionResponse)
    MergeFrom(*source);
  }
}

void DescribeCollectionResponse::MergeFrom(const DescribeCollectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeCollectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtual_channel_names_.MergeFrom(from.virtual_channel_names_);
  physical_channel_names_.MergeFrom(from.physical_channel_names_);
  aliases_.MergeFrom(from.aliases_);
  start_positions_.MergeFrom(from.start_positions_);
  properties_.MergeFrom(from.properties_);
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.has_schema()) {
    _internal_mutable_schema()->::milvus::proto::schema::CollectionSchema::MergeFrom(from._internal_schema());
  }
  if (from.collectionid() != 0) {
    _internal_set_collectionid(from._internal_collectionid());
  }
  if (from.created_timestamp() != 0) {
    _internal_set_created_timestamp(from._internal_created_timestamp());
  }
  if (from.created_utc_timestamp() != 0) {
    _internal_set_created_utc_timestamp(from._internal_created_utc_timestamp());
  }
  if (from.shards_num() != 0) {
    _internal_set_shards_num(from._internal_shards_num());
  }
  if (from.consistency_level() != 0) {
    _internal_set_consistency_level(from._internal_consistency_level());
  }
  if (from.num_partitions() != 0) {
    _internal_set_num_partitions(from._internal_num_partitions());
  }
}

void DescribeCollectionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeCollectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeCollectionResponse::CopyFrom(const DescribeCollectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeCollectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeCollectionResponse::IsInitialized() const {
  return true;
}

void DescribeCollectionResponse::InternalSwap(DescribeCollectionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  virtual_channel_names_.InternalSwap(&other->virtual_channel_names_);
  physical_channel_names_.InternalSwap(&other->physical_channel_names_);
  aliases_.InternalSwap(&other->aliases_);
  start_positions_.InternalSwap(&other->start_positions_);
  properties_.InternalSwap(&other->properties_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeCollectionResponse, num_partitions_)
      + sizeof(DescribeCollectionResponse::num_partitions_)
      - PROTOBUF_FIELD_OFFSET(DescribeCollectionResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeCollectionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_LoadCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class LoadCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const LoadCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
LoadCollectionRequest::_Internal::base(const LoadCollectionRequest* msg) {
  return *msg->base_;
}
void LoadCollectionRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
LoadCollectionRequest::LoadCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resource_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.LoadCollectionRequest)
}
LoadCollectionRequest::LoadCollectionRequest(const LoadCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_groups_(from.resource_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&replica_number_, &from.replica_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_) -
    reinterpret_cast<char*>(&replica_number_)) + sizeof(refresh_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.LoadCollectionRequest)
}

void LoadCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_) -
      reinterpret_cast<char*>(&base_)) + sizeof(refresh_));
}

LoadCollectionRequest::~LoadCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.LoadCollectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void LoadCollectionRequest::ArenaDtor(void* object) {
  LoadCollectionRequest* _this = reinterpret_cast< LoadCollectionRequest* >(object);
  (void)_this;
}
void LoadCollectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadCollectionRequest& LoadCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void LoadCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.LoadCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_groups_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&replica_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_) -
      reinterpret_cast<char*>(&replica_number_)) + sizeof(refresh_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.LoadCollectionRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.LoadCollectionRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 replica_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          replica_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string resource_groups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resource_groups();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.LoadCollectionRequest.resource_groups"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool refresh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadCollectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.LoadCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // int32 replica_number = 4;
  if (this->replica_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_replica_number(), target);
  }

  // repeated string resource_groups = 5;
  for (int i = 0, n = this->_internal_resource_groups_size(); i < n; i++) {
    const auto& s = this->_internal_resource_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadCollectionRequest.resource_groups");
    target = stream->WriteString(5, s, target);
  }

  // bool refresh = 6;
  if (this->refresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_refresh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.LoadCollectionRequest)
  return target;
}

size_t LoadCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.LoadCollectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string resource_groups = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(resource_groups_.size());
  for (int i = 0, n = resource_groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      resource_groups_.Get(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int32 replica_number = 4;
  if (this->replica_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_replica_number());
  }

  // bool refresh = 6;
  if (this->refresh() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.LoadCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.LoadCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.LoadCollectionRequest)
    MergeFrom(*source);
  }
}

void LoadCollectionRequest::MergeFrom(const LoadCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.LoadCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_groups_.MergeFrom(from.resource_groups_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.replica_number() != 0) {
    _internal_set_replica_number(from._internal_replica_number());
  }
  if (from.refresh() != 0) {
    _internal_set_refresh(from._internal_refresh());
  }
}

void LoadCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.LoadCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadCollectionRequest::CopyFrom(const LoadCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.LoadCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadCollectionRequest::IsInitialized() const {
  return true;
}

void LoadCollectionRequest::InternalSwap(LoadCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_groups_.InternalSwap(&other->resource_groups_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadCollectionRequest, refresh_)
      + sizeof(LoadCollectionRequest::refresh_)
      - PROTOBUF_FIELD_OFFSET(LoadCollectionRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ReleaseCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ReleaseCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ReleaseCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ReleaseCollectionRequest::_Internal::base(const ReleaseCollectionRequest* msg) {
  return *msg->base_;
}
void ReleaseCollectionRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ReleaseCollectionRequest::ReleaseCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ReleaseCollectionRequest)
}
ReleaseCollectionRequest::ReleaseCollectionRequest(const ReleaseCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ReleaseCollectionRequest)
}

void ReleaseCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

ReleaseCollectionRequest::~ReleaseCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ReleaseCollectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ReleaseCollectionRequest::ArenaDtor(void* object) {
  ReleaseCollectionRequest* _this = reinterpret_cast< ReleaseCollectionRequest* >(object);
  (void)_this;
}
void ReleaseCollectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseCollectionRequest& ReleaseCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ReleaseCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ReleaseCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ReleaseCollectionRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ReleaseCollectionRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseCollectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ReleaseCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleaseCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleaseCollectionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ReleaseCollectionRequest)
  return target;
}

size_t ReleaseCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ReleaseCollectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ReleaseCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ReleaseCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ReleaseCollectionRequest)
    MergeFrom(*source);
  }
}

void ReleaseCollectionRequest::MergeFrom(const ReleaseCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ReleaseCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void ReleaseCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ReleaseCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseCollectionRequest::CopyFrom(const ReleaseCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ReleaseCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseCollectionRequest::IsInitialized() const {
  return true;
}

void ReleaseCollectionRequest::InternalSwap(ReleaseCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStatisticsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetStatisticsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetStatisticsRequest::_Internal::base(const GetStatisticsRequest* msg) {
  return *msg->base_;
}
void GetStatisticsRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetStatisticsRequest::GetStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetStatisticsRequest)
}
GetStatisticsRequest::GetStatisticsRequest(const GetStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_names_(from.partition_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  guarantee_timestamp_ = from.guarantee_timestamp_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetStatisticsRequest)
}

void GetStatisticsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStatisticsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guarantee_timestamp_) -
      reinterpret_cast<char*>(&base_)) + sizeof(guarantee_timestamp_));
}

GetStatisticsRequest::~GetStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetStatisticsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetStatisticsRequest::ArenaDtor(void* object) {
  GetStatisticsRequest* _this = reinterpret_cast< GetStatisticsRequest* >(object);
  (void)_this;
}
void GetStatisticsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatisticsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatisticsRequest& GetStatisticsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatisticsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  guarantee_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatisticsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetStatisticsRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetStatisticsRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetStatisticsRequest.partition_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 guarantee_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          guarantee_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatisticsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetStatisticsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetStatisticsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetStatisticsRequest.partition_names");
    target = stream->WriteString(4, s, target);
  }

  // uint64 guarantee_timestamp = 5;
  if (this->guarantee_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_guarantee_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetStatisticsRequest)
  return target;
}

size_t GetStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetStatisticsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(partition_names_.size());
  for (int i = 0, n = partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      partition_names_.Get(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 guarantee_timestamp = 5;
  if (this->guarantee_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guarantee_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatisticsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatisticsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatisticsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetStatisticsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetStatisticsRequest)
    MergeFrom(*source);
  }
}

void GetStatisticsRequest::MergeFrom(const GetStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.guarantee_timestamp() != 0) {
    _internal_set_guarantee_timestamp(from._internal_guarantee_timestamp());
  }
}

void GetStatisticsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatisticsRequest::CopyFrom(const GetStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatisticsRequest::IsInitialized() const {
  return true;
}

void GetStatisticsRequest::InternalSwap(GetStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_names_.InternalSwap(&other->partition_names_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStatisticsRequest, guarantee_timestamp_)
      + sizeof(GetStatisticsRequest::guarantee_timestamp_)
      - PROTOBUF_FIELD_OFFSET(GetStatisticsRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatisticsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStatisticsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetStatisticsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetStatisticsResponse::_Internal::status(const GetStatisticsResponse* msg) {
  return *msg->status_;
}
void GetStatisticsResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetStatisticsResponse::clear_stats() {
  stats_.Clear();
}
GetStatisticsResponse::GetStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetStatisticsResponse)
}
GetStatisticsResponse::GetStatisticsResponse(const GetStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetStatisticsResponse)
}

void GetStatisticsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStatisticsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

GetStatisticsResponse::~GetStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetStatisticsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetStatisticsResponse::ArenaDtor(void* object) {
  GetStatisticsResponse* _this = reinterpret_cast< GetStatisticsResponse* >(object);
  (void)_this;
}
void GetStatisticsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatisticsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatisticsResponse& GetStatisticsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatisticsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatisticsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatisticsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetStatisticsResponse)
  return target;
}

size_t GetStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetStatisticsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatisticsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatisticsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatisticsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetStatisticsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetStatisticsResponse)
    MergeFrom(*source);
  }
}

void GetStatisticsResponse::MergeFrom(const GetStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void GetStatisticsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatisticsResponse::CopyFrom(const GetStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatisticsResponse::IsInitialized() const {
  return true;
}

void GetStatisticsResponse::InternalSwap(GetStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stats_.InternalSwap(&other->stats_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatisticsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollectionStatisticsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetCollectionStatisticsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetCollectionStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetCollectionStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetCollectionStatisticsRequest::_Internal::base(const GetCollectionStatisticsRequest* msg) {
  return *msg->base_;
}
void GetCollectionStatisticsRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetCollectionStatisticsRequest::GetCollectionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCollectionStatisticsRequest)
}
GetCollectionStatisticsRequest::GetCollectionStatisticsRequest(const GetCollectionStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCollectionStatisticsRequest)
}

void GetCollectionStatisticsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCollectionStatisticsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetCollectionStatisticsRequest::~GetCollectionStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCollectionStatisticsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCollectionStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetCollectionStatisticsRequest::ArenaDtor(void* object) {
  GetCollectionStatisticsRequest* _this = reinterpret_cast< GetCollectionStatisticsRequest* >(object);
  (void)_this;
}
void GetCollectionStatisticsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCollectionStatisticsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollectionStatisticsRequest& GetCollectionStatisticsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollectionStatisticsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetCollectionStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCollectionStatisticsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetCollectionStatisticsRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollectionStatisticsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetCollectionStatisticsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCollectionStatisticsRequest)
  return target;
}

size_t GetCollectionStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollectionStatisticsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollectionStatisticsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollectionStatisticsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetCollectionStatisticsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetCollectionStatisticsRequest)
    MergeFrom(*source);
  }
}

void GetCollectionStatisticsRequest::MergeFrom(const GetCollectionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void GetCollectionStatisticsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollectionStatisticsRequest::CopyFrom(const GetCollectionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionStatisticsRequest::IsInitialized() const {
  return true;
}

void GetCollectionStatisticsRequest::InternalSwap(GetCollectionStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectionStatisticsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollectionStatisticsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetCollectionStatisticsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetCollectionStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetCollectionStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetCollectionStatisticsResponse::_Internal::status(const GetCollectionStatisticsResponse* msg) {
  return *msg->status_;
}
void GetCollectionStatisticsResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetCollectionStatisticsResponse::clear_stats() {
  stats_.Clear();
}
GetCollectionStatisticsResponse::GetCollectionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCollectionStatisticsResponse)
}
GetCollectionStatisticsResponse::GetCollectionStatisticsResponse(const GetCollectionStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCollectionStatisticsResponse)
}

void GetCollectionStatisticsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCollectionStatisticsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

GetCollectionStatisticsResponse::~GetCollectionStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCollectionStatisticsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCollectionStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetCollectionStatisticsResponse::ArenaDtor(void* object) {
  GetCollectionStatisticsResponse* _this = reinterpret_cast< GetCollectionStatisticsResponse* >(object);
  (void)_this;
}
void GetCollectionStatisticsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCollectionStatisticsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollectionStatisticsResponse& GetCollectionStatisticsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollectionStatisticsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetCollectionStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCollectionStatisticsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollectionStatisticsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCollectionStatisticsResponse)
  return target;
}

size_t GetCollectionStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollectionStatisticsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollectionStatisticsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollectionStatisticsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetCollectionStatisticsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetCollectionStatisticsResponse)
    MergeFrom(*source);
  }
}

void GetCollectionStatisticsResponse::MergeFrom(const GetCollectionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void GetCollectionStatisticsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollectionStatisticsResponse::CopyFrom(const GetCollectionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionStatisticsResponse::IsInitialized() const {
  return true;
}

void GetCollectionStatisticsResponse::InternalSwap(GetCollectionStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stats_.InternalSwap(&other->stats_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectionStatisticsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowCollectionsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowCollectionsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ShowCollectionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ShowCollectionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ShowCollectionsRequest::_Internal::base(const ShowCollectionsRequest* msg) {
  return *msg->base_;
}
void ShowCollectionsRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ShowCollectionsRequest::ShowCollectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  collection_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowCollectionsRequest)
}
ShowCollectionsRequest::ShowCollectionsRequest(const ShowCollectionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collection_names_(from.collection_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowCollectionsRequest)
}

void ShowCollectionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowCollectionsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&base_)) + sizeof(type_));
}

ShowCollectionsRequest::~ShowCollectionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowCollectionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShowCollectionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ShowCollectionsRequest::ArenaDtor(void* object) {
  ShowCollectionsRequest* _this = reinterpret_cast< ShowCollectionsRequest* >(object);
  (void)_this;
}
void ShowCollectionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowCollectionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowCollectionsRequest& ShowCollectionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowCollectionsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowCollectionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowCollectionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_names_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowCollectionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ShowCollectionsRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 time_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.ShowType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::milvus::proto::milvus::ShowType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string collection_names = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collection_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ShowCollectionsRequest.collection_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowCollectionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowCollectionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowCollectionsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // uint64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_time_stamp(), target);
  }

  // .milvus.proto.milvus.ShowType type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // repeated string collection_names = 5 [deprecated = true];
  for (int i = 0, n = this->_internal_collection_names_size(); i < n; i++) {
    const auto& s = this->_internal_collection_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowCollectionsRequest.collection_names");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowCollectionsRequest)
  return target;
}

size_t ShowCollectionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowCollectionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collection_names = 5 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(collection_names_.size());
  for (int i = 0, n = collection_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      collection_names_.Get(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_stamp());
  }

  // .milvus.proto.milvus.ShowType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowCollectionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowCollectionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowCollectionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowCollectionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowCollectionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowCollectionsRequest)
    MergeFrom(*source);
  }
}

void ShowCollectionsRequest::MergeFrom(const ShowCollectionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowCollectionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collection_names_.MergeFrom(from.collection_names_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.time_stamp() != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ShowCollectionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowCollectionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowCollectionsRequest::CopyFrom(const ShowCollectionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowCollectionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowCollectionsRequest::IsInitialized() const {
  return true;
}

void ShowCollectionsRequest::InternalSwap(ShowCollectionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_names_.InternalSwap(&other->collection_names_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowCollectionsRequest, type_)
      + sizeof(ShowCollectionsRequest::type_)
      - PROTOBUF_FIELD_OFFSET(ShowCollectionsRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowCollectionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowCollectionsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowCollectionsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ShowCollectionsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ShowCollectionsResponse* msg);
};

const ::milvus::proto::common::Status&
ShowCollectionsResponse::_Internal::status(const ShowCollectionsResponse* msg) {
  return *msg->status_;
}
void ShowCollectionsResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ShowCollectionsResponse::ShowCollectionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  collection_names_(arena),
  collection_ids_(arena),
  created_timestamps_(arena),
  created_utc_timestamps_(arena),
  inmemory_percentages_(arena),
  query_service_available_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowCollectionsResponse)
}
ShowCollectionsResponse::ShowCollectionsResponse(const ShowCollectionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collection_names_(from.collection_names_),
      collection_ids_(from.collection_ids_),
      created_timestamps_(from.created_timestamps_),
      created_utc_timestamps_(from.created_utc_timestamps_),
      inmemory_percentages_(from.inmemory_percentages_),
      query_service_available_(from.query_service_available_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowCollectionsResponse)
}

void ShowCollectionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowCollectionsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

ShowCollectionsResponse::~ShowCollectionsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowCollectionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShowCollectionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ShowCollectionsResponse::ArenaDtor(void* object) {
  ShowCollectionsResponse* _this = reinterpret_cast< ShowCollectionsResponse* >(object);
  (void)_this;
}
void ShowCollectionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowCollectionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowCollectionsResponse& ShowCollectionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowCollectionsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowCollectionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowCollectionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_names_.Clear();
  collection_ids_.Clear();
  created_timestamps_.Clear();
  created_utc_timestamps_.Clear();
  inmemory_percentages_.Clear();
  query_service_available_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowCollectionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string collection_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collection_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ShowCollectionsResponse.collection_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 collection_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_collection_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_collection_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 created_timestamps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_created_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_created_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 created_utc_timestamps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_created_utc_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_created_utc_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 inMemory_percentages = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_inmemory_percentages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_inmemory_percentages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool query_service_available = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_query_service_available(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_query_service_available(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowCollectionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowCollectionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string collection_names = 2;
  for (int i = 0, n = this->_internal_collection_names_size(); i < n; i++) {
    const auto& s = this->_internal_collection_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowCollectionsResponse.collection_names");
    target = stream->WriteString(2, s, target);
  }

  // repeated int64 collection_ids = 3;
  {
    int byte_size = _collection_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_collection_ids(), byte_size, target);
    }
  }

  // repeated uint64 created_timestamps = 4;
  {
    int byte_size = _created_timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_created_timestamps(), byte_size, target);
    }
  }

  // repeated uint64 created_utc_timestamps = 5;
  {
    int byte_size = _created_utc_timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_created_utc_timestamps(), byte_size, target);
    }
  }

  // repeated int64 inMemory_percentages = 6 [deprecated = true];
  {
    int byte_size = _inmemory_percentages_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_inmemory_percentages(), byte_size, target);
    }
  }

  // repeated bool query_service_available = 7;
  if (this->_internal_query_service_available_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_query_service_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowCollectionsResponse)
  return target;
}

size_t ShowCollectionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowCollectionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collection_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(collection_names_.size());
  for (int i = 0, n = collection_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      collection_names_.Get(i));
  }

  // repeated int64 collection_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->collection_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _collection_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 created_timestamps = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->created_timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _created_timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 created_utc_timestamps = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->created_utc_timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _created_utc_timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 inMemory_percentages = 6 [deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->inmemory_percentages_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inmemory_percentages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool query_service_available = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_query_service_available_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _query_service_available_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowCollectionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowCollectionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowCollectionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowCollectionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowCollectionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowCollectionsResponse)
    MergeFrom(*source);
  }
}

void ShowCollectionsResponse::MergeFrom(const ShowCollectionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowCollectionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collection_names_.MergeFrom(from.collection_names_);
  collection_ids_.MergeFrom(from.collection_ids_);
  created_timestamps_.MergeFrom(from.created_timestamps_);
  created_utc_timestamps_.MergeFrom(from.created_utc_timestamps_);
  inmemory_percentages_.MergeFrom(from.inmemory_percentages_);
  query_service_available_.MergeFrom(from.query_service_available_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ShowCollectionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowCollectionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowCollectionsResponse::CopyFrom(const ShowCollectionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowCollectionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowCollectionsResponse::IsInitialized() const {
  return true;
}

void ShowCollectionsResponse::InternalSwap(ShowCollectionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_names_.InternalSwap(&other->collection_names_);
  collection_ids_.InternalSwap(&other->collection_ids_);
  created_timestamps_.InternalSwap(&other->created_timestamps_);
  created_utc_timestamps_.InternalSwap(&other->created_utc_timestamps_);
  inmemory_percentages_.InternalSwap(&other->inmemory_percentages_);
  query_service_available_.InternalSwap(&other->query_service_available_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowCollectionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePartitionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CreatePartitionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class CreatePartitionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreatePartitionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreatePartitionRequest::_Internal::base(const CreatePartitionRequest* msg) {
  return *msg->base_;
}
void CreatePartitionRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
CreatePartitionRequest::CreatePartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreatePartitionRequest)
}
CreatePartitionRequest::CreatePartitionRequest(const CreatePartitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partition_name().empty()) {
    partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_partition_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreatePartitionRequest)
}

void CreatePartitionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePartitionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

CreatePartitionRequest::~CreatePartitionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreatePartitionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreatePartitionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreatePartitionRequest::ArenaDtor(void* object) {
  CreatePartitionRequest* _this = reinterpret_cast< CreatePartitionRequest* >(object);
  (void)_this;
}
void CreatePartitionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreatePartitionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePartitionRequest& CreatePartitionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePartitionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CreatePartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreatePartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePartitionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreatePartitionRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreatePartitionRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreatePartitionRequest.partition_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePartitionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreatePartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreatePartitionRequest)
  return target;
}

size_t CreatePartitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreatePartitionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePartitionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CreatePartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePartitionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePartitionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CreatePartitionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CreatePartitionRequest)
    MergeFrom(*source);
  }
}

void CreatePartitionRequest::MergeFrom(const CreatePartitionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreatePartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.partition_name().size() > 0) {
    _internal_set_partition_name(from._internal_partition_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void CreatePartitionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CreatePartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePartitionRequest::CopyFrom(const CreatePartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreatePartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePartitionRequest::IsInitialized() const {
  return true;
}

void CreatePartitionRequest::InternalSwap(CreatePartitionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePartitionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropPartitionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DropPartitionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DropPartitionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropPartitionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropPartitionRequest::_Internal::base(const DropPartitionRequest* msg) {
  return *msg->base_;
}
void DropPartitionRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DropPartitionRequest::DropPartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropPartitionRequest)
}
DropPartitionRequest::DropPartitionRequest(const DropPartitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partition_name().empty()) {
    partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_partition_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropPartitionRequest)
}

void DropPartitionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropPartitionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DropPartitionRequest::~DropPartitionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropPartitionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropPartitionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DropPartitionRequest::ArenaDtor(void* object) {
  DropPartitionRequest* _this = reinterpret_cast< DropPartitionRequest* >(object);
  (void)_this;
}
void DropPartitionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropPartitionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropPartitionRequest& DropPartitionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropPartitionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DropPartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropPartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropPartitionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropPartitionRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropPartitionRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropPartitionRequest.partition_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropPartitionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropPartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropPartitionRequest)
  return target;
}

size_t DropPartitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropPartitionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropPartitionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DropPartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropPartitionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropPartitionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DropPartitionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DropPartitionRequest)
    MergeFrom(*source);
  }
}

void DropPartitionRequest::MergeFrom(const DropPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropPartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.partition_name().size() > 0) {
    _internal_set_partition_name(from._internal_partition_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DropPartitionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DropPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropPartitionRequest::CopyFrom(const DropPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropPartitionRequest::IsInitialized() const {
  return true;
}

void DropPartitionRequest::InternalSwap(DropPartitionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropPartitionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HasPartitionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_HasPartitionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class HasPartitionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const HasPartitionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
HasPartitionRequest::_Internal::base(const HasPartitionRequest* msg) {
  return *msg->base_;
}
void HasPartitionRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
HasPartitionRequest::HasPartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.HasPartitionRequest)
}
HasPartitionRequest::HasPartitionRequest(const HasPartitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partition_name().empty()) {
    partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_partition_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.HasPartitionRequest)
}

void HasPartitionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HasPartitionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

HasPartitionRequest::~HasPartitionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.HasPartitionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HasPartitionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void HasPartitionRequest::ArenaDtor(void* object) {
  HasPartitionRequest* _this = reinterpret_cast< HasPartitionRequest* >(object);
  (void)_this;
}
void HasPartitionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HasPartitionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HasPartitionRequest& HasPartitionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HasPartitionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void HasPartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.HasPartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HasPartitionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.HasPartitionRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.HasPartitionRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.HasPartitionRequest.partition_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HasPartitionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.HasPartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.HasPartitionRequest)
  return target;
}

size_t HasPartitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.HasPartitionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HasPartitionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.HasPartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HasPartitionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HasPartitionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.HasPartitionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.HasPartitionRequest)
    MergeFrom(*source);
  }
}

void HasPartitionRequest::MergeFrom(const HasPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.HasPartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.partition_name().size() > 0) {
    _internal_set_partition_name(from._internal_partition_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void HasPartitionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.HasPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HasPartitionRequest::CopyFrom(const HasPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.HasPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasPartitionRequest::IsInitialized() const {
  return true;
}

void HasPartitionRequest::InternalSwap(HasPartitionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HasPartitionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadPartitionsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_LoadPartitionsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class LoadPartitionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const LoadPartitionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
LoadPartitionsRequest::_Internal::base(const LoadPartitionsRequest* msg) {
  return *msg->base_;
}
void LoadPartitionsRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
LoadPartitionsRequest::LoadPartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_names_(arena),
  resource_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.LoadPartitionsRequest)
}
LoadPartitionsRequest::LoadPartitionsRequest(const LoadPartitionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_names_(from.partition_names_),
      resource_groups_(from.resource_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&replica_number_, &from.replica_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_) -
    reinterpret_cast<char*>(&replica_number_)) + sizeof(refresh_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.LoadPartitionsRequest)
}

void LoadPartitionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadPartitionsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_) -
      reinterpret_cast<char*>(&base_)) + sizeof(refresh_));
}

LoadPartitionsRequest::~LoadPartitionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.LoadPartitionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadPartitionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void LoadPartitionsRequest::ArenaDtor(void* object) {
  LoadPartitionsRequest* _this = reinterpret_cast< LoadPartitionsRequest* >(object);
  (void)_this;
}
void LoadPartitionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadPartitionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadPartitionsRequest& LoadPartitionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadPartitionsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void LoadPartitionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.LoadPartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  resource_groups_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&replica_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_) -
      reinterpret_cast<char*>(&replica_number_)) + sizeof(refresh_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadPartitionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.LoadPartitionsRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.LoadPartitionsRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.LoadPartitionsRequest.partition_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 replica_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          replica_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string resource_groups = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resource_groups();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.LoadPartitionsRequest.resource_groups"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool refresh = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadPartitionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.LoadPartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.partition_names");
    target = stream->WriteString(4, s, target);
  }

  // int32 replica_number = 5;
  if (this->replica_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_replica_number(), target);
  }

  // repeated string resource_groups = 6;
  for (int i = 0, n = this->_internal_resource_groups_size(); i < n; i++) {
    const auto& s = this->_internal_resource_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.resource_groups");
    target = stream->WriteString(6, s, target);
  }

  // bool refresh = 7;
  if (this->refresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_refresh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.LoadPartitionsRequest)
  return target;
}

size_t LoadPartitionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.LoadPartitionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(partition_names_.size());
  for (int i = 0, n = partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      partition_names_.Get(i));
  }

  // repeated string resource_groups = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(resource_groups_.size());
  for (int i = 0, n = resource_groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      resource_groups_.Get(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int32 replica_number = 5;
  if (this->replica_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_replica_number());
  }

  // bool refresh = 7;
  if (this->refresh() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadPartitionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.LoadPartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadPartitionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadPartitionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.LoadPartitionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.LoadPartitionsRequest)
    MergeFrom(*source);
  }
}

void LoadPartitionsRequest::MergeFrom(const LoadPartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.LoadPartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  resource_groups_.MergeFrom(from.resource_groups_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.replica_number() != 0) {
    _internal_set_replica_number(from._internal_replica_number());
  }
  if (from.refresh() != 0) {
    _internal_set_refresh(from._internal_refresh());
  }
}

void LoadPartitionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.LoadPartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPartitionsRequest::CopyFrom(const LoadPartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.LoadPartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPartitionsRequest::IsInitialized() const {
  return true;
}

void LoadPartitionsRequest::InternalSwap(LoadPartitionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_names_.InternalSwap(&other->partition_names_);
  resource_groups_.InternalSwap(&other->resource_groups_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadPartitionsRequest, refresh_)
      + sizeof(LoadPartitionsRequest::refresh_)
      - PROTOBUF_FIELD_OFFSET(LoadPartitionsRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadPartitionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleasePartitionsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ReleasePartitionsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ReleasePartitionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ReleasePartitionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ReleasePartitionsRequest::_Internal::base(const ReleasePartitionsRequest* msg) {
  return *msg->base_;
}
void ReleasePartitionsRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ReleasePartitionsRequest::ReleasePartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ReleasePartitionsRequest)
}
ReleasePartitionsRequest::ReleasePartitionsRequest(const ReleasePartitionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_names_(from.partition_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ReleasePartitionsRequest)
}

void ReleasePartitionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleasePartitionsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

ReleasePartitionsRequest::~ReleasePartitionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ReleasePartitionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleasePartitionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ReleasePartitionsRequest::ArenaDtor(void* object) {
  ReleasePartitionsRequest* _this = reinterpret_cast< ReleasePartitionsRequest* >(object);
  (void)_this;
}
void ReleasePartitionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleasePartitionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleasePartitionsRequest& ReleasePartitionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleasePartitionsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ReleasePartitionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ReleasePartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleasePartitionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ReleasePartitionsRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ReleasePartitionsRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ReleasePartitionsRequest.partition_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleasePartitionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ReleasePartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.partition_names");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ReleasePartitionsRequest)
  return target;
}

size_t ReleasePartitionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ReleasePartitionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(partition_names_.size());
  for (int i = 0, n = partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      partition_names_.Get(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleasePartitionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ReleasePartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleasePartitionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleasePartitionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ReleasePartitionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ReleasePartitionsRequest)
    MergeFrom(*source);
  }
}

void ReleasePartitionsRequest::MergeFrom(const ReleasePartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ReleasePartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void ReleasePartitionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ReleasePartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleasePartitionsRequest::CopyFrom(const ReleasePartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ReleasePartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleasePartitionsRequest::IsInitialized() const {
  return true;
}

void ReleasePartitionsRequest::InternalSwap(ReleasePartitionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_names_.InternalSwap(&other->partition_names_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleasePartitionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPartitionStatisticsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetPartitionStatisticsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetPartitionStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetPartitionStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetPartitionStatisticsRequest::_Internal::base(const GetPartitionStatisticsRequest* msg) {
  return *msg->base_;
}
void GetPartitionStatisticsRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetPartitionStatisticsRequest::GetPartitionStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetPartitionStatisticsRequest)
}
GetPartitionStatisticsRequest::GetPartitionStatisticsRequest(const GetPartitionStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partition_name().empty()) {
    partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_partition_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPartitionStatisticsRequest)
}

void GetPartitionStatisticsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPartitionStatisticsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetPartitionStatisticsRequest::~GetPartitionStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPartitionStatisticsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPartitionStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetPartitionStatisticsRequest::ArenaDtor(void* object) {
  GetPartitionStatisticsRequest* _this = reinterpret_cast< GetPartitionStatisticsRequest* >(object);
  (void)_this;
}
void GetPartitionStatisticsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPartitionStatisticsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPartitionStatisticsRequest& GetPartitionStatisticsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPartitionStatisticsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetPartitionStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPartitionStatisticsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetPartitionStatisticsRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPartitionStatisticsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPartitionStatisticsRequest)
  return target;
}

size_t GetPartitionStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPartitionStatisticsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPartitionStatisticsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPartitionStatisticsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetPartitionStatisticsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetPartitionStatisticsRequest)
    MergeFrom(*source);
  }
}

void GetPartitionStatisticsRequest::MergeFrom(const GetPartitionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.partition_name().size() > 0) {
    _internal_set_partition_name(from._internal_partition_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void GetPartitionStatisticsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPartitionStatisticsRequest::CopyFrom(const GetPartitionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionStatisticsRequest::IsInitialized() const {
  return true;
}

void GetPartitionStatisticsRequest::InternalSwap(GetPartitionStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPartitionStatisticsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPartitionStatisticsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetPartitionStatisticsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetPartitionStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetPartitionStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetPartitionStatisticsResponse::_Internal::status(const GetPartitionStatisticsResponse* msg) {
  return *msg->status_;
}
void GetPartitionStatisticsResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetPartitionStatisticsResponse::clear_stats() {
  stats_.Clear();
}
GetPartitionStatisticsResponse::GetPartitionStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetPartitionStatisticsResponse)
}
GetPartitionStatisticsResponse::GetPartitionStatisticsResponse(const GetPartitionStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPartitionStatisticsResponse)
}

void GetPartitionStatisticsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPartitionStatisticsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

GetPartitionStatisticsResponse::~GetPartitionStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPartitionStatisticsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPartitionStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetPartitionStatisticsResponse::ArenaDtor(void* object) {
  GetPartitionStatisticsResponse* _this = reinterpret_cast< GetPartitionStatisticsResponse* >(object);
  (void)_this;
}
void GetPartitionStatisticsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPartitionStatisticsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPartitionStatisticsResponse& GetPartitionStatisticsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPartitionStatisticsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetPartitionStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPartitionStatisticsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPartitionStatisticsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPartitionStatisticsResponse)
  return target;
}

size_t GetPartitionStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPartitionStatisticsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPartitionStatisticsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPartitionStatisticsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetPartitionStatisticsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetPartitionStatisticsResponse)
    MergeFrom(*source);
  }
}

void GetPartitionStatisticsResponse::MergeFrom(const GetPartitionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void GetPartitionStatisticsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPartitionStatisticsResponse::CopyFrom(const GetPartitionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionStatisticsResponse::IsInitialized() const {
  return true;
}

void GetPartitionStatisticsResponse::InternalSwap(GetPartitionStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stats_.InternalSwap(&other->stats_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPartitionStatisticsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowPartitionsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowPartitionsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ShowPartitionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ShowPartitionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ShowPartitionsRequest::_Internal::base(const ShowPartitionsRequest* msg) {
  return *msg->base_;
}
void ShowPartitionsRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ShowPartitionsRequest::ShowPartitionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowPartitionsRequest)
}
ShowPartitionsRequest::ShowPartitionsRequest(const ShowPartitionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_names_(from.partition_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&collectionid_, &from.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&collectionid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowPartitionsRequest)
}

void ShowPartitionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowPartitionsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&base_)) + sizeof(type_));
}

ShowPartitionsRequest::~ShowPartitionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowPartitionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShowPartitionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ShowPartitionsRequest::ArenaDtor(void* object) {
  ShowPartitionsRequest* _this = reinterpret_cast< ShowPartitionsRequest* >(object);
  (void)_this;
}
void ShowPartitionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowPartitionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowPartitionsRequest& ShowPartitionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowPartitionsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowPartitionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowPartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&collectionid_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowPartitionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ShowPartitionsRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ShowPartitionsRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ShowPartitionsRequest.partition_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.ShowType type = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::milvus::proto::milvus::ShowType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowPartitionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowPartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_collectionid(), target);
  }

  // repeated string partition_names = 5;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsRequest.partition_names");
    target = stream->WriteString(5, s, target);
  }

  // .milvus.proto.milvus.ShowType type = 6 [deprecated = true];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowPartitionsRequest)
  return target;
}

size_t ShowPartitionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowPartitionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(partition_names_.size());
  for (int i = 0, n = partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      partition_names_.Get(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collectionid());
  }

  // .milvus.proto.milvus.ShowType type = 6 [deprecated = true];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowPartitionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowPartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowPartitionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowPartitionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowPartitionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowPartitionsRequest)
    MergeFrom(*source);
  }
}

void ShowPartitionsRequest::MergeFrom(const ShowPartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowPartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.collectionid() != 0) {
    _internal_set_collectionid(from._internal_collectionid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ShowPartitionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowPartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowPartitionsRequest::CopyFrom(const ShowPartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowPartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowPartitionsRequest::IsInitialized() const {
  return true;
}

void ShowPartitionsRequest::InternalSwap(ShowPartitionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_names_.InternalSwap(&other->partition_names_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowPartitionsRequest, type_)
      + sizeof(ShowPartitionsRequest::type_)
      - PROTOBUF_FIELD_OFFSET(ShowPartitionsRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowPartitionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowPartitionsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowPartitionsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ShowPartitionsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ShowPartitionsResponse* msg);
};

const ::milvus::proto::common::Status&
ShowPartitionsResponse::_Internal::status(const ShowPartitionsResponse* msg) {
  return *msg->status_;
}
void ShowPartitionsResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ShowPartitionsResponse::ShowPartitionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_names_(arena),
  partitionids_(arena),
  created_timestamps_(arena),
  created_utc_timestamps_(arena),
  inmemory_percentages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowPartitionsResponse)
}
ShowPartitionsResponse::ShowPartitionsResponse(const ShowPartitionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_names_(from.partition_names_),
      partitionids_(from.partitionids_),
      created_timestamps_(from.created_timestamps_),
      created_utc_timestamps_(from.created_utc_timestamps_),
      inmemory_percentages_(from.inmemory_percentages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowPartitionsResponse)
}

void ShowPartitionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowPartitionsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

ShowPartitionsResponse::~ShowPartitionsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowPartitionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShowPartitionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ShowPartitionsResponse::ArenaDtor(void* object) {
  ShowPartitionsResponse* _this = reinterpret_cast< ShowPartitionsResponse* >(object);
  (void)_this;
}
void ShowPartitionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowPartitionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowPartitionsResponse& ShowPartitionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowPartitionsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowPartitionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowPartitionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  partitionids_.Clear();
  created_timestamps_.Clear();
  created_utc_timestamps_.Clear();
  inmemory_percentages_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowPartitionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ShowPartitionsResponse.partition_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 partitionIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partitionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_partitionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 created_timestamps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_created_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_created_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 created_utc_timestamps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_created_utc_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_created_utc_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 inMemory_percentages = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_inmemory_percentages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_inmemory_percentages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowPartitionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowPartitionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string partition_names = 2;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsResponse.partition_names");
    target = stream->WriteString(2, s, target);
  }

  // repeated int64 partitionIDs = 3;
  {
    int byte_size = _partitionids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_partitionids(), byte_size, target);
    }
  }

  // repeated uint64 created_timestamps = 4;
  {
    int byte_size = _created_timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_created_timestamps(), byte_size, target);
    }
  }

  // repeated uint64 created_utc_timestamps = 5;
  {
    int byte_size = _created_utc_timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_created_utc_timestamps(), byte_size, target);
    }
  }

  // repeated int64 inMemory_percentages = 6 [deprecated = true];
  {
    int byte_size = _inmemory_percentages_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_inmemory_percentages(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowPartitionsResponse)
  return target;
}

size_t ShowPartitionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowPartitionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(partition_names_.size());
  for (int i = 0, n = partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      partition_names_.Get(i));
  }

  // repeated int64 partitionIDs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->partitionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _partitionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 created_timestamps = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->created_timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _created_timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 created_utc_timestamps = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->created_utc_timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _created_utc_timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 inMemory_percentages = 6 [deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->inmemory_percentages_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inmemory_percentages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowPartitionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowPartitionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowPartitionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowPartitionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowPartitionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowPartitionsResponse)
    MergeFrom(*source);
  }
}

void ShowPartitionsResponse::MergeFrom(const ShowPartitionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowPartitionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  partitionids_.MergeFrom(from.partitionids_);
  created_timestamps_.MergeFrom(from.created_timestamps_);
  created_utc_timestamps_.MergeFrom(from.created_utc_timestamps_);
  inmemory_percentages_.MergeFrom(from.inmemory_percentages_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ShowPartitionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowPartitionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowPartitionsResponse::CopyFrom(const ShowPartitionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowPartitionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowPartitionsResponse::IsInitialized() const {
  return true;
}

void ShowPartitionsResponse::InternalSwap(ShowPartitionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_names_.InternalSwap(&other->partition_names_);
  partitionids_.InternalSwap(&other->partitionids_);
  created_timestamps_.InternalSwap(&other->created_timestamps_);
  created_utc_timestamps_.InternalSwap(&other->created_utc_timestamps_);
  inmemory_percentages_.InternalSwap(&other->inmemory_percentages_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowPartitionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeSegmentRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeSegmentRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DescribeSegmentRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeSegmentRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeSegmentRequest::_Internal::base(const DescribeSegmentRequest* msg) {
  return *msg->base_;
}
void DescribeSegmentRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DescribeSegmentRequest::DescribeSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeSegmentRequest)
}
DescribeSegmentRequest::DescribeSegmentRequest(const DescribeSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&collectionid_, &from.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&segmentid_) -
    reinterpret_cast<char*>(&collectionid_)) + sizeof(segmentid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeSegmentRequest)
}

void DescribeSegmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeSegmentRequest_milvus_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segmentid_) -
      reinterpret_cast<char*>(&base_)) + sizeof(segmentid_));
}

DescribeSegmentRequest::~DescribeSegmentRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeSegmentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeSegmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void DescribeSegmentRequest::ArenaDtor(void* object) {
  DescribeSegmentRequest* _this = reinterpret_cast< DescribeSegmentRequest* >(object);
  (void)_this;
}
void DescribeSegmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeSegmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeSegmentRequest& DescribeSegmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeSegmentRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segmentid_) -
      reinterpret_cast<char*>(&collectionid_)) + sizeof(segmentid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeSegmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 segmentID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeSegmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 segmentID = 3;
  if (this->segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_segmentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeSegmentRequest)
  return target;
}

size_t DescribeSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeSegmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collectionid());
  }

  // int64 segmentID = 3;
  if (this->segmentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_segmentid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeSegmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeSegmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeSegmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeSegmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeSegmentRequest)
    MergeFrom(*source);
  }
}

void DescribeSegmentRequest::MergeFrom(const DescribeSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.collectionid() != 0) {
    _internal_set_collectionid(from._internal_collectionid());
  }
  if (from.segmentid() != 0) {
    _internal_set_segmentid(from._internal_segmentid());
  }
}

void DescribeSegmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeSegmentRequest::CopyFrom(const DescribeSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeSegmentRequest::IsInitialized() const {
  return true;
}

void DescribeSegmentRequest::InternalSwap(DescribeSegmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeSegmentRequest, segmentid_)
      + sizeof(DescribeSegmentRequest::segmentid_)
      - PROTOBUF_FIELD_OFFSET(DescribeSegmentRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeSegmentResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeSegmentResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class DescribeSegmentResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeSegmentResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeSegmentResponse::_Internal::status(const DescribeSegmentResponse* msg) {
  return *msg->status_;
}
void DescribeSegmentResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DescribeSegmentResponse::DescribeSegmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeSegmentResponse)
}
DescribeSegmentResponse::DescribeSegmentResponse(const DescribeSegmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&indexid_, &from.indexid_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_index_) -
    reinterpret_cast<char*>(&indexid_)) + sizeof(enable_index_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeSegmentResponse)
}

void DescribeSegmentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeSegmentResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_index_) -
      reinterpret_cast<char*>(&status_)) + sizeof(enable_index_));
}

DescribeSegmentResponse::~DescribeSegmentResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeSegmentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeSegmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DescribeSegmentResponse::ArenaDtor(void* object) {
  DescribeSegmentResponse* _this = reinterpret_cast< DescribeSegmentResponse* >(object);
  (void)_this;
}
void DescribeSegmentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeSegmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeSegmentResponse& DescribeSegmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeSegmentResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeSegmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&indexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_index_) -
      reinterpret_cast<char*>(&indexid_)) + sizeof(enable_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeSegmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 indexID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 buildID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fieldID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fieldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeSegmentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_indexid(), target);
  }

  // int64 buildID = 3;
  if (this->buildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_buildid(), target);
  }

  // bool enable_index = 4;
  if (this->enable_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_index(), target);
  }

  // int64 fieldID = 5;
  if (this->fieldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_fieldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeSegmentResponse)
  return target;
}

size_t DescribeSegmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeSegmentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_indexid());
  }

  // int64 buildID = 3;
  if (this->buildid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buildid());
  }

  // int64 fieldID = 5;
  if (this->fieldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fieldid());
  }

  // bool enable_index = 4;
  if (this->enable_index() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeSegmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeSegmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeSegmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeSegmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeSegmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeSegmentResponse)
    MergeFrom(*source);
  }
}

void DescribeSegmentResponse::MergeFrom(const DescribeSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeSegmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.indexid() != 0) {
    _internal_set_indexid(from._internal_indexid());
  }
  if (from.buildid() != 0) {
    _internal_set_buildid(from._internal_buildid());
  }
  if (from.fieldid() != 0) {
    _internal_set_fieldid(from._internal_fieldid());
  }
  if (from.enable_index() != 0) {
    _internal_set_enable_index(from._internal_enable_index());
  }
}

void DescribeSegmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeSegmentResponse::CopyFrom(const DescribeSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeSegmentResponse::IsInitialized() const {
  return true;
}

void DescribeSegmentResponse::InternalSwap(DescribeSegmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeSegmentResponse, enable_index_)
      + sizeof(DescribeSegmentResponse::enable_index_)
      - PROTOBUF_FIELD_OFFSET(DescribeSegmentResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowSegmentsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowSegmentsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ShowSegmentsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ShowSegmentsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ShowSegmentsRequest::_Internal::base(const ShowSegmentsRequest* msg) {
  return *msg->base_;
}
void ShowSegmentsRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ShowSegmentsRequest::ShowSegmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowSegmentsRequest)
}
ShowSegmentsRequest::ShowSegmentsRequest(const ShowSegmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&collectionid_, &from.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&partitionid_) -
    reinterpret_cast<char*>(&collectionid_)) + sizeof(partitionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowSegmentsRequest)
}

void ShowSegmentsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowSegmentsRequest_milvus_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partitionid_) -
      reinterpret_cast<char*>(&base_)) + sizeof(partitionid_));
}

ShowSegmentsRequest::~ShowSegmentsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowSegmentsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShowSegmentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void ShowSegmentsRequest::ArenaDtor(void* object) {
  ShowSegmentsRequest* _this = reinterpret_cast< ShowSegmentsRequest* >(object);
  (void)_this;
}
void ShowSegmentsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowSegmentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowSegmentsRequest& ShowSegmentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowSegmentsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowSegmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowSegmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partitionid_) -
      reinterpret_cast<char*>(&collectionid_)) + sizeof(partitionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowSegmentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowSegmentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowSegmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_partitionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowSegmentsRequest)
  return target;
}

size_t ShowSegmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowSegmentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collectionid());
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_partitionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowSegmentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowSegmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowSegmentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowSegmentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowSegmentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowSegmentsRequest)
    MergeFrom(*source);
  }
}

void ShowSegmentsRequest::MergeFrom(const ShowSegmentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowSegmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.collectionid() != 0) {
    _internal_set_collectionid(from._internal_collectionid());
  }
  if (from.partitionid() != 0) {
    _internal_set_partitionid(from._internal_partitionid());
  }
}

void ShowSegmentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowSegmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowSegmentsRequest::CopyFrom(const ShowSegmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowSegmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSegmentsRequest::IsInitialized() const {
  return true;
}

void ShowSegmentsRequest::InternalSwap(ShowSegmentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowSegmentsRequest, partitionid_)
      + sizeof(ShowSegmentsRequest::partitionid_)
      - PROTOBUF_FIELD_OFFSET(ShowSegmentsRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowSegmentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowSegmentsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowSegmentsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ShowSegmentsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ShowSegmentsResponse* msg);
};

const ::milvus::proto::common::Status&
ShowSegmentsResponse::_Internal::status(const ShowSegmentsResponse* msg) {
  return *msg->status_;
}
void ShowSegmentsResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ShowSegmentsResponse::ShowSegmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segmentids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShowSegmentsResponse)
}
ShowSegmentsResponse::ShowSegmentsResponse(const ShowSegmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segmentids_(from.segmentids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowSegmentsResponse)
}

void ShowSegmentsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowSegmentsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

ShowSegmentsResponse::~ShowSegmentsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowSegmentsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShowSegmentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ShowSegmentsResponse::ArenaDtor(void* object) {
  ShowSegmentsResponse* _this = reinterpret_cast< ShowSegmentsResponse* >(object);
  (void)_this;
}
void ShowSegmentsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowSegmentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowSegmentsResponse& ShowSegmentsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowSegmentsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowSegmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowSegmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segmentids_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowSegmentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowSegmentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowSegmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated int64 segmentIDs = 2;
  {
    int byte_size = _segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_segmentids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowSegmentsResponse)
  return target;
}

size_t ShowSegmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowSegmentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowSegmentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowSegmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowSegmentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowSegmentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowSegmentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowSegmentsResponse)
    MergeFrom(*source);
  }
}

void ShowSegmentsResponse::MergeFrom(const ShowSegmentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowSegmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segmentids_.MergeFrom(from.segmentids_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ShowSegmentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowSegmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowSegmentsResponse::CopyFrom(const ShowSegmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowSegmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSegmentsResponse::IsInitialized() const {
  return true;
}

void ShowSegmentsResponse::InternalSwap(ShowSegmentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segmentids_.InternalSwap(&other->segmentids_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowSegmentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateIndexRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CreateIndexRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class CreateIndexRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateIndexRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateIndexRequest::_Internal::base(const CreateIndexRequest* msg) {
  return *msg->base_;
}
void CreateIndexRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void CreateIndexRequest::clear_extra_params() {
  extra_params_.Clear();
}
CreateIndexRequest::CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  extra_params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateIndexRequest)
}
CreateIndexRequest::CreateIndexRequest(const CreateIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extra_params_(from.extra_params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_name().empty()) {
    field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_name(),
      GetArena());
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateIndexRequest)
}

void CreateIndexRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateIndexRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

CreateIndexRequest::~CreateIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateIndexRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreateIndexRequest::ArenaDtor(void* object) {
  CreateIndexRequest* _this = reinterpret_cast< CreateIndexRequest* >(object);
  (void)_this;
}
void CreateIndexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateIndexRequest& CreateIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateIndexRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CreateIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_params_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateIndexRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateIndexRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateIndexRequest.field_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string index_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateIndexRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateIndexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_extra_params(i), target, stream);
  }

  // string index_name = 6;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateIndexRequest)
  return target;
}

size_t CreateIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateIndexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
  total_size += 1UL * this->_internal_extra_params_size();
  for (const auto& msg : this->extra_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_name = 6;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CreateIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CreateIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CreateIndexRequest)
    MergeFrom(*source);
  }
}

void CreateIndexRequest::MergeFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_params_.MergeFrom(from.extra_params_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.field_name().size() > 0) {
    _internal_set_field_name(from._internal_field_name());
  }
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void CreateIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CreateIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateIndexRequest::CopyFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndexRequest::IsInitialized() const {
  return true;
}

void CreateIndexRequest::InternalSwap(CreateIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  extra_params_.InternalSwap(&other->extra_params_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlterIndexRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_AlterIndexRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class AlterIndexRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const AlterIndexRequest* msg);
};

const ::milvus::proto::common::MsgBase&
AlterIndexRequest::_Internal::base(const AlterIndexRequest* msg) {
  return *msg->base_;
}
void AlterIndexRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void AlterIndexRequest::clear_extra_params() {
  extra_params_.Clear();
}
AlterIndexRequest::AlterIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  extra_params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.AlterIndexRequest)
}
AlterIndexRequest::AlterIndexRequest(const AlterIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extra_params_(from.extra_params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.AlterIndexRequest)
}

void AlterIndexRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlterIndexRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

AlterIndexRequest::~AlterIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.AlterIndexRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlterIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void AlterIndexRequest::ArenaDtor(void* object) {
  AlterIndexRequest* _this = reinterpret_cast< AlterIndexRequest* >(object);
  (void)_this;
}
void AlterIndexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlterIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlterIndexRequest& AlterIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlterIndexRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void AlterIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.AlterIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_params_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlterIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.AlterIndexRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.AlterIndexRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.AlterIndexRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlterIndexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.AlterIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterIndexRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterIndexRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string index_name = 4;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.AlterIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_index_name(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_extra_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.AlterIndexRequest)
  return target;
}

size_t AlterIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.AlterIndexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
  total_size += 1UL * this->_internal_extra_params_size();
  for (const auto& msg : this->extra_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string index_name = 4;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlterIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.AlterIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AlterIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlterIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.AlterIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.AlterIndexRequest)
    MergeFrom(*source);
  }
}

void AlterIndexRequest::MergeFrom(const AlterIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.AlterIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_params_.MergeFrom(from.extra_params_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void AlterIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.AlterIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlterIndexRequest::CopyFrom(const AlterIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.AlterIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterIndexRequest::IsInitialized() const {
  return true;
}

void AlterIndexRequest::InternalSwap(AlterIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  extra_params_.InternalSwap(&other->extra_params_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlterIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeIndexRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeIndexRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DescribeIndexRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeIndexRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeIndexRequest::_Internal::base(const DescribeIndexRequest* msg) {
  return *msg->base_;
}
void DescribeIndexRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DescribeIndexRequest::DescribeIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeIndexRequest)
}
DescribeIndexRequest::DescribeIndexRequest(const DescribeIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_name().empty()) {
    field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_name(),
      GetArena());
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeIndexRequest)
}

void DescribeIndexRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeIndexRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&base_)) + sizeof(timestamp_));
}

DescribeIndexRequest::~DescribeIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeIndexRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DescribeIndexRequest::ArenaDtor(void* object) {
  DescribeIndexRequest* _this = reinterpret_cast< DescribeIndexRequest* >(object);
  (void)_this;
}
void DescribeIndexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeIndexRequest& DescribeIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeIndexRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeIndexRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeIndexRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeIndexRequest.field_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeIndexRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeIndexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_index_name(), target);
  }

  // uint64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeIndexRequest)
  return target;
}

size_t DescribeIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeIndexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeIndexRequest)
    MergeFrom(*source);
  }
}

void DescribeIndexRequest::MergeFrom(const DescribeIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.field_name().size() > 0) {
    _internal_set_field_name(from._internal_field_name());
  }
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void DescribeIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeIndexRequest::CopyFrom(const DescribeIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeIndexRequest::IsInitialized() const {
  return true;
}

void DescribeIndexRequest::InternalSwap(DescribeIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeIndexRequest, timestamp_)
      + sizeof(DescribeIndexRequest::timestamp_)
      - PROTOBUF_FIELD_OFFSET(DescribeIndexRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndexDescription::InitAsDefaultInstance() {
}
class IndexDescription::_Internal {
 public:
};

void IndexDescription::clear_params() {
  params_.Clear();
}
IndexDescription::IndexDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.IndexDescription)
}
IndexDescription::IndexDescription(const IndexDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_name().empty()) {
    field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_name(),
      GetArena());
  }
  index_state_fail_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_state_fail_reason().empty()) {
    index_state_fail_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_state_fail_reason(),
      GetArena());
  }
  ::memcpy(&indexid_, &from.indexid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&indexid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.IndexDescription)
}

void IndexDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexDescription_milvus_2eproto.base);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_state_fail_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&indexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&indexid_)) + sizeof(state_));
}

IndexDescription::~IndexDescription() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.IndexDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_state_fail_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IndexDescription::ArenaDtor(void* object) {
  IndexDescription* _this = reinterpret_cast< IndexDescription* >(object);
  (void)_this;
}
void IndexDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexDescription& IndexDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexDescription_milvus_2eproto.base);
  return *internal_default_instance();
}


void IndexDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.IndexDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_state_fail_reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&indexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&indexid_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.IndexDescription.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 indexID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.IndexDescription.field_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 indexed_rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          indexed_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_rows = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.IndexState state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::IndexState>(val));
        } else goto handle_unusual;
        continue;
      // string index_state_fail_reason = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_index_state_fail_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.IndexDescription.index_state_fail_reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pending_index_rows = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pending_index_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.IndexDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.IndexDescription.index_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_name(), target);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_indexid(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_params(i), target, stream);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.IndexDescription.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // int64 indexed_rows = 5;
  if (this->indexed_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_indexed_rows(), target);
  }

  // int64 total_rows = 6;
  if (this->total_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_rows(), target);
  }

  // .milvus.proto.common.IndexState state = 7;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_state(), target);
  }

  // string index_state_fail_reason = 8;
  if (this->index_state_fail_reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_state_fail_reason().data(), static_cast<int>(this->_internal_index_state_fail_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.IndexDescription.index_state_fail_reason");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_index_state_fail_reason(), target);
  }

  // int64 pending_index_rows = 9;
  if (this->pending_index_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_pending_index_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.IndexDescription)
  return target;
}

size_t IndexDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.IndexDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair params = 3;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_state_fail_reason = 8;
  if (this->index_state_fail_reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_state_fail_reason());
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_indexid());
  }

  // int64 indexed_rows = 5;
  if (this->indexed_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_indexed_rows());
  }

  // int64 total_rows = 6;
  if (this->total_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_rows());
  }

  // int64 pending_index_rows = 9;
  if (this->pending_index_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pending_index_rows());
  }

  // .milvus.proto.common.IndexState state = 7;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.IndexDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.IndexDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.IndexDescription)
    MergeFrom(*source);
  }
}

void IndexDescription::MergeFrom(const IndexDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.IndexDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.field_name().size() > 0) {
    _internal_set_field_name(from._internal_field_name());
  }
  if (from.index_state_fail_reason().size() > 0) {
    _internal_set_index_state_fail_reason(from._internal_index_state_fail_reason());
  }
  if (from.indexid() != 0) {
    _internal_set_indexid(from._internal_indexid());
  }
  if (from.indexed_rows() != 0) {
    _internal_set_indexed_rows(from._internal_indexed_rows());
  }
  if (from.total_rows() != 0) {
    _internal_set_total_rows(from._internal_total_rows());
  }
  if (from.pending_index_rows() != 0) {
    _internal_set_pending_index_rows(from._internal_pending_index_rows());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void IndexDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.IndexDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexDescription::CopyFrom(const IndexDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.IndexDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexDescription::IsInitialized() const {
  return true;
}

void IndexDescription::InternalSwap(IndexDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_state_fail_reason_.Swap(&other->index_state_fail_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexDescription, state_)
      + sizeof(IndexDescription::state_)
      - PROTOBUF_FIELD_OFFSET(IndexDescription, indexid_)>(
          reinterpret_cast<char*>(&indexid_),
          reinterpret_cast<char*>(&other->indexid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeIndexResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeIndexResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class DescribeIndexResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeIndexResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeIndexResponse::_Internal::status(const DescribeIndexResponse* msg) {
  return *msg->status_;
}
void DescribeIndexResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DescribeIndexResponse::DescribeIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  index_descriptions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeIndexResponse)
}
DescribeIndexResponse::DescribeIndexResponse(const DescribeIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      index_descriptions_(from.index_descriptions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeIndexResponse)
}

void DescribeIndexResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeIndexResponse_milvus_2eproto.base);
  status_ = nullptr;
}

DescribeIndexResponse::~DescribeIndexResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeIndexResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DescribeIndexResponse::ArenaDtor(void* object) {
  DescribeIndexResponse* _this = reinterpret_cast< DescribeIndexResponse* >(object);
  (void)_this;
}
void DescribeIndexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeIndexResponse& DescribeIndexResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeIndexResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_descriptions_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeIndexResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_index_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_index_descriptions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeIndexResponse)
  return target;
}

size_t DescribeIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeIndexResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  total_size += 1UL * this->_internal_index_descriptions_size();
  for (const auto& msg : this->index_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeIndexResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeIndexResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeIndexResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeIndexResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeIndexResponse)
    MergeFrom(*source);
  }
}

void DescribeIndexResponse::MergeFrom(const DescribeIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_descriptions_.MergeFrom(from.index_descriptions_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void DescribeIndexResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeIndexResponse::CopyFrom(const DescribeIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeIndexResponse::IsInitialized() const {
  return true;
}

void DescribeIndexResponse::InternalSwap(DescribeIndexResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_descriptions_.InternalSwap(&other->index_descriptions_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeIndexResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexBuildProgressRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetIndexBuildProgressRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetIndexBuildProgressRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetIndexBuildProgressRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetIndexBuildProgressRequest::_Internal::base(const GetIndexBuildProgressRequest* msg) {
  return *msg->base_;
}
void GetIndexBuildProgressRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetIndexBuildProgressRequest::GetIndexBuildProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexBuildProgressRequest)
}
GetIndexBuildProgressRequest::GetIndexBuildProgressRequest(const GetIndexBuildProgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_name().empty()) {
    field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_name(),
      GetArena());
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexBuildProgressRequest)
}

void GetIndexBuildProgressRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIndexBuildProgressRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetIndexBuildProgressRequest::~GetIndexBuildProgressRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexBuildProgressRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetIndexBuildProgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetIndexBuildProgressRequest::ArenaDtor(void* object) {
  GetIndexBuildProgressRequest* _this = reinterpret_cast< GetIndexBuildProgressRequest* >(object);
  (void)_this;
}
void GetIndexBuildProgressRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetIndexBuildProgressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexBuildProgressRequest& GetIndexBuildProgressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexBuildProgressRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetIndexBuildProgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexBuildProgressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexBuildProgressRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexBuildProgressRequest.field_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexBuildProgressRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexBuildProgressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexBuildProgressRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexBuildProgressRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexBuildProgressRequest.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexBuildProgressRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexBuildProgressRequest)
  return target;
}

size_t GetIndexBuildProgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexBuildProgressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexBuildProgressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexBuildProgressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetIndexBuildProgressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetIndexBuildProgressRequest)
    MergeFrom(*source);
  }
}

void GetIndexBuildProgressRequest::MergeFrom(const GetIndexBuildProgressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.field_name().size() > 0) {
    _internal_set_field_name(from._internal_field_name());
  }
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void GetIndexBuildProgressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexBuildProgressRequest::CopyFrom(const GetIndexBuildProgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexBuildProgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexBuildProgressRequest::IsInitialized() const {
  return true;
}

void GetIndexBuildProgressRequest::InternalSwap(GetIndexBuildProgressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexBuildProgressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexBuildProgressResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetIndexBuildProgressResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetIndexBuildProgressResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexBuildProgressResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexBuildProgressResponse::_Internal::status(const GetIndexBuildProgressResponse* msg) {
  return *msg->status_;
}
void GetIndexBuildProgressResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetIndexBuildProgressResponse::GetIndexBuildProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexBuildProgressResponse)
}
GetIndexBuildProgressResponse::GetIndexBuildProgressResponse(const GetIndexBuildProgressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&indexed_rows_, &from.indexed_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_rows_) -
    reinterpret_cast<char*>(&indexed_rows_)) + sizeof(total_rows_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexBuildProgressResponse)
}

void GetIndexBuildProgressResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIndexBuildProgressResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_rows_) -
      reinterpret_cast<char*>(&status_)) + sizeof(total_rows_));
}

GetIndexBuildProgressResponse::~GetIndexBuildProgressResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexBuildProgressResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetIndexBuildProgressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetIndexBuildProgressResponse::ArenaDtor(void* object) {
  GetIndexBuildProgressResponse* _this = reinterpret_cast< GetIndexBuildProgressResponse* >(object);
  (void)_this;
}
void GetIndexBuildProgressResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetIndexBuildProgressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexBuildProgressResponse& GetIndexBuildProgressResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexBuildProgressResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetIndexBuildProgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&indexed_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_rows_) -
      reinterpret_cast<char*>(&indexed_rows_)) + sizeof(total_rows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexBuildProgressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 indexed_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          indexed_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexBuildProgressResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int64 indexed_rows = 2;
  if (this->indexed_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_indexed_rows(), target);
  }

  // int64 total_rows = 3;
  if (this->total_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexBuildProgressResponse)
  return target;
}

size_t GetIndexBuildProgressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 indexed_rows = 2;
  if (this->indexed_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_indexed_rows());
  }

  // int64 total_rows = 3;
  if (this->total_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_rows());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexBuildProgressResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexBuildProgressResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexBuildProgressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetIndexBuildProgressResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetIndexBuildProgressResponse)
    MergeFrom(*source);
  }
}

void GetIndexBuildProgressResponse::MergeFrom(const GetIndexBuildProgressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.indexed_rows() != 0) {
    _internal_set_indexed_rows(from._internal_indexed_rows());
  }
  if (from.total_rows() != 0) {
    _internal_set_total_rows(from._internal_total_rows());
  }
}

void GetIndexBuildProgressResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexBuildProgressResponse::CopyFrom(const GetIndexBuildProgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexBuildProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexBuildProgressResponse::IsInitialized() const {
  return true;
}

void GetIndexBuildProgressResponse::InternalSwap(GetIndexBuildProgressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetIndexBuildProgressResponse, total_rows_)
      + sizeof(GetIndexBuildProgressResponse::total_rows_)
      - PROTOBUF_FIELD_OFFSET(GetIndexBuildProgressResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexBuildProgressResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexStateRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetIndexStateRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetIndexStateRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetIndexStateRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetIndexStateRequest::_Internal::base(const GetIndexStateRequest* msg) {
  return *msg->base_;
}
void GetIndexStateRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetIndexStateRequest::GetIndexStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexStateRequest)
}
GetIndexStateRequest::GetIndexStateRequest(const GetIndexStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_name().empty()) {
    field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_name(),
      GetArena());
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexStateRequest)
}

void GetIndexStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIndexStateRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetIndexStateRequest::~GetIndexStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetIndexStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetIndexStateRequest::ArenaDtor(void* object) {
  GetIndexStateRequest* _this = reinterpret_cast< GetIndexStateRequest* >(object);
  (void)_this;
}
void GetIndexStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetIndexStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexStateRequest& GetIndexStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexStateRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetIndexStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStateRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStateRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStateRequest.field_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStateRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexStateRequest)
  return target;
}

size_t GetIndexStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetIndexStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetIndexStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetIndexStateRequest)
    MergeFrom(*source);
  }
}

void GetIndexStateRequest::MergeFrom(const GetIndexStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.field_name().size() > 0) {
    _internal_set_field_name(from._internal_field_name());
  }
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void GetIndexStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetIndexStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexStateRequest::CopyFrom(const GetIndexStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStateRequest::IsInitialized() const {
  return true;
}

void GetIndexStateRequest::InternalSwap(GetIndexStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexStateResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetIndexStateResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetIndexStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexStateResponse::_Internal::status(const GetIndexStateResponse* msg) {
  return *msg->status_;
}
void GetIndexStateResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetIndexStateResponse::GetIndexStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexStateResponse)
}
GetIndexStateResponse::GetIndexStateResponse(const GetIndexStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fail_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fail_reason().empty()) {
    fail_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fail_reason(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexStateResponse)
}

void GetIndexStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIndexStateResponse_milvus_2eproto.base);
  fail_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

GetIndexStateResponse::~GetIndexStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetIndexStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fail_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GetIndexStateResponse::ArenaDtor(void* object) {
  GetIndexStateResponse* _this = reinterpret_cast< GetIndexStateResponse* >(object);
  (void)_this;
}
void GetIndexStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetIndexStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexStateResponse& GetIndexStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexStateResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetIndexStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fail_reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.IndexState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::IndexState>(val));
        } else goto handle_unusual;
        continue;
      // string fail_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fail_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStateResponse.fail_reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // string fail_reason = 3;
  if (this->fail_reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fail_reason().data(), static_cast<int>(this->_internal_fail_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateResponse.fail_reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fail_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexStateResponse)
  return target;
}

size_t GetIndexStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fail_reason = 3;
  if (this->fail_reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fail_reason());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetIndexStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetIndexStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetIndexStateResponse)
    MergeFrom(*source);
  }
}

void GetIndexStateResponse::MergeFrom(const GetIndexStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fail_reason().size() > 0) {
    _internal_set_fail_reason(from._internal_fail_reason());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void GetIndexStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetIndexStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexStateResponse::CopyFrom(const GetIndexStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStateResponse::IsInitialized() const {
  return true;
}

void GetIndexStateResponse::InternalSwap(GetIndexStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fail_reason_.Swap(&other->fail_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetIndexStateResponse, state_)
      + sizeof(GetIndexStateResponse::state_)
      - PROTOBUF_FIELD_OFFSET(GetIndexStateResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropIndexRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DropIndexRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DropIndexRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropIndexRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropIndexRequest::_Internal::base(const DropIndexRequest* msg) {
  return *msg->base_;
}
void DropIndexRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DropIndexRequest::DropIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropIndexRequest)
}
DropIndexRequest::DropIndexRequest(const DropIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_name().empty()) {
    field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_name(),
      GetArena());
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropIndexRequest)
}

void DropIndexRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropIndexRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DropIndexRequest::~DropIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropIndexRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DropIndexRequest::ArenaDtor(void* object) {
  DropIndexRequest* _this = reinterpret_cast< DropIndexRequest* >(object);
  (void)_this;
}
void DropIndexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropIndexRequest& DropIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropIndexRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DropIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropIndexRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropIndexRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropIndexRequest.field_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropIndexRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropIndexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.field_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field_name(), target);
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropIndexRequest)
  return target;
}

size_t DropIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropIndexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DropIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DropIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DropIndexRequest)
    MergeFrom(*source);
  }
}

void DropIndexRequest::MergeFrom(const DropIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.field_name().size() > 0) {
    _internal_set_field_name(from._internal_field_name());
  }
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DropIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DropIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropIndexRequest::CopyFrom(const DropIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropIndexRequest::IsInitialized() const {
  return true;
}

void DropIndexRequest::InternalSwap(DropIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsertRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_InsertRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class InsertRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const InsertRequest* msg);
};

const ::milvus::proto::common::MsgBase&
InsertRequest::_Internal::base(const InsertRequest* msg) {
  return *msg->base_;
}
void InsertRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void InsertRequest::clear_fields_data() {
  fields_data_.Clear();
}
InsertRequest::InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_data_(arena),
  hash_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.InsertRequest)
}
InsertRequest::InsertRequest(const InsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_data_(from.fields_data_),
      hash_keys_(from.hash_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partition_name().empty()) {
    partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_partition_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  num_rows_ = from.num_rows_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.InsertRequest)
}

void InsertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_rows_) -
      reinterpret_cast<char*>(&base_)) + sizeof(num_rows_));
}

InsertRequest::~InsertRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.InsertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void InsertRequest::ArenaDtor(void* object) {
  InsertRequest* _this = reinterpret_cast< InsertRequest* >(object);
  (void)_this;
}
void InsertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertRequest& InsertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void InsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.InsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_data_.Clear();
  hash_keys_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  num_rows_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.InsertRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.InsertRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.InsertRequest.partition_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.schema.FieldData fields_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 hash_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hash_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_hash_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_rows = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.InsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_fields_data(i), target, stream);
  }

  // repeated uint32 hash_keys = 6;
  {
    int byte_size = _hash_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_hash_keys(), byte_size, target);
    }
  }

  // uint32 num_rows = 7;
  if (this->num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.InsertRequest)
  return target;
}

size_t InsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.InsertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  total_size += 1UL * this->_internal_fields_data_size();
  for (const auto& msg : this->fields_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 hash_keys = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hash_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hash_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint32 num_rows = 7;
  if (this->num_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_rows());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.InsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.InsertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.InsertRequest)
    MergeFrom(*source);
  }
}

void InsertRequest::MergeFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.InsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_data_.MergeFrom(from.fields_data_);
  hash_keys_.MergeFrom(from.hash_keys_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.partition_name().size() > 0) {
    _internal_set_partition_name(from._internal_partition_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.num_rows() != 0) {
    _internal_set_num_rows(from._internal_num_rows());
  }
}

void InsertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertRequest::CopyFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRequest::IsInitialized() const {
  return true;
}

void InsertRequest::InternalSwap(InsertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_data_.InternalSwap(&other->fields_data_);
  hash_keys_.InternalSwap(&other->hash_keys_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertRequest, num_rows_)
      + sizeof(InsertRequest::num_rows_)
      - PROTOBUF_FIELD_OFFSET(InsertRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpsertRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_UpsertRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class UpsertRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const UpsertRequest* msg);
};

const ::milvus::proto::common::MsgBase&
UpsertRequest::_Internal::base(const UpsertRequest* msg) {
  return *msg->base_;
}
void UpsertRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void UpsertRequest::clear_fields_data() {
  fields_data_.Clear();
}
UpsertRequest::UpsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_data_(arena),
  hash_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.UpsertRequest)
}
UpsertRequest::UpsertRequest(const UpsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_data_(from.fields_data_),
      hash_keys_(from.hash_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partition_name().empty()) {
    partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_partition_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  num_rows_ = from.num_rows_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.UpsertRequest)
}

void UpsertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpsertRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_rows_) -
      reinterpret_cast<char*>(&base_)) + sizeof(num_rows_));
}

UpsertRequest::~UpsertRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.UpsertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void UpsertRequest::ArenaDtor(void* object) {
  UpsertRequest* _this = reinterpret_cast< UpsertRequest* >(object);
  (void)_this;
}
void UpsertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpsertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpsertRequest& UpsertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpsertRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void UpsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.UpsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_data_.Clear();
  hash_keys_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  num_rows_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpsertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.UpsertRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.UpsertRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.UpsertRequest.partition_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.schema.FieldData fields_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 hash_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hash_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_hash_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_rows = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpsertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.UpsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpsertRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpsertRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpsertRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_fields_data(i), target, stream);
  }

  // repeated uint32 hash_keys = 6;
  {
    int byte_size = _hash_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_hash_keys(), byte_size, target);
    }
  }

  // uint32 num_rows = 7;
  if (this->num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.UpsertRequest)
  return target;
}

size_t UpsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.UpsertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.schema.FieldData fields_data = 5;
  total_size += 1UL * this->_internal_fields_data_size();
  for (const auto& msg : this->fields_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 hash_keys = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hash_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hash_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint32 num_rows = 7;
  if (this->num_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_rows());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpsertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.UpsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpsertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpsertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.UpsertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.UpsertRequest)
    MergeFrom(*source);
  }
}

void UpsertRequest::MergeFrom(const UpsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.UpsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_data_.MergeFrom(from.fields_data_);
  hash_keys_.MergeFrom(from.hash_keys_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.partition_name().size() > 0) {
    _internal_set_partition_name(from._internal_partition_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.num_rows() != 0) {
    _internal_set_num_rows(from._internal_num_rows());
  }
}

void UpsertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.UpsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpsertRequest::CopyFrom(const UpsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.UpsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpsertRequest::IsInitialized() const {
  return true;
}

void UpsertRequest::InternalSwap(UpsertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_data_.InternalSwap(&other->fields_data_);
  hash_keys_.InternalSwap(&other->hash_keys_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpsertRequest, num_rows_)
      + sizeof(UpsertRequest::num_rows_)
      - PROTOBUF_FIELD_OFFSET(UpsertRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpsertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutationResult::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_MutationResult_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
  ::milvus::proto::milvus::_MutationResult_default_instance_._instance.get_mutable()->ids_ = const_cast< ::milvus::proto::schema::IDs*>(
      ::milvus::proto::schema::IDs::internal_default_instance());
}
class MutationResult::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const MutationResult* msg);
  static const ::milvus::proto::schema::IDs& ids(const MutationResult* msg);
};

const ::milvus::proto::common::Status&
MutationResult::_Internal::status(const MutationResult* msg) {
  return *msg->status_;
}
const ::milvus::proto::schema::IDs&
MutationResult::_Internal::ids(const MutationResult* msg) {
  return *msg->ids_;
}
void MutationResult::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MutationResult::clear_ids() {
  if (GetArena() == nullptr && ids_ != nullptr) {
    delete ids_;
  }
  ids_ = nullptr;
}
MutationResult::MutationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  succ_index_(arena),
  err_index_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.MutationResult)
}
MutationResult::MutationResult(const MutationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      succ_index_(from.succ_index_),
      err_index_(from.err_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_ids()) {
    ids_ = new ::milvus::proto::schema::IDs(*from.ids_);
  } else {
    ids_ = nullptr;
  }
  ::memcpy(&insert_cnt_, &from.insert_cnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&acknowledged_) -
    reinterpret_cast<char*>(&insert_cnt_)) + sizeof(acknowledged_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.MutationResult)
}

void MutationResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutationResult_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acknowledged_) -
      reinterpret_cast<char*>(&status_)) + sizeof(acknowledged_));
}

MutationResult::~MutationResult() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.MutationResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MutationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete ids_;
}

void MutationResult::ArenaDtor(void* object) {
  MutationResult* _this = reinterpret_cast< MutationResult* >(object);
  (void)_this;
}
void MutationResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MutationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutationResult& MutationResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutationResult_milvus_2eproto.base);
  return *internal_default_instance();
}


void MutationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.MutationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  succ_index_.Clear();
  err_index_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && ids_ != nullptr) {
    delete ids_;
  }
  ids_ = nullptr;
  ::memset(&insert_cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acknowledged_) -
      reinterpret_cast<char*>(&insert_cnt_)) + sizeof(acknowledged_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MutationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.schema.IDs IDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 succ_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_succ_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_succ_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 err_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_err_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_err_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool acknowledged = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          acknowledged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 insert_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          insert_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 delete_cnt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          delete_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 upsert_cnt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          upsert_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MutationResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.MutationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .milvus.proto.schema.IDs IDs = 2;
  if (this->has_ids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ids(this), target, stream);
  }

  // repeated uint32 succ_index = 3;
  {
    int byte_size = _succ_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_succ_index(), byte_size, target);
    }
  }

  // repeated uint32 err_index = 4;
  {
    int byte_size = _err_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_err_index(), byte_size, target);
    }
  }

  // bool acknowledged = 5;
  if (this->acknowledged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_acknowledged(), target);
  }

  // int64 insert_cnt = 6;
  if (this->insert_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_insert_cnt(), target);
  }

  // int64 delete_cnt = 7;
  if (this->delete_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_delete_cnt(), target);
  }

  // int64 upsert_cnt = 8;
  if (this->upsert_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_upsert_cnt(), target);
  }

  // uint64 timestamp = 9;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.MutationResult)
  return target;
}

size_t MutationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.MutationResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 succ_index = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->succ_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _succ_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 err_index = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->err_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _err_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .milvus.proto.schema.IDs IDs = 2;
  if (this->has_ids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ids_);
  }

  // int64 insert_cnt = 6;
  if (this->insert_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_insert_cnt());
  }

  // int64 delete_cnt = 7;
  if (this->delete_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_delete_cnt());
  }

  // int64 upsert_cnt = 8;
  if (this->upsert_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_upsert_cnt());
  }

  // uint64 timestamp = 9;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // bool acknowledged = 5;
  if (this->acknowledged() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutationResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.MutationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MutationResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.MutationResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.MutationResult)
    MergeFrom(*source);
  }
}

void MutationResult::MergeFrom(const MutationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.MutationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  succ_index_.MergeFrom(from.succ_index_);
  err_index_.MergeFrom(from.err_index_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.has_ids()) {
    _internal_mutable_ids()->::milvus::proto::schema::IDs::MergeFrom(from._internal_ids());
  }
  if (from.insert_cnt() != 0) {
    _internal_set_insert_cnt(from._internal_insert_cnt());
  }
  if (from.delete_cnt() != 0) {
    _internal_set_delete_cnt(from._internal_delete_cnt());
  }
  if (from.upsert_cnt() != 0) {
    _internal_set_upsert_cnt(from._internal_upsert_cnt());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.acknowledged() != 0) {
    _internal_set_acknowledged(from._internal_acknowledged());
  }
}

void MutationResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.MutationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationResult::CopyFrom(const MutationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.MutationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationResult::IsInitialized() const {
  return true;
}

void MutationResult::InternalSwap(MutationResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  succ_index_.InternalSwap(&other->succ_index_);
  err_index_.InternalSwap(&other->err_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MutationResult, acknowledged_)
      + sizeof(MutationResult::acknowledged_)
      - PROTOBUF_FIELD_OFFSET(MutationResult, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MutationResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DeleteRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DeleteRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DeleteRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DeleteRequest::_Internal::base(const DeleteRequest* msg) {
  return *msg->base_;
}
void DeleteRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hash_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hash_keys_(from.hash_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partition_name().empty()) {
    partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_partition_name(),
      GetArena());
  }
  expr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expr().empty()) {
    expr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_expr(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  consistency_level_ = from.consistency_level_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consistency_level_) -
      reinterpret_cast<char*>(&base_)) + sizeof(consistency_level_));
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DeleteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DeleteRequest::ArenaDtor(void* object) {
  DeleteRequest* _this = reinterpret_cast< DeleteRequest* >(object);
  (void)_this;
}
void DeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRequest& DeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_keys_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  consistency_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DeleteRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DeleteRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DeleteRequest.partition_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_expr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DeleteRequest.expr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hash_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hash_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_hash_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.ConsistencyLevel consistency_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consistency_level(static_cast<::milvus::proto::common::ConsistencyLevel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DeleteRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DeleteRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DeleteRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_name(), target);
  }

  // string expr = 5;
  if (this->expr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expr().data(), static_cast<int>(this->_internal_expr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DeleteRequest.expr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_expr(), target);
  }

  // repeated uint32 hash_keys = 6;
  {
    int byte_size = _hash_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_hash_keys(), byte_size, target);
    }
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 7;
  if (this->consistency_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_consistency_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DeleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 hash_keys = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hash_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hash_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // string expr = 5;
  if (this->expr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expr());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 7;
  if (this->consistency_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_consistency_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DeleteRequest)
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hash_keys_.MergeFrom(from.hash_keys_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.partition_name().size() > 0) {
    _internal_set_partition_name(from._internal_partition_name());
  }
  if (from.expr().size() > 0) {
    _internal_set_expr(from._internal_expr());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.consistency_level() != 0) {
    _internal_set_consistency_level(from._internal_consistency_level());
  }
}

void DeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_keys_.InternalSwap(&other->hash_keys_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expr_.Swap(&other->expr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteRequest, consistency_level_)
      + sizeof(DeleteRequest::consistency_level_)
      - PROTOBUF_FIELD_OFFSET(DeleteRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_SearchRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class SearchRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SearchRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SearchRequest::_Internal::base(const SearchRequest* msg) {
  return *msg->base_;
}
void SearchRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void SearchRequest::clear_search_params() {
  search_params_.Clear();
}
SearchRequest::SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_names_(arena),
  output_fields_(arena),
  search_params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_names_(from.partition_names_),
      output_fields_(from.output_fields_),
      search_params_(from.search_params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  dsl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dsl().empty()) {
    dsl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dsl(),
      GetArena());
  }
  placeholder_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placeholder_group().empty()) {
    placeholder_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_placeholder_group(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&travel_timestamp_, &from.travel_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&search_by_primary_keys_) -
    reinterpret_cast<char*>(&travel_timestamp_)) + sizeof(search_by_primary_keys_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SearchRequest)
}

void SearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dsl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeholder_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&search_by_primary_keys_) -
      reinterpret_cast<char*>(&base_)) + sizeof(search_by_primary_keys_));
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SearchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dsl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeholder_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void SearchRequest::ArenaDtor(void* object) {
  SearchRequest* _this = reinterpret_cast< SearchRequest* >(object);
  (void)_this;
}
void SearchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchRequest& SearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  output_fields_.Clear();
  search_params_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dsl_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  placeholder_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&travel_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&search_by_primary_keys_) -
      reinterpret_cast<char*>(&travel_timestamp_)) + sizeof(search_by_primary_keys_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.SearchRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.SearchRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.SearchRequest.partition_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string dsl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_dsl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.SearchRequest.dsl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes placeholder_group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_placeholder_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.DslType dsl_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dsl_type(static_cast<::milvus::proto::common::DslType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string output_fields = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.SearchRequest.output_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair search_params = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 travel_timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          travel_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 guarantee_timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          guarantee_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 nq = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          nq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool not_return_all_meta = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          not_return_all_meta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.ConsistencyLevel consistency_level = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consistency_level(static_cast<::milvus::proto::common::ConsistencyLevel>(val));
        } else goto handle_unusual;
        continue;
      // bool use_default_consistency = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          use_default_consistency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool search_by_primary_keys = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          search_by_primary_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.partition_names");
    target = stream->WriteString(4, s, target);
  }

  // string dsl = 5;
  if (this->dsl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dsl().data(), static_cast<int>(this->_internal_dsl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.dsl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dsl(), target);
  }

  // bytes placeholder_group = 6;
  if (this->placeholder_group().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_placeholder_group(), target);
  }

  // .milvus.proto.common.DslType dsl_type = 7;
  if (this->dsl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_dsl_type(), target);
  }

  // repeated string output_fields = 8;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.output_fields");
    target = stream->WriteString(8, s, target);
  }

  // repeated .milvus.proto.common.KeyValuePair search_params = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_search_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_search_params(i), target, stream);
  }

  // uint64 travel_timestamp = 10;
  if (this->travel_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_travel_timestamp(), target);
  }

  // uint64 guarantee_timestamp = 11;
  if (this->guarantee_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_guarantee_timestamp(), target);
  }

  // int64 nq = 12;
  if (this->nq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_nq(), target);
  }

  // bool not_return_all_meta = 13;
  if (this->not_return_all_meta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_not_return_all_meta(), target);
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 14;
  if (this->consistency_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_consistency_level(), target);
  }

  // bool use_default_consistency = 15;
  if (this->use_default_consistency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_use_default_consistency(), target);
  }

  // bool search_by_primary_keys = 16;
  if (this->search_by_primary_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_search_by_primary_keys(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(partition_names_.size());
  for (int i = 0, n = partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      partition_names_.Get(i));
  }

  // repeated string output_fields = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_fields_.size());
  for (int i = 0, n = output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_fields_.Get(i));
  }

  // repeated .milvus.proto.common.KeyValuePair search_params = 9;
  total_size += 1UL * this->_internal_search_params_size();
  for (const auto& msg : this->search_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string dsl = 5;
  if (this->dsl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dsl());
  }

  // bytes placeholder_group = 6;
  if (this->placeholder_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_placeholder_group());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 travel_timestamp = 10;
  if (this->travel_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_travel_timestamp());
  }

  // .milvus.proto.common.DslType dsl_type = 7;
  if (this->dsl_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dsl_type());
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 14;
  if (this->consistency_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_consistency_level());
  }

  // uint64 guarantee_timestamp = 11;
  if (this->guarantee_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guarantee_timestamp());
  }

  // int64 nq = 12;
  if (this->nq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_nq());
  }

  // bool not_return_all_meta = 13;
  if (this->not_return_all_meta() != 0) {
    total_size += 1 + 1;
  }

  // bool use_default_consistency = 15;
  if (this->use_default_consistency() != 0) {
    total_size += 1 + 1;
  }

  // bool search_by_primary_keys = 16;
  if (this->search_by_primary_keys() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.SearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.SearchRequest)
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  output_fields_.MergeFrom(from.output_fields_);
  search_params_.MergeFrom(from.search_params_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.dsl().size() > 0) {
    _internal_set_dsl(from._internal_dsl());
  }
  if (from.placeholder_group().size() > 0) {
    _internal_set_placeholder_group(from._internal_placeholder_group());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.travel_timestamp() != 0) {
    _internal_set_travel_timestamp(from._internal_travel_timestamp());
  }
  if (from.dsl_type() != 0) {
    _internal_set_dsl_type(from._internal_dsl_type());
  }
  if (from.consistency_level() != 0) {
    _internal_set_consistency_level(from._internal_consistency_level());
  }
  if (from.guarantee_timestamp() != 0) {
    _internal_set_guarantee_timestamp(from._internal_guarantee_timestamp());
  }
  if (from.nq() != 0) {
    _internal_set_nq(from._internal_nq());
  }
  if (from.not_return_all_meta() != 0) {
    _internal_set_not_return_all_meta(from._internal_not_return_all_meta());
  }
  if (from.use_default_consistency() != 0) {
    _internal_set_use_default_consistency(from._internal_use_default_consistency());
  }
  if (from.search_by_primary_keys() != 0) {
    _internal_set_search_by_primary_keys(from._internal_search_by_primary_keys());
  }
}

void SearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_names_.InternalSwap(&other->partition_names_);
  output_fields_.InternalSwap(&other->output_fields_);
  search_params_.InternalSwap(&other->search_params_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dsl_.Swap(&other->dsl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  placeholder_group_.Swap(&other->placeholder_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchRequest, search_by_primary_keys_)
      + sizeof(SearchRequest::search_by_primary_keys_)
      - PROTOBUF_FIELD_OFFSET(SearchRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hits::InitAsDefaultInstance() {
}
class Hits::_Internal {
 public:
};

Hits::Hits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena),
  row_data_(arena),
  scores_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.Hits)
}
Hits::Hits(const Hits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_),
      row_data_(from.row_data_),
      scores_(from.scores_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.Hits)
}

void Hits::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hits_milvus_2eproto.base);
}

Hits::~Hits() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.Hits)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Hits::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Hits::ArenaDtor(void* object) {
  Hits* _this = reinterpret_cast< Hits* >(object);
  (void)_this;
}
void Hits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hits& Hits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hits_milvus_2eproto.base);
  return *internal_default_instance();
}


void Hits::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.Hits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  row_data_.Clear();
  scores_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 IDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes row_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_row_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float scores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_scores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_scores(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.Hits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 IDs = 1;
  {
    int byte_size = _ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  // repeated bytes row_data = 2;
  for (int i = 0, n = this->_internal_row_data_size(); i < n; i++) {
    const auto& s = this->_internal_row_data(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated float scores = 3;
  if (this->_internal_scores_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_scores(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.Hits)
  return target;
}

size_t Hits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.Hits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 IDs = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes row_data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(row_data_.size());
  for (int i = 0, n = row_data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      row_data_.Get(i));
  }

  // repeated float scores = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_scores_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _scores_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.Hits)
  GOOGLE_DCHECK_NE(&from, this);
  const Hits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.Hits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.Hits)
    MergeFrom(*source);
  }
}

void Hits::MergeFrom(const Hits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.Hits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  row_data_.MergeFrom(from.row_data_);
  scores_.MergeFrom(from.scores_);
}

void Hits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.Hits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hits::CopyFrom(const Hits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.Hits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hits::IsInitialized() const {
  return true;
}

void Hits::InternalSwap(Hits* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  row_data_.InternalSwap(&other->row_data_);
  scores_.InternalSwap(&other->scores_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchResults::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_SearchResults_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
  ::milvus::proto::milvus::_SearchResults_default_instance_._instance.get_mutable()->results_ = const_cast< ::milvus::proto::schema::SearchResultData*>(
      ::milvus::proto::schema::SearchResultData::internal_default_instance());
}
class SearchResults::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const SearchResults* msg);
  static const ::milvus::proto::schema::SearchResultData& results(const SearchResults* msg);
};

const ::milvus::proto::common::Status&
SearchResults::_Internal::status(const SearchResults* msg) {
  return *msg->status_;
}
const ::milvus::proto::schema::SearchResultData&
SearchResults::_Internal::results(const SearchResults* msg) {
  return *msg->results_;
}
void SearchResults::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SearchResults::clear_results() {
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SearchResults::SearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SearchResults)
}
SearchResults::SearchResults(const SearchResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_results()) {
    results_ = new ::milvus::proto::schema::SearchResultData(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SearchResults)
}

void SearchResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchResults_milvus_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SearchResults::~SearchResults() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SearchResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SearchResults::ArenaDtor(void* object) {
  SearchResults* _this = reinterpret_cast< SearchResults* >(object);
  (void)_this;
}
void SearchResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchResults& SearchResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchResults_milvus_2eproto.base);
  return *internal_default_instance();
}


void SearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SearchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.schema.SearchResultData results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.SearchResults.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SearchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .milvus.proto.schema.SearchResultData results = 2;
  if (this->has_results()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::results(this), target, stream);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchResults.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SearchResults)
  return target;
}

size_t SearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SearchResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .milvus.proto.schema.SearchResultData results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.SearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.SearchResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.SearchResults)
    MergeFrom(*source);
  }
}

void SearchResults::MergeFrom(const SearchResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.has_results()) {
    _internal_mutable_results()->::milvus::proto::schema::SearchResultData::MergeFrom(from._internal_results());
  }
}

void SearchResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.SearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResults::CopyFrom(const SearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResults::IsInitialized() const {
  return true;
}

void SearchResults::InternalSwap(SearchResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchResults, results_)
      + sizeof(SearchResults::results_)
      - PROTOBUF_FIELD_OFFSET(SearchResults, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchRequestV2::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_SearchRequestV2_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class SearchRequestV2::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SearchRequestV2* msg);
};

const ::milvus::proto::common::MsgBase&
SearchRequestV2::_Internal::base(const SearchRequestV2* msg) {
  return *msg->base_;
}
void SearchRequestV2::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void SearchRequestV2::clear_rank_params() {
  rank_params_.Clear();
}
SearchRequestV2::SearchRequestV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_names_(arena),
  requests_(arena),
  rank_params_(arena),
  output_fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SearchRequestV2)
}
SearchRequestV2::SearchRequestV2(const SearchRequestV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_names_(from.partition_names_),
      requests_(from.requests_),
      rank_params_(from.rank_params_),
      output_fields_(from.output_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&travel_timestamp_, &from.travel_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&consistency_level_) -
    reinterpret_cast<char*>(&travel_timestamp_)) + sizeof(consistency_level_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SearchRequestV2)
}

void SearchRequestV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchRequestV2_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consistency_level_) -
      reinterpret_cast<char*>(&base_)) + sizeof(consistency_level_));
}

SearchRequestV2::~SearchRequestV2() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SearchRequestV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchRequestV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void SearchRequestV2::ArenaDtor(void* object) {
  SearchRequestV2* _this = reinterpret_cast< SearchRequestV2* >(object);
  (void)_this;
}
void SearchRequestV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchRequestV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchRequestV2& SearchRequestV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchRequestV2_milvus_2eproto.base);
  return *internal_default_instance();
}


void SearchRequestV2::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SearchRequestV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  requests_.Clear();
  rank_params_.Clear();
  output_fields_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&travel_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consistency_level_) -
      reinterpret_cast<char*>(&travel_timestamp_)) + sizeof(consistency_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequestV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.SearchRequestV2.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.SearchRequestV2.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.SearchRequestV2.partition_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.SearchRequest requests = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair rank_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 travel_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          travel_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 guarantee_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          guarantee_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool not_return_all_meta = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          not_return_all_meta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string output_fields = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.SearchRequestV2.output_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consistency_level(static_cast<::milvus::proto::common::ConsistencyLevel>(val));
        } else goto handle_unusual;
        continue;
      // bool use_default_consistency = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          use_default_consistency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchRequestV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SearchRequestV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequestV2.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequestV2.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequestV2.partition_names");
    target = stream->WriteString(4, s, target);
  }

  // repeated .milvus.proto.milvus.SearchRequest requests = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_requests(i), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair rank_params = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rank_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_rank_params(i), target, stream);
  }

  // uint64 travel_timestamp = 7;
  if (this->travel_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_travel_timestamp(), target);
  }

  // uint64 guarantee_timestamp = 8;
  if (this->guarantee_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_guarantee_timestamp(), target);
  }

  // bool not_return_all_meta = 9;
  if (this->not_return_all_meta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_not_return_all_meta(), target);
  }

  // repeated string output_fields = 10;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequestV2.output_fields");
    target = stream->WriteString(10, s, target);
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  if (this->consistency_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_consistency_level(), target);
  }

  // bool use_default_consistency = 12;
  if (this->use_default_consistency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_use_default_consistency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SearchRequestV2)
  return target;
}

size_t SearchRequestV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SearchRequestV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(partition_names_.size());
  for (int i = 0, n = partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      partition_names_.Get(i));
  }

  // repeated .milvus.proto.milvus.SearchRequest requests = 5;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.common.KeyValuePair rank_params = 6;
  total_size += 1UL * this->_internal_rank_params_size();
  for (const auto& msg : this->rank_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string output_fields = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_fields_.size());
  for (int i = 0, n = output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_fields_.Get(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 travel_timestamp = 7;
  if (this->travel_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_travel_timestamp());
  }

  // uint64 guarantee_timestamp = 8;
  if (this->guarantee_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guarantee_timestamp());
  }

  // bool not_return_all_meta = 9;
  if (this->not_return_all_meta() != 0) {
    total_size += 1 + 1;
  }

  // bool use_default_consistency = 12;
  if (this->use_default_consistency() != 0) {
    total_size += 1 + 1;
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  if (this->consistency_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_consistency_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchRequestV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.SearchRequestV2)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRequestV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchRequestV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.SearchRequestV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.SearchRequestV2)
    MergeFrom(*source);
  }
}

void SearchRequestV2::MergeFrom(const SearchRequestV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SearchRequestV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  requests_.MergeFrom(from.requests_);
  rank_params_.MergeFrom(from.rank_params_);
  output_fields_.MergeFrom(from.output_fields_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.travel_timestamp() != 0) {
    _internal_set_travel_timestamp(from._internal_travel_timestamp());
  }
  if (from.guarantee_timestamp() != 0) {
    _internal_set_guarantee_timestamp(from._internal_guarantee_timestamp());
  }
  if (from.not_return_all_meta() != 0) {
    _internal_set_not_return_all_meta(from._internal_not_return_all_meta());
  }
  if (from.use_default_consistency() != 0) {
    _internal_set_use_default_consistency(from._internal_use_default_consistency());
  }
  if (from.consistency_level() != 0) {
    _internal_set_consistency_level(from._internal_consistency_level());
  }
}

void SearchRequestV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.SearchRequestV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequestV2::CopyFrom(const SearchRequestV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SearchRequestV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequestV2::IsInitialized() const {
  return true;
}

void SearchRequestV2::InternalSwap(SearchRequestV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_names_.InternalSwap(&other->partition_names_);
  requests_.InternalSwap(&other->requests_);
  rank_params_.InternalSwap(&other->rank_params_);
  output_fields_.InternalSwap(&other->output_fields_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchRequestV2, consistency_level_)
      + sizeof(SearchRequestV2::consistency_level_)
      - PROTOBUF_FIELD_OFFSET(SearchRequestV2, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequestV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_FlushRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class FlushRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const FlushRequest* msg);
};

const ::milvus::proto::common::MsgBase&
FlushRequest::_Internal::base(const FlushRequest* msg) {
  return *msg->base_;
}
void FlushRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
FlushRequest::FlushRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  collection_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.FlushRequest)
}
FlushRequest::FlushRequest(const FlushRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collection_names_(from.collection_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.FlushRequest)
}

void FlushRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

FlushRequest::~FlushRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.FlushRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlushRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void FlushRequest::ArenaDtor(void* object) {
  FlushRequest* _this = reinterpret_cast< FlushRequest* >(object);
  (void)_this;
}
void FlushRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushRequest& FlushRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void FlushRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.FlushRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_names_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.FlushRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string collection_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collection_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.FlushRequest.collection_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.FlushRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.FlushRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // repeated string collection_names = 3;
  for (int i = 0, n = this->_internal_collection_names_size(); i < n; i++) {
    const auto& s = this->_internal_collection_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.FlushRequest.collection_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.FlushRequest)
  return target;
}

size_t FlushRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.FlushRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collection_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(collection_names_.size());
  for (int i = 0, n = collection_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      collection_names_.Get(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.FlushRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.FlushRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.FlushRequest)
    MergeFrom(*source);
  }
}

void FlushRequest::MergeFrom(const FlushRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.FlushRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collection_names_.MergeFrom(from.collection_names_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void FlushRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.FlushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushRequest::CopyFrom(const FlushRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.FlushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRequest::IsInitialized() const {
  return true;
}

void FlushRequest::InternalSwap(FlushRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_names_.InternalSwap(&other->collection_names_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FlushResponse_CollSegIDsEntry_DoNotUse::FlushResponse_CollSegIDsEntry_DoNotUse() {}
FlushResponse_CollSegIDsEntry_DoNotUse::FlushResponse_CollSegIDsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlushResponse_CollSegIDsEntry_DoNotUse::MergeFrom(const FlushResponse_CollSegIDsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse_CollSegIDsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FlushResponse_CollSegIDsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

FlushResponse_FlushCollSegIDsEntry_DoNotUse::FlushResponse_FlushCollSegIDsEntry_DoNotUse() {}
FlushResponse_FlushCollSegIDsEntry_DoNotUse::FlushResponse_FlushCollSegIDsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlushResponse_FlushCollSegIDsEntry_DoNotUse::MergeFrom(const FlushResponse_FlushCollSegIDsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse_FlushCollSegIDsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FlushResponse_FlushCollSegIDsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

FlushResponse_CollSealTimesEntry_DoNotUse::FlushResponse_CollSealTimesEntry_DoNotUse() {}
FlushResponse_CollSealTimesEntry_DoNotUse::FlushResponse_CollSealTimesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlushResponse_CollSealTimesEntry_DoNotUse::MergeFrom(const FlushResponse_CollSealTimesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse_CollSealTimesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FlushResponse_CollSealTimesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

FlushResponse_CollFlushTsEntry_DoNotUse::FlushResponse_CollFlushTsEntry_DoNotUse() {}
FlushResponse_CollFlushTsEntry_DoNotUse::FlushResponse_CollFlushTsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlushResponse_CollFlushTsEntry_DoNotUse::MergeFrom(const FlushResponse_CollFlushTsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse_CollFlushTsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FlushResponse_CollFlushTsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FlushResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_FlushResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class FlushResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const FlushResponse* msg);
};

const ::milvus::proto::common::Status&
FlushResponse::_Internal::status(const FlushResponse* msg) {
  return *msg->status_;
}
void FlushResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FlushResponse::clear_coll_segids() {
  coll_segids_.Clear();
}
void FlushResponse::clear_flush_coll_segids() {
  flush_coll_segids_.Clear();
}
FlushResponse::FlushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  coll_segids_(arena),
  flush_coll_segids_(arena),
  coll_seal_times_(arena),
  coll_flush_ts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.FlushResponse)
}
FlushResponse::FlushResponse(const FlushResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  coll_segids_.MergeFrom(from.coll_segids_);
  flush_coll_segids_.MergeFrom(from.flush_coll_segids_);
  coll_seal_times_.MergeFrom(from.coll_seal_times_);
  coll_flush_ts_.MergeFrom(from.coll_flush_ts_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.FlushResponse)
}

void FlushResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushResponse_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

FlushResponse::~FlushResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.FlushResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlushResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void FlushResponse::ArenaDtor(void* object) {
  FlushResponse* _this = reinterpret_cast< FlushResponse* >(object);
  (void)_this;
}
void FlushResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushResponse& FlushResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void FlushResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.FlushResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coll_segids_.Clear();
  flush_coll_segids_.Clear();
  coll_seal_times_.Clear();
  coll_flush_ts_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.FlushResponse.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .milvus.proto.schema.LongArray> coll_segIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&coll_segids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .milvus.proto.schema.LongArray> flush_coll_segIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&flush_coll_segids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int64> coll_seal_times = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&coll_seal_times_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, uint64> coll_flush_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&coll_flush_ts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.FlushResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.FlushResponse.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // map<string, .milvus.proto.schema.LongArray> coll_segIDs = 3;
  if (!this->_internal_coll_segids().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.milvus.FlushResponse.CollSegIDsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_coll_segids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_coll_segids().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::const_iterator
          it = this->_internal_coll_segids().begin();
          it != this->_internal_coll_segids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FlushResponse_CollSegIDsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::const_iterator
          it = this->_internal_coll_segids().begin();
          it != this->_internal_coll_segids().end(); ++it) {
        target = FlushResponse_CollSegIDsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .milvus.proto.schema.LongArray> flush_coll_segIDs = 4;
  if (!this->_internal_flush_coll_segids().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.milvus.FlushResponse.FlushCollSegIDsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_flush_coll_segids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_flush_coll_segids().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::const_iterator
          it = this->_internal_flush_coll_segids().begin();
          it != this->_internal_flush_coll_segids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FlushResponse_FlushCollSegIDsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::const_iterator
          it = this->_internal_flush_coll_segids().begin();
          it != this->_internal_flush_coll_segids().end(); ++it) {
        target = FlushResponse_FlushCollSegIDsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> coll_seal_times = 5;
  if (!this->_internal_coll_seal_times().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.milvus.FlushResponse.CollSealTimesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_coll_seal_times().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_coll_seal_times().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_coll_seal_times().begin();
          it != this->_internal_coll_seal_times().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FlushResponse_CollSealTimesEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_coll_seal_times().begin();
          it != this->_internal_coll_seal_times().end(); ++it) {
        target = FlushResponse_CollSealTimesEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, uint64> coll_flush_ts = 6;
  if (!this->_internal_coll_flush_ts().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.milvus.FlushResponse.CollFlushTsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_coll_flush_ts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_coll_flush_ts().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_coll_flush_ts().begin();
          it != this->_internal_coll_flush_ts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FlushResponse_CollFlushTsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_coll_flush_ts().begin();
          it != this->_internal_coll_flush_ts().end(); ++it) {
        target = FlushResponse_CollFlushTsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.FlushResponse)
  return target;
}

size_t FlushResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.FlushResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .milvus.proto.schema.LongArray> coll_segIDs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coll_segids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::const_iterator
      it = this->_internal_coll_segids().begin();
      it != this->_internal_coll_segids().end(); ++it) {
    total_size += FlushResponse_CollSegIDsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .milvus.proto.schema.LongArray> flush_coll_segIDs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_flush_coll_segids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::milvus::proto::schema::LongArray >::const_iterator
      it = this->_internal_flush_coll_segids().begin();
      it != this->_internal_flush_coll_segids().end(); ++it) {
    total_size += FlushResponse_FlushCollSegIDsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> coll_seal_times = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coll_seal_times_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_coll_seal_times().begin();
      it != this->_internal_coll_seal_times().end(); ++it) {
    total_size += FlushResponse_CollSealTimesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint64> coll_flush_ts = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coll_flush_ts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
      it = this->_internal_coll_flush_ts().begin();
      it != this->_internal_coll_flush_ts().end(); ++it) {
    total_size += FlushResponse_CollFlushTsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.FlushResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.FlushResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.FlushResponse)
    MergeFrom(*source);
  }
}

void FlushResponse::MergeFrom(const FlushResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.FlushResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coll_segids_.MergeFrom(from.coll_segids_);
  flush_coll_segids_.MergeFrom(from.flush_coll_segids_);
  coll_seal_times_.MergeFrom(from.coll_seal_times_);
  coll_flush_ts_.MergeFrom(from.coll_flush_ts_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void FlushResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.FlushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushResponse::CopyFrom(const FlushResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.FlushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushResponse::IsInitialized() const {
  return true;
}

void FlushResponse::InternalSwap(FlushResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  coll_segids_.Swap(&other->coll_segids_);
  flush_coll_segids_.Swap(&other->flush_coll_segids_);
  coll_seal_times_.Swap(&other->coll_seal_times_);
  coll_flush_ts_.Swap(&other->coll_flush_ts_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_QueryRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class QueryRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const QueryRequest* msg);
};

const ::milvus::proto::common::MsgBase&
QueryRequest::_Internal::base(const QueryRequest* msg) {
  return *msg->base_;
}
void QueryRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void QueryRequest::clear_query_params() {
  query_params_.Clear();
}
QueryRequest::QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  output_fields_(arena),
  partition_names_(arena),
  query_params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.QueryRequest)
}
QueryRequest::QueryRequest(const QueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_fields_(from.output_fields_),
      partition_names_(from.partition_names_),
      query_params_(from.query_params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  expr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expr().empty()) {
    expr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_expr(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&travel_timestamp_, &from.travel_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_default_consistency_) -
    reinterpret_cast<char*>(&travel_timestamp_)) + sizeof(use_default_consistency_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.QueryRequest)
}

void QueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_default_consistency_) -
      reinterpret_cast<char*>(&base_)) + sizeof(use_default_consistency_));
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.QueryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void QueryRequest::ArenaDtor(void* object) {
  QueryRequest* _this = reinterpret_cast< QueryRequest* >(object);
  (void)_this;
}
void QueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryRequest& QueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.QueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_fields_.Clear();
  partition_names_.Clear();
  query_params_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&travel_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_default_consistency_) -
      reinterpret_cast<char*>(&travel_timestamp_)) + sizeof(use_default_consistency_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.QueryRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.QueryRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_expr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.QueryRequest.expr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string output_fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.QueryRequest.output_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.QueryRequest.partition_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 travel_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          travel_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 guarantee_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          guarantee_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair query_params = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_query_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // bool not_return_all_meta = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          not_return_all_meta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consistency_level(static_cast<::milvus::proto::common::ConsistencyLevel>(val));
        } else goto handle_unusual;
        continue;
      // bool use_default_consistency = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          use_default_consistency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.QueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string expr = 4;
  if (this->expr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expr().data(), static_cast<int>(this->_internal_expr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryRequest.expr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_expr(), target);
  }

  // repeated string output_fields = 5;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryRequest.output_fields");
    target = stream->WriteString(5, s, target);
  }

  // repeated string partition_names = 6;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryRequest.partition_names");
    target = stream->WriteString(6, s, target);
  }

  // uint64 travel_timestamp = 7;
  if (this->travel_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_travel_timestamp(), target);
  }

  // uint64 guarantee_timestamp = 8;
  if (this->guarantee_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_guarantee_timestamp(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair query_params = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_query_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_query_params(i), target, stream);
  }

  // bool not_return_all_meta = 10;
  if (this->not_return_all_meta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_not_return_all_meta(), target);
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  if (this->consistency_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_consistency_level(), target);
  }

  // bool use_default_consistency = 12;
  if (this->use_default_consistency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_use_default_consistency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.QueryRequest)
  return target;
}

size_t QueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.QueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string output_fields = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_fields_.size());
  for (int i = 0, n = output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_fields_.Get(i));
  }

  // repeated string partition_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(partition_names_.size());
  for (int i = 0, n = partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      partition_names_.Get(i));
  }

  // repeated .milvus.proto.common.KeyValuePair query_params = 9;
  total_size += 1UL * this->_internal_query_params_size();
  for (const auto& msg : this->query_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string expr = 4;
  if (this->expr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expr());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 travel_timestamp = 7;
  if (this->travel_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_travel_timestamp());
  }

  // uint64 guarantee_timestamp = 8;
  if (this->guarantee_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guarantee_timestamp());
  }

  // .milvus.proto.common.ConsistencyLevel consistency_level = 11;
  if (this->consistency_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_consistency_level());
  }

  // bool not_return_all_meta = 10;
  if (this->not_return_all_meta() != 0) {
    total_size += 1 + 1;
  }

  // bool use_default_consistency = 12;
  if (this->use_default_consistency() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.QueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.QueryRequest)
    MergeFrom(*source);
  }
}

void QueryRequest::MergeFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_fields_.MergeFrom(from.output_fields_);
  partition_names_.MergeFrom(from.partition_names_);
  query_params_.MergeFrom(from.query_params_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.expr().size() > 0) {
    _internal_set_expr(from._internal_expr());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.travel_timestamp() != 0) {
    _internal_set_travel_timestamp(from._internal_travel_timestamp());
  }
  if (from.guarantee_timestamp() != 0) {
    _internal_set_guarantee_timestamp(from._internal_guarantee_timestamp());
  }
  if (from.consistency_level() != 0) {
    _internal_set_consistency_level(from._internal_consistency_level());
  }
  if (from.not_return_all_meta() != 0) {
    _internal_set_not_return_all_meta(from._internal_not_return_all_meta());
  }
  if (from.use_default_consistency() != 0) {
    _internal_set_use_default_consistency(from._internal_use_default_consistency());
  }
}

void QueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  return true;
}

void QueryRequest::InternalSwap(QueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  output_fields_.InternalSwap(&other->output_fields_);
  partition_names_.InternalSwap(&other->partition_names_);
  query_params_.InternalSwap(&other->query_params_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expr_.Swap(&other->expr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryRequest, use_default_consistency_)
      + sizeof(QueryRequest::use_default_consistency_)
      - PROTOBUF_FIELD_OFFSET(QueryRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResults::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_QueryResults_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class QueryResults::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const QueryResults* msg);
};

const ::milvus::proto::common::Status&
QueryResults::_Internal::status(const QueryResults* msg) {
  return *msg->status_;
}
void QueryResults::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void QueryResults::clear_fields_data() {
  fields_data_.Clear();
}
QueryResults::QueryResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_data_(arena),
  output_fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.QueryResults)
}
QueryResults::QueryResults(const QueryResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_data_(from.fields_data_),
      output_fields_(from.output_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.QueryResults)
}

void QueryResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResults_milvus_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

QueryResults::~QueryResults() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.QueryResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void QueryResults::ArenaDtor(void* object) {
  QueryResults* _this = reinterpret_cast< QueryResults* >(object);
  (void)_this;
}
void QueryResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResults& QueryResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResults_milvus_2eproto.base);
  return *internal_default_instance();
}


void QueryResults::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.QueryResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_data_.Clear();
  output_fields_.Clear();
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.schema.FieldData fields_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.QueryResults.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string output_fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.QueryResults.output_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.QueryResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.schema.FieldData fields_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fields_data(i), target, stream);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryResults.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // repeated string output_fields = 4;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QueryResults.output_fields");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.QueryResults)
  return target;
}

size_t QueryResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.QueryResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.schema.FieldData fields_data = 2;
  total_size += 1UL * this->_internal_fields_data_size();
  for (const auto& msg : this->fields_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string output_fields = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_fields_.size());
  for (int i = 0, n = output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_fields_.Get(i));
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.QueryResults)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.QueryResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.QueryResults)
    MergeFrom(*source);
  }
}

void QueryResults::MergeFrom(const QueryResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.QueryResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_data_.MergeFrom(from.fields_data_);
  output_fields_.MergeFrom(from.output_fields_);
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void QueryResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.QueryResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResults::CopyFrom(const QueryResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.QueryResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResults::IsInitialized() const {
  return true;
}

void QueryResults::InternalSwap(QueryResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_data_.InternalSwap(&other->fields_data_);
  output_fields_.InternalSwap(&other->output_fields_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VectorIDs::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_VectorIDs_default_instance_._instance.get_mutable()->id_array_ = const_cast< ::milvus::proto::schema::IDs*>(
      ::milvus::proto::schema::IDs::internal_default_instance());
}
class VectorIDs::_Internal {
 public:
  static const ::milvus::proto::schema::IDs& id_array(const VectorIDs* msg);
};

const ::milvus::proto::schema::IDs&
VectorIDs::_Internal::id_array(const VectorIDs* msg) {
  return *msg->id_array_;
}
void VectorIDs::clear_id_array() {
  if (GetArena() == nullptr && id_array_ != nullptr) {
    delete id_array_;
  }
  id_array_ = nullptr;
}
VectorIDs::VectorIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.VectorIDs)
}
VectorIDs::VectorIDs(const VectorIDs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_names_(from.partition_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_name().empty()) {
    field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_name(),
      GetArena());
  }
  if (from._internal_has_id_array()) {
    id_array_ = new ::milvus::proto::schema::IDs(*from.id_array_);
  } else {
    id_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.VectorIDs)
}

void VectorIDs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorIDs_milvus_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_array_ = nullptr;
}

VectorIDs::~VectorIDs() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.VectorIDs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorIDs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_array_;
}

void VectorIDs::ArenaDtor(void* object) {
  VectorIDs* _this = reinterpret_cast< VectorIDs* >(object);
  (void)_this;
}
void VectorIDs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorIDs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorIDs& VectorIDs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorIDs_milvus_2eproto.base);
  return *internal_default_instance();
}


void VectorIDs::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.VectorIDs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && id_array_ != nullptr) {
    delete id_array_;
  }
  id_array_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorIDs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string collection_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.VectorIDs.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.VectorIDs.field_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.schema.IDs id_array = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.VectorIDs.partition_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorIDs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.VectorIDs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection_name = 1;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.VectorIDs.collection_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collection_name(), target);
  }

  // string field_name = 2;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.VectorIDs.field_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field_name(), target);
  }

  // .milvus.proto.schema.IDs id_array = 3;
  if (this->has_id_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::id_array(this), target, stream);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.VectorIDs.partition_names");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.VectorIDs)
  return target;
}

size_t VectorIDs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.VectorIDs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(partition_names_.size());
  for (int i = 0, n = partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      partition_names_.Get(i));
  }

  // string collection_name = 1;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string field_name = 2;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // .milvus.proto.schema.IDs id_array = 3;
  if (this->has_id_array()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorIDs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.VectorIDs)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorIDs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorIDs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.VectorIDs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.VectorIDs)
    MergeFrom(*source);
  }
}

void VectorIDs::MergeFrom(const VectorIDs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.VectorIDs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.field_name().size() > 0) {
    _internal_set_field_name(from._internal_field_name());
  }
  if (from.has_id_array()) {
    _internal_mutable_id_array()->::milvus::proto::schema::IDs::MergeFrom(from._internal_id_array());
  }
}

void VectorIDs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.VectorIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorIDs::CopyFrom(const VectorIDs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.VectorIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorIDs::IsInitialized() const {
  return true;
}

void VectorIDs::InternalSwap(VectorIDs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_names_.InternalSwap(&other->partition_names_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_array_, other->id_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorIDs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VectorsArray::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_VectorsArray_default_instance_.id_array_ = const_cast< ::milvus::proto::milvus::VectorIDs*>(
      ::milvus::proto::milvus::VectorIDs::internal_default_instance());
  ::milvus::proto::milvus::_VectorsArray_default_instance_.data_array_ = const_cast< ::milvus::proto::schema::VectorField*>(
      ::milvus::proto::schema::VectorField::internal_default_instance());
}
class VectorsArray::_Internal {
 public:
  static const ::milvus::proto::milvus::VectorIDs& id_array(const VectorsArray* msg);
  static const ::milvus::proto::schema::VectorField& data_array(const VectorsArray* msg);
};

const ::milvus::proto::milvus::VectorIDs&
VectorsArray::_Internal::id_array(const VectorsArray* msg) {
  return *msg->array_.id_array_;
}
const ::milvus::proto::schema::VectorField&
VectorsArray::_Internal::data_array(const VectorsArray* msg) {
  return *msg->array_.data_array_;
}
void VectorsArray::set_allocated_id_array(::milvus::proto::milvus::VectorIDs* id_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_array();
  if (id_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id_array);
    if (message_arena != submessage_arena) {
      id_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_array, submessage_arena);
    }
    set_has_id_array();
    array_.id_array_ = id_array;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.VectorsArray.id_array)
}
void VectorsArray::set_allocated_data_array(::milvus::proto::schema::VectorField* data_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_array();
  if (data_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_array)->GetArena();
    if (message_arena != submessage_arena) {
      data_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_array, submessage_arena);
    }
    set_has_data_array();
    array_.data_array_ = data_array;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.VectorsArray.data_array)
}
void VectorsArray::clear_data_array() {
  if (_internal_has_data_array()) {
    if (GetArena() == nullptr) {
      delete array_.data_array_;
    }
    clear_has_array();
  }
}
VectorsArray::VectorsArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.VectorsArray)
}
VectorsArray::VectorsArray(const VectorsArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_array();
  switch (from.array_case()) {
    case kIdArray: {
      _internal_mutable_id_array()->::milvus::proto::milvus::VectorIDs::MergeFrom(from._internal_id_array());
      break;
    }
    case kDataArray: {
      _internal_mutable_data_array()->::milvus::proto::schema::VectorField::MergeFrom(from._internal_data_array());
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.VectorsArray)
}

void VectorsArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorsArray_milvus_2eproto.base);
  clear_has_array();
}

VectorsArray::~VectorsArray() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.VectorsArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorsArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_array()) {
    clear_array();
  }
}

void VectorsArray::ArenaDtor(void* object) {
  VectorsArray* _this = reinterpret_cast< VectorsArray* >(object);
  (void)_this;
}
void VectorsArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorsArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorsArray& VectorsArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorsArray_milvus_2eproto.base);
  return *internal_default_instance();
}


void VectorsArray::clear_array() {
// @@protoc_insertion_point(one_of_clear_start:milvus.proto.milvus.VectorsArray)
  switch (array_case()) {
    case kIdArray: {
      if (GetArena() == nullptr) {
        delete array_.id_array_;
      }
      break;
    }
    case kDataArray: {
      if (GetArena() == nullptr) {
        delete array_.data_array_;
      }
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARRAY_NOT_SET;
}


void VectorsArray::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.VectorsArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_array();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorsArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.milvus.VectorIDs id_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.schema.VectorField data_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorsArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.VectorsArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.VectorIDs id_array = 1;
  if (_internal_has_id_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id_array(this), target, stream);
  }

  // .milvus.proto.schema.VectorField data_array = 2;
  if (_internal_has_data_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.VectorsArray)
  return target;
}

size_t VectorsArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.VectorsArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (array_case()) {
    // .milvus.proto.milvus.VectorIDs id_array = 1;
    case kIdArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *array_.id_array_);
      break;
    }
    // .milvus.proto.schema.VectorField data_array = 2;
    case kDataArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *array_.data_array_);
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorsArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.VectorsArray)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorsArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorsArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.VectorsArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.VectorsArray)
    MergeFrom(*source);
  }
}

void VectorsArray::MergeFrom(const VectorsArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.VectorsArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.array_case()) {
    case kIdArray: {
      _internal_mutable_id_array()->::milvus::proto::milvus::VectorIDs::MergeFrom(from._internal_id_array());
      break;
    }
    case kDataArray: {
      _internal_mutable_data_array()->::milvus::proto::schema::VectorField::MergeFrom(from._internal_data_array());
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
}

void VectorsArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.VectorsArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorsArray::CopyFrom(const VectorsArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.VectorsArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorsArray::IsInitialized() const {
  return true;
}

void VectorsArray::InternalSwap(VectorsArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(array_, other->array_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorsArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalcDistanceRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CalcDistanceRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
  ::milvus::proto::milvus::_CalcDistanceRequest_default_instance_._instance.get_mutable()->op_left_ = const_cast< ::milvus::proto::milvus::VectorsArray*>(
      ::milvus::proto::milvus::VectorsArray::internal_default_instance());
  ::milvus::proto::milvus::_CalcDistanceRequest_default_instance_._instance.get_mutable()->op_right_ = const_cast< ::milvus::proto::milvus::VectorsArray*>(
      ::milvus::proto::milvus::VectorsArray::internal_default_instance());
}
class CalcDistanceRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CalcDistanceRequest* msg);
  static const ::milvus::proto::milvus::VectorsArray& op_left(const CalcDistanceRequest* msg);
  static const ::milvus::proto::milvus::VectorsArray& op_right(const CalcDistanceRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CalcDistanceRequest::_Internal::base(const CalcDistanceRequest* msg) {
  return *msg->base_;
}
const ::milvus::proto::milvus::VectorsArray&
CalcDistanceRequest::_Internal::op_left(const CalcDistanceRequest* msg) {
  return *msg->op_left_;
}
const ::milvus::proto::milvus::VectorsArray&
CalcDistanceRequest::_Internal::op_right(const CalcDistanceRequest* msg) {
  return *msg->op_right_;
}
void CalcDistanceRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void CalcDistanceRequest::clear_params() {
  params_.Clear();
}
CalcDistanceRequest::CalcDistanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CalcDistanceRequest)
}
CalcDistanceRequest::CalcDistanceRequest(const CalcDistanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_op_left()) {
    op_left_ = new ::milvus::proto::milvus::VectorsArray(*from.op_left_);
  } else {
    op_left_ = nullptr;
  }
  if (from._internal_has_op_right()) {
    op_right_ = new ::milvus::proto::milvus::VectorsArray(*from.op_right_);
  } else {
    op_right_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CalcDistanceRequest)
}

void CalcDistanceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalcDistanceRequest_milvus_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_right_) -
      reinterpret_cast<char*>(&base_)) + sizeof(op_right_));
}

CalcDistanceRequest::~CalcDistanceRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CalcDistanceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalcDistanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete op_left_;
  if (this != internal_default_instance()) delete op_right_;
}

void CalcDistanceRequest::ArenaDtor(void* object) {
  CalcDistanceRequest* _this = reinterpret_cast< CalcDistanceRequest* >(object);
  (void)_this;
}
void CalcDistanceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalcDistanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalcDistanceRequest& CalcDistanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalcDistanceRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CalcDistanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CalcDistanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && op_left_ != nullptr) {
    delete op_left_;
  }
  op_left_ = nullptr;
  if (GetArena() == nullptr && op_right_ != nullptr) {
    delete op_right_;
  }
  op_right_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalcDistanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.VectorsArray op_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.VectorsArray op_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalcDistanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CalcDistanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .milvus.proto.milvus.VectorsArray op_left = 2;
  if (this->has_op_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::op_left(this), target, stream);
  }

  // .milvus.proto.milvus.VectorsArray op_right = 3;
  if (this->has_op_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::op_right(this), target, stream);
  }

  // repeated .milvus.proto.common.KeyValuePair params = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CalcDistanceRequest)
  return target;
}

size_t CalcDistanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CalcDistanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair params = 4;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .milvus.proto.milvus.VectorsArray op_left = 2;
  if (this->has_op_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_left_);
  }

  // .milvus.proto.milvus.VectorsArray op_right = 3;
  if (this->has_op_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_right_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalcDistanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CalcDistanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CalcDistanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalcDistanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CalcDistanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CalcDistanceRequest)
    MergeFrom(*source);
  }
}

void CalcDistanceRequest::MergeFrom(const CalcDistanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CalcDistanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.has_op_left()) {
    _internal_mutable_op_left()->::milvus::proto::milvus::VectorsArray::MergeFrom(from._internal_op_left());
  }
  if (from.has_op_right()) {
    _internal_mutable_op_right()->::milvus::proto::milvus::VectorsArray::MergeFrom(from._internal_op_right());
  }
}

void CalcDistanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CalcDistanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalcDistanceRequest::CopyFrom(const CalcDistanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CalcDistanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalcDistanceRequest::IsInitialized() const {
  return true;
}

void CalcDistanceRequest::InternalSwap(CalcDistanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalcDistanceRequest, op_right_)
      + sizeof(CalcDistanceRequest::op_right_)
      - PROTOBUF_FIELD_OFFSET(CalcDistanceRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CalcDistanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalcDistanceResults::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CalcDistanceResults_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
  ::milvus::proto::milvus::_CalcDistanceResults_default_instance_.int_dist_ = const_cast< ::milvus::proto::schema::IntArray*>(
      ::milvus::proto::schema::IntArray::internal_default_instance());
  ::milvus::proto::milvus::_CalcDistanceResults_default_instance_.float_dist_ = const_cast< ::milvus::proto::schema::FloatArray*>(
      ::milvus::proto::schema::FloatArray::internal_default_instance());
}
class CalcDistanceResults::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const CalcDistanceResults* msg);
  static const ::milvus::proto::schema::IntArray& int_dist(const CalcDistanceResults* msg);
  static const ::milvus::proto::schema::FloatArray& float_dist(const CalcDistanceResults* msg);
};

const ::milvus::proto::common::Status&
CalcDistanceResults::_Internal::status(const CalcDistanceResults* msg) {
  return *msg->status_;
}
const ::milvus::proto::schema::IntArray&
CalcDistanceResults::_Internal::int_dist(const CalcDistanceResults* msg) {
  return *msg->array_.int_dist_;
}
const ::milvus::proto::schema::FloatArray&
CalcDistanceResults::_Internal::float_dist(const CalcDistanceResults* msg) {
  return *msg->array_.float_dist_;
}
void CalcDistanceResults::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void CalcDistanceResults::set_allocated_int_dist(::milvus::proto::schema::IntArray* int_dist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_array();
  if (int_dist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int_dist)->GetArena();
    if (message_arena != submessage_arena) {
      int_dist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_dist, submessage_arena);
    }
    set_has_int_dist();
    array_.int_dist_ = int_dist;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceResults.int_dist)
}
void CalcDistanceResults::clear_int_dist() {
  if (_internal_has_int_dist()) {
    if (GetArena() == nullptr) {
      delete array_.int_dist_;
    }
    clear_has_array();
  }
}
void CalcDistanceResults::set_allocated_float_dist(::milvus::proto::schema::FloatArray* float_dist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_array();
  if (float_dist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_dist)->GetArena();
    if (message_arena != submessage_arena) {
      float_dist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_dist, submessage_arena);
    }
    set_has_float_dist();
    array_.float_dist_ = float_dist;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.milvus.CalcDistanceResults.float_dist)
}
void CalcDistanceResults::clear_float_dist() {
  if (_internal_has_float_dist()) {
    if (GetArena() == nullptr) {
      delete array_.float_dist_;
    }
    clear_has_array();
  }
}
CalcDistanceResults::CalcDistanceResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CalcDistanceResults)
}
CalcDistanceResults::CalcDistanceResults(const CalcDistanceResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  clear_has_array();
  switch (from.array_case()) {
    case kIntDist: {
      _internal_mutable_int_dist()->::milvus::proto::schema::IntArray::MergeFrom(from._internal_int_dist());
      break;
    }
    case kFloatDist: {
      _internal_mutable_float_dist()->::milvus::proto::schema::FloatArray::MergeFrom(from._internal_float_dist());
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CalcDistanceResults)
}

void CalcDistanceResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalcDistanceResults_milvus_2eproto.base);
  status_ = nullptr;
  clear_has_array();
}

CalcDistanceResults::~CalcDistanceResults() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CalcDistanceResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalcDistanceResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (has_array()) {
    clear_array();
  }
}

void CalcDistanceResults::ArenaDtor(void* object) {
  CalcDistanceResults* _this = reinterpret_cast< CalcDistanceResults* >(object);
  (void)_this;
}
void CalcDistanceResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalcDistanceResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalcDistanceResults& CalcDistanceResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalcDistanceResults_milvus_2eproto.base);
  return *internal_default_instance();
}


void CalcDistanceResults::clear_array() {
// @@protoc_insertion_point(one_of_clear_start:milvus.proto.milvus.CalcDistanceResults)
  switch (array_case()) {
    case kIntDist: {
      if (GetArena() == nullptr) {
        delete array_.int_dist_;
      }
      break;
    }
    case kFloatDist: {
      if (GetArena() == nullptr) {
        delete array_.float_dist_;
      }
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARRAY_NOT_SET;
}


void CalcDistanceResults::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CalcDistanceResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  clear_array();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalcDistanceResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.schema.IntArray int_dist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_dist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.schema.FloatArray float_dist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_dist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalcDistanceResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CalcDistanceResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .milvus.proto.schema.IntArray int_dist = 2;
  if (_internal_has_int_dist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::int_dist(this), target, stream);
  }

  // .milvus.proto.schema.FloatArray float_dist = 3;
  if (_internal_has_float_dist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::float_dist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CalcDistanceResults)
  return target;
}

size_t CalcDistanceResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CalcDistanceResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  switch (array_case()) {
    // .milvus.proto.schema.IntArray int_dist = 2;
    case kIntDist: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *array_.int_dist_);
      break;
    }
    // .milvus.proto.schema.FloatArray float_dist = 3;
    case kFloatDist: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *array_.float_dist_);
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalcDistanceResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CalcDistanceResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CalcDistanceResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalcDistanceResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CalcDistanceResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CalcDistanceResults)
    MergeFrom(*source);
  }
}

void CalcDistanceResults::MergeFrom(const CalcDistanceResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CalcDistanceResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  switch (from.array_case()) {
    case kIntDist: {
      _internal_mutable_int_dist()->::milvus::proto::schema::IntArray::MergeFrom(from._internal_int_dist());
      break;
    }
    case kFloatDist: {
      _internal_mutable_float_dist()->::milvus::proto::schema::FloatArray::MergeFrom(from._internal_float_dist());
      break;
    }
    case ARRAY_NOT_SET: {
      break;
    }
  }
}

void CalcDistanceResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CalcDistanceResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalcDistanceResults::CopyFrom(const CalcDistanceResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CalcDistanceResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalcDistanceResults::IsInitialized() const {
  return true;
}

void CalcDistanceResults::InternalSwap(CalcDistanceResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(array_, other->array_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalcDistanceResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushAllRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_FlushAllRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class FlushAllRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const FlushAllRequest* msg);
};

const ::milvus::proto::common::MsgBase&
FlushAllRequest::_Internal::base(const FlushAllRequest* msg) {
  return *msg->base_;
}
void FlushAllRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
FlushAllRequest::FlushAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.FlushAllRequest)
}
FlushAllRequest::FlushAllRequest(const FlushAllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.FlushAllRequest)
}

void FlushAllRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushAllRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

FlushAllRequest::~FlushAllRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.FlushAllRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlushAllRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void FlushAllRequest::ArenaDtor(void* object) {
  FlushAllRequest* _this = reinterpret_cast< FlushAllRequest* >(object);
  (void)_this;
}
void FlushAllRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushAllRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushAllRequest& FlushAllRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushAllRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void FlushAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.FlushAllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushAllRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.FlushAllRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushAllRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.FlushAllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.FlushAllRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.FlushAllRequest)
  return target;
}

size_t FlushAllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.FlushAllRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushAllRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.FlushAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushAllRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushAllRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.FlushAllRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.FlushAllRequest)
    MergeFrom(*source);
  }
}

void FlushAllRequest::MergeFrom(const FlushAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.FlushAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void FlushAllRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.FlushAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushAllRequest::CopyFrom(const FlushAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.FlushAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushAllRequest::IsInitialized() const {
  return true;
}

void FlushAllRequest::InternalSwap(FlushAllRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushAllRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushAllResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_FlushAllResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class FlushAllResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const FlushAllResponse* msg);
};

const ::milvus::proto::common::Status&
FlushAllResponse::_Internal::status(const FlushAllResponse* msg) {
  return *msg->status_;
}
void FlushAllResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
FlushAllResponse::FlushAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.FlushAllResponse)
}
FlushAllResponse::FlushAllResponse(const FlushAllResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  flush_all_ts_ = from.flush_all_ts_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.FlushAllResponse)
}

void FlushAllResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushAllResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flush_all_ts_) -
      reinterpret_cast<char*>(&status_)) + sizeof(flush_all_ts_));
}

FlushAllResponse::~FlushAllResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.FlushAllResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlushAllResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void FlushAllResponse::ArenaDtor(void* object) {
  FlushAllResponse* _this = reinterpret_cast< FlushAllResponse* >(object);
  (void)_this;
}
void FlushAllResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushAllResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushAllResponse& FlushAllResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushAllResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void FlushAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.FlushAllResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  flush_all_ts_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushAllResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 flush_all_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flush_all_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushAllResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.FlushAllResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // uint64 flush_all_ts = 2;
  if (this->flush_all_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_flush_all_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.FlushAllResponse)
  return target;
}

size_t FlushAllResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.FlushAllResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint64 flush_all_ts = 2;
  if (this->flush_all_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flush_all_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushAllResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.FlushAllResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushAllResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushAllResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.FlushAllResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.FlushAllResponse)
    MergeFrom(*source);
  }
}

void FlushAllResponse::MergeFrom(const FlushAllResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.FlushAllResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.flush_all_ts() != 0) {
    _internal_set_flush_all_ts(from._internal_flush_all_ts());
  }
}

void FlushAllResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.FlushAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushAllResponse::CopyFrom(const FlushAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.FlushAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushAllResponse::IsInitialized() const {
  return true;
}

void FlushAllResponse::InternalSwap(FlushAllResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlushAllResponse, flush_all_ts_)
      + sizeof(FlushAllResponse::flush_all_ts_)
      - PROTOBUF_FIELD_OFFSET(FlushAllResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushAllResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PersistentSegmentInfo::InitAsDefaultInstance() {
}
class PersistentSegmentInfo::_Internal {
 public:
};

PersistentSegmentInfo::PersistentSegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.PersistentSegmentInfo)
}
PersistentSegmentInfo::PersistentSegmentInfo(const PersistentSegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&segmentid_, &from.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&segmentid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.PersistentSegmentInfo)
}

void PersistentSegmentInfo::SharedCtor() {
  ::memset(&segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&segmentid_)) + sizeof(state_));
}

PersistentSegmentInfo::~PersistentSegmentInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.PersistentSegmentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PersistentSegmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PersistentSegmentInfo::ArenaDtor(void* object) {
  PersistentSegmentInfo* _this = reinterpret_cast< PersistentSegmentInfo* >(object);
  (void)_this;
}
void PersistentSegmentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PersistentSegmentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistentSegmentInfo& PersistentSegmentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistentSegmentInfo_milvus_2eproto.base);
  return *internal_default_instance();
}


void PersistentSegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.PersistentSegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&segmentid_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersistentSegmentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_rows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.SegmentState state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::SegmentState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PersistentSegmentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.PersistentSegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_partitionid(), target);
  }

  // int64 num_rows = 4;
  if (this->num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_num_rows(), target);
  }

  // .milvus.proto.common.SegmentState state = 5;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.PersistentSegmentInfo)
  return target;
}

size_t PersistentSegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.PersistentSegmentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_segmentid());
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collectionid());
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_partitionid());
  }

  // int64 num_rows = 4;
  if (this->num_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_rows());
  }

  // .milvus.proto.common.SegmentState state = 5;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistentSegmentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.PersistentSegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PersistentSegmentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersistentSegmentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.PersistentSegmentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.PersistentSegmentInfo)
    MergeFrom(*source);
  }
}

void PersistentSegmentInfo::MergeFrom(const PersistentSegmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.PersistentSegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.segmentid() != 0) {
    _internal_set_segmentid(from._internal_segmentid());
  }
  if (from.collectionid() != 0) {
    _internal_set_collectionid(from._internal_collectionid());
  }
  if (from.partitionid() != 0) {
    _internal_set_partitionid(from._internal_partitionid());
  }
  if (from.num_rows() != 0) {
    _internal_set_num_rows(from._internal_num_rows());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void PersistentSegmentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.PersistentSegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistentSegmentInfo::CopyFrom(const PersistentSegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.PersistentSegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistentSegmentInfo::IsInitialized() const {
  return true;
}

void PersistentSegmentInfo::InternalSwap(PersistentSegmentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersistentSegmentInfo, state_)
      + sizeof(PersistentSegmentInfo::state_)
      - PROTOBUF_FIELD_OFFSET(PersistentSegmentInfo, segmentid_)>(
          reinterpret_cast<char*>(&segmentid_),
          reinterpret_cast<char*>(&other->segmentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistentSegmentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPersistentSegmentInfoRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetPersistentSegmentInfoRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetPersistentSegmentInfoRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetPersistentSegmentInfoRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetPersistentSegmentInfoRequest::_Internal::base(const GetPersistentSegmentInfoRequest* msg) {
  return *msg->base_;
}
void GetPersistentSegmentInfoRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetPersistentSegmentInfoRequest::GetPersistentSegmentInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
}
GetPersistentSegmentInfoRequest::GetPersistentSegmentInfoRequest(const GetPersistentSegmentInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dbname().empty()) {
    dbname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dbname(),
      GetArena());
  }
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collectionname().empty()) {
    collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collectionname(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
}

void GetPersistentSegmentInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPersistentSegmentInfoRequest_milvus_2eproto.base);
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetPersistentSegmentInfoRequest::~GetPersistentSegmentInfoRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPersistentSegmentInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dbname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetPersistentSegmentInfoRequest::ArenaDtor(void* object) {
  GetPersistentSegmentInfoRequest* _this = reinterpret_cast< GetPersistentSegmentInfoRequest* >(object);
  (void)_this;
}
void GetPersistentSegmentInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPersistentSegmentInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPersistentSegmentInfoRequest& GetPersistentSegmentInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPersistentSegmentInfoRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetPersistentSegmentInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collectionname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPersistentSegmentInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dbName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dbname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collectionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPersistentSegmentInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string dbName = 2;
  if (this->dbname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dbname().data(), static_cast<int>(this->_internal_dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dbname(), target);
  }

  // string collectionName = 3;
  if (this->collectionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectionname().data(), static_cast<int>(this->_internal_collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collectionname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  return target;
}

size_t GetPersistentSegmentInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dbName = 2;
  if (this->dbname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dbname());
  }

  // string collectionName = 3;
  if (this->collectionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionname());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPersistentSegmentInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPersistentSegmentInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPersistentSegmentInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
    MergeFrom(*source);
  }
}

void GetPersistentSegmentInfoRequest::MergeFrom(const GetPersistentSegmentInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dbname().size() > 0) {
    _internal_set_dbname(from._internal_dbname());
  }
  if (from.collectionname().size() > 0) {
    _internal_set_collectionname(from._internal_collectionname());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void GetPersistentSegmentInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersistentSegmentInfoRequest::CopyFrom(const GetPersistentSegmentInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersistentSegmentInfoRequest::IsInitialized() const {
  return true;
}

void GetPersistentSegmentInfoRequest::InternalSwap(GetPersistentSegmentInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dbname_.Swap(&other->dbname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collectionname_.Swap(&other->collectionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPersistentSegmentInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPersistentSegmentInfoResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetPersistentSegmentInfoResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetPersistentSegmentInfoResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetPersistentSegmentInfoResponse* msg);
};

const ::milvus::proto::common::Status&
GetPersistentSegmentInfoResponse::_Internal::status(const GetPersistentSegmentInfoResponse* msg) {
  return *msg->status_;
}
void GetPersistentSegmentInfoResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetPersistentSegmentInfoResponse::GetPersistentSegmentInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
}
GetPersistentSegmentInfoResponse::GetPersistentSegmentInfoResponse(const GetPersistentSegmentInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
}

void GetPersistentSegmentInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPersistentSegmentInfoResponse_milvus_2eproto.base);
  status_ = nullptr;
}

GetPersistentSegmentInfoResponse::~GetPersistentSegmentInfoResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPersistentSegmentInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetPersistentSegmentInfoResponse::ArenaDtor(void* object) {
  GetPersistentSegmentInfoResponse* _this = reinterpret_cast< GetPersistentSegmentInfoResponse* >(object);
  (void)_this;
}
void GetPersistentSegmentInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPersistentSegmentInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPersistentSegmentInfoResponse& GetPersistentSegmentInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPersistentSegmentInfoResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetPersistentSegmentInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPersistentSegmentInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPersistentSegmentInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  return target;
}

size_t GetPersistentSegmentInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPersistentSegmentInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPersistentSegmentInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPersistentSegmentInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
    MergeFrom(*source);
  }
}

void GetPersistentSegmentInfoResponse::MergeFrom(const GetPersistentSegmentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void GetPersistentSegmentInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersistentSegmentInfoResponse::CopyFrom(const GetPersistentSegmentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersistentSegmentInfoResponse::IsInitialized() const {
  return true;
}

void GetPersistentSegmentInfoResponse::InternalSwap(GetPersistentSegmentInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPersistentSegmentInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuerySegmentInfo::InitAsDefaultInstance() {
}
class QuerySegmentInfo::_Internal {
 public:
};

QuerySegmentInfo::QuerySegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodeids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.QuerySegmentInfo)
}
QuerySegmentInfo::QuerySegmentInfo(const QuerySegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodeids_(from.nodeids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  ::memcpy(&segmentid_, &from.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&segmentid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.QuerySegmentInfo)
}

void QuerySegmentInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuerySegmentInfo_milvus_2eproto.base);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&segmentid_)) + sizeof(state_));
}

QuerySegmentInfo::~QuerySegmentInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.QuerySegmentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuerySegmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuerySegmentInfo::ArenaDtor(void* object) {
  QuerySegmentInfo* _this = reinterpret_cast< QuerySegmentInfo* >(object);
  (void)_this;
}
void QuerySegmentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuerySegmentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuerySegmentInfo& QuerySegmentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuerySegmentInfo_milvus_2eproto.base);
  return *internal_default_instance();
}


void QuerySegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.QuerySegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodeids_.Clear();
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&segmentid_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySegmentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mem_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mem_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.QuerySegmentInfo.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 indexID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 nodeID = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.SegmentState state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::SegmentState>(val));
        } else goto handle_unusual;
        continue;
      // repeated int64 nodeIds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_nodeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_nodeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuerySegmentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.QuerySegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_segmentid(), target);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_partitionid(), target);
  }

  // int64 mem_size = 4;
  if (this->mem_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_mem_size(), target);
  }

  // int64 num_rows = 5;
  if (this->num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_rows(), target);
  }

  // string index_name = 6;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QuerySegmentInfo.index_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_index_name(), target);
  }

  // int64 indexID = 7;
  if (this->indexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_indexid(), target);
  }

  // int64 nodeID = 8 [deprecated = true];
  if (this->nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_nodeid(), target);
  }

  // .milvus.proto.common.SegmentState state = 9;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_state(), target);
  }

  // repeated int64 nodeIds = 10;
  {
    int byte_size = _nodeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          10, _internal_nodeids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.QuerySegmentInfo)
  return target;
}

size_t QuerySegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.QuerySegmentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 nodeIds = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->nodeids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nodeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string index_name = 6;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_segmentid());
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collectionid());
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_partitionid());
  }

  // int64 mem_size = 4;
  if (this->mem_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mem_size());
  }

  // int64 num_rows = 5;
  if (this->num_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_rows());
  }

  // int64 indexID = 7;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_indexid());
  }

  // int64 nodeID = 8 [deprecated = true];
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_nodeid());
  }

  // .milvus.proto.common.SegmentState state = 9;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuerySegmentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.QuerySegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QuerySegmentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuerySegmentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.QuerySegmentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.QuerySegmentInfo)
    MergeFrom(*source);
  }
}

void QuerySegmentInfo::MergeFrom(const QuerySegmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.QuerySegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodeids_.MergeFrom(from.nodeids_);
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.segmentid() != 0) {
    _internal_set_segmentid(from._internal_segmentid());
  }
  if (from.collectionid() != 0) {
    _internal_set_collectionid(from._internal_collectionid());
  }
  if (from.partitionid() != 0) {
    _internal_set_partitionid(from._internal_partitionid());
  }
  if (from.mem_size() != 0) {
    _internal_set_mem_size(from._internal_mem_size());
  }
  if (from.num_rows() != 0) {
    _internal_set_num_rows(from._internal_num_rows());
  }
  if (from.indexid() != 0) {
    _internal_set_indexid(from._internal_indexid());
  }
  if (from.nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void QuerySegmentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.QuerySegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySegmentInfo::CopyFrom(const QuerySegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.QuerySegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySegmentInfo::IsInitialized() const {
  return true;
}

void QuerySegmentInfo::InternalSwap(QuerySegmentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodeids_.InternalSwap(&other->nodeids_);
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuerySegmentInfo, state_)
      + sizeof(QuerySegmentInfo::state_)
      - PROTOBUF_FIELD_OFFSET(QuerySegmentInfo, segmentid_)>(
          reinterpret_cast<char*>(&segmentid_),
          reinterpret_cast<char*>(&other->segmentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySegmentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetQuerySegmentInfoRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetQuerySegmentInfoRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetQuerySegmentInfoRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetQuerySegmentInfoRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetQuerySegmentInfoRequest::_Internal::base(const GetQuerySegmentInfoRequest* msg) {
  return *msg->base_;
}
void GetQuerySegmentInfoRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetQuerySegmentInfoRequest::GetQuerySegmentInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetQuerySegmentInfoRequest)
}
GetQuerySegmentInfoRequest::GetQuerySegmentInfoRequest(const GetQuerySegmentInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dbname().empty()) {
    dbname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dbname(),
      GetArena());
  }
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collectionname().empty()) {
    collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collectionname(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetQuerySegmentInfoRequest)
}

void GetQuerySegmentInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetQuerySegmentInfoRequest_milvus_2eproto.base);
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetQuerySegmentInfoRequest::~GetQuerySegmentInfoRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetQuerySegmentInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dbname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetQuerySegmentInfoRequest::ArenaDtor(void* object) {
  GetQuerySegmentInfoRequest* _this = reinterpret_cast< GetQuerySegmentInfoRequest* >(object);
  (void)_this;
}
void GetQuerySegmentInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetQuerySegmentInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetQuerySegmentInfoRequest& GetQuerySegmentInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetQuerySegmentInfoRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetQuerySegmentInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collectionname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetQuerySegmentInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dbName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dbname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collectionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetQuerySegmentInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string dbName = 2;
  if (this->dbname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dbname().data(), static_cast<int>(this->_internal_dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dbname(), target);
  }

  // string collectionName = 3;
  if (this->collectionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectionname().data(), static_cast<int>(this->_internal_collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collectionname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  return target;
}

size_t GetQuerySegmentInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dbName = 2;
  if (this->dbname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dbname());
  }

  // string collectionName = 3;
  if (this->collectionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionname());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetQuerySegmentInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetQuerySegmentInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetQuerySegmentInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetQuerySegmentInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetQuerySegmentInfoRequest)
    MergeFrom(*source);
  }
}

void GetQuerySegmentInfoRequest::MergeFrom(const GetQuerySegmentInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dbname().size() > 0) {
    _internal_set_dbname(from._internal_dbname());
  }
  if (from.collectionname().size() > 0) {
    _internal_set_collectionname(from._internal_collectionname());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void GetQuerySegmentInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuerySegmentInfoRequest::CopyFrom(const GetQuerySegmentInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuerySegmentInfoRequest::IsInitialized() const {
  return true;
}

void GetQuerySegmentInfoRequest::InternalSwap(GetQuerySegmentInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dbname_.Swap(&other->dbname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collectionname_.Swap(&other->collectionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetQuerySegmentInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetQuerySegmentInfoResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetQuerySegmentInfoResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetQuerySegmentInfoResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetQuerySegmentInfoResponse* msg);
};

const ::milvus::proto::common::Status&
GetQuerySegmentInfoResponse::_Internal::status(const GetQuerySegmentInfoResponse* msg) {
  return *msg->status_;
}
void GetQuerySegmentInfoResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetQuerySegmentInfoResponse::GetQuerySegmentInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetQuerySegmentInfoResponse)
}
GetQuerySegmentInfoResponse::GetQuerySegmentInfoResponse(const GetQuerySegmentInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetQuerySegmentInfoResponse)
}

void GetQuerySegmentInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetQuerySegmentInfoResponse_milvus_2eproto.base);
  status_ = nullptr;
}

GetQuerySegmentInfoResponse::~GetQuerySegmentInfoResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetQuerySegmentInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetQuerySegmentInfoResponse::ArenaDtor(void* object) {
  GetQuerySegmentInfoResponse* _this = reinterpret_cast< GetQuerySegmentInfoResponse* >(object);
  (void)_this;
}
void GetQuerySegmentInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetQuerySegmentInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetQuerySegmentInfoResponse& GetQuerySegmentInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetQuerySegmentInfoResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetQuerySegmentInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetQuerySegmentInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetQuerySegmentInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  return target;
}

size_t GetQuerySegmentInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetQuerySegmentInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetQuerySegmentInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetQuerySegmentInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetQuerySegmentInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetQuerySegmentInfoResponse)
    MergeFrom(*source);
  }
}

void GetQuerySegmentInfoResponse::MergeFrom(const GetQuerySegmentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void GetQuerySegmentInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuerySegmentInfoResponse::CopyFrom(const GetQuerySegmentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuerySegmentInfoResponse::IsInitialized() const {
  return true;
}

void GetQuerySegmentInfoResponse::InternalSwap(GetQuerySegmentInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetQuerySegmentInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DummyRequest::InitAsDefaultInstance() {
}
class DummyRequest::_Internal {
 public:
};

DummyRequest::DummyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DummyRequest)
}
DummyRequest::DummyRequest(const DummyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_type().empty()) {
    request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DummyRequest)
}

void DummyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DummyRequest_milvus_2eproto.base);
  request_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DummyRequest::~DummyRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DummyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DummyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DummyRequest::ArenaDtor(void* object) {
  DummyRequest* _this = reinterpret_cast< DummyRequest* >(object);
  (void)_this;
}
void DummyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DummyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DummyRequest& DummyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DummyRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DummyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DummyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DummyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DummyRequest.request_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DummyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DummyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_type = 1;
  if (this->request_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_type().data(), static_cast<int>(this->_internal_request_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DummyRequest.request_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DummyRequest)
  return target;
}

size_t DummyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DummyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_type = 1;
  if (this->request_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DummyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DummyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DummyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DummyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DummyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DummyRequest)
    MergeFrom(*source);
  }
}

void DummyRequest::MergeFrom(const DummyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DummyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_type().size() > 0) {
    _internal_set_request_type(from._internal_request_type());
  }
}

void DummyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DummyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyRequest::CopyFrom(const DummyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DummyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyRequest::IsInitialized() const {
  return true;
}

void DummyRequest::InternalSwap(DummyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_type_.Swap(&other->request_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DummyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DummyResponse::InitAsDefaultInstance() {
}
class DummyResponse::_Internal {
 public:
};

DummyResponse::DummyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DummyResponse)
}
DummyResponse::DummyResponse(const DummyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_response(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DummyResponse)
}

void DummyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DummyResponse_milvus_2eproto.base);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DummyResponse::~DummyResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DummyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DummyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DummyResponse::ArenaDtor(void* object) {
  DummyResponse* _this = reinterpret_cast< DummyResponse* >(object);
  (void)_this;
}
void DummyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DummyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DummyResponse& DummyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DummyResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void DummyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DummyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DummyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DummyResponse.response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DummyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DummyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DummyResponse.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DummyResponse)
  return target;
}

size_t DummyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DummyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DummyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DummyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DummyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DummyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DummyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DummyResponse)
    MergeFrom(*source);
  }
}

void DummyResponse::MergeFrom(const DummyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DummyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {
    _internal_set_response(from._internal_response());
  }
}

void DummyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DummyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyResponse::CopyFrom(const DummyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DummyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyResponse::IsInitialized() const {
  return true;
}

void DummyResponse::InternalSwap(DummyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DummyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterLinkRequest::InitAsDefaultInstance() {
}
class RegisterLinkRequest::_Internal {
 public:
};

RegisterLinkRequest::RegisterLinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.RegisterLinkRequest)
}
RegisterLinkRequest::RegisterLinkRequest(const RegisterLinkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RegisterLinkRequest)
}

void RegisterLinkRequest::SharedCtor() {
}

RegisterLinkRequest::~RegisterLinkRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.RegisterLinkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterLinkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegisterLinkRequest::ArenaDtor(void* object) {
  RegisterLinkRequest* _this = reinterpret_cast< RegisterLinkRequest* >(object);
  (void)_this;
}
void RegisterLinkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterLinkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterLinkRequest& RegisterLinkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterLinkRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void RegisterLinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.RegisterLinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterLinkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterLinkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.RegisterLinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.RegisterLinkRequest)
  return target;
}

size_t RegisterLinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.RegisterLinkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterLinkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.RegisterLinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterLinkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterLinkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.RegisterLinkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.RegisterLinkRequest)
    MergeFrom(*source);
  }
}

void RegisterLinkRequest::MergeFrom(const RegisterLinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.RegisterLinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RegisterLinkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.RegisterLinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterLinkRequest::CopyFrom(const RegisterLinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.RegisterLinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterLinkRequest::IsInitialized() const {
  return true;
}

void RegisterLinkRequest::InternalSwap(RegisterLinkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterLinkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterLinkResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_RegisterLinkResponse_default_instance_._instance.get_mutable()->address_ = const_cast< ::milvus::proto::common::Address*>(
      ::milvus::proto::common::Address::internal_default_instance());
  ::milvus::proto::milvus::_RegisterLinkResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class RegisterLinkResponse::_Internal {
 public:
  static const ::milvus::proto::common::Address& address(const RegisterLinkResponse* msg);
  static const ::milvus::proto::common::Status& status(const RegisterLinkResponse* msg);
};

const ::milvus::proto::common::Address&
RegisterLinkResponse::_Internal::address(const RegisterLinkResponse* msg) {
  return *msg->address_;
}
const ::milvus::proto::common::Status&
RegisterLinkResponse::_Internal::status(const RegisterLinkResponse* msg) {
  return *msg->status_;
}
void RegisterLinkResponse::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
void RegisterLinkResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
RegisterLinkResponse::RegisterLinkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.RegisterLinkResponse)
}
RegisterLinkResponse::RegisterLinkResponse(const RegisterLinkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    address_ = new ::milvus::proto::common::Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RegisterLinkResponse)
}

void RegisterLinkResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterLinkResponse_milvus_2eproto.base);
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&address_)) + sizeof(status_));
}

RegisterLinkResponse::~RegisterLinkResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.RegisterLinkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterLinkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete status_;
}

void RegisterLinkResponse::ArenaDtor(void* object) {
  RegisterLinkResponse* _this = reinterpret_cast< RegisterLinkResponse* >(object);
  (void)_this;
}
void RegisterLinkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterLinkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterLinkResponse& RegisterLinkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterLinkResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void RegisterLinkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.RegisterLinkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterLinkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Address address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterLinkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.RegisterLinkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Address address = 1;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::address(this), target, stream);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.RegisterLinkResponse)
  return target;
}

size_t RegisterLinkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.RegisterLinkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Address address = 1;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterLinkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.RegisterLinkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterLinkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterLinkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.RegisterLinkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.RegisterLinkResponse)
    MergeFrom(*source);
  }
}

void RegisterLinkResponse::MergeFrom(const RegisterLinkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.RegisterLinkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _internal_mutable_address()->::milvus::proto::common::Address::MergeFrom(from._internal_address());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void RegisterLinkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.RegisterLinkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterLinkResponse::CopyFrom(const RegisterLinkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.RegisterLinkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterLinkResponse::IsInitialized() const {
  return true;
}

void RegisterLinkResponse::InternalSwap(RegisterLinkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterLinkResponse, status_)
      + sizeof(RegisterLinkResponse::status_)
      - PROTOBUF_FIELD_OFFSET(RegisterLinkResponse, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterLinkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMetricsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetMetricsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetMetricsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetMetricsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetMetricsRequest::_Internal::base(const GetMetricsRequest* msg) {
  return *msg->base_;
}
void GetMetricsRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetMetricsRequest::GetMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetMetricsRequest)
}
GetMetricsRequest::GetMetricsRequest(const GetMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request().empty()) {
    request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetMetricsRequest)
}

void GetMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMetricsRequest_milvus_2eproto.base);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetMetricsRequest::~GetMetricsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetMetricsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetMetricsRequest::ArenaDtor(void* object) {
  GetMetricsRequest* _this = reinterpret_cast< GetMetricsRequest* >(object);
  (void)_this;
}
void GetMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMetricsRequest& GetMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMetricsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetMetricsRequest.request"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string request = 2;
  if (this->request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request().data(), static_cast<int>(this->_internal_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetMetricsRequest.request");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetMetricsRequest)
  return target;
}

size_t GetMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request = 2;
  if (this->request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetMetricsRequest)
    MergeFrom(*source);
  }
}

void GetMetricsRequest::MergeFrom(const GetMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request().size() > 0) {
    _internal_set_request(from._internal_request());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void GetMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetricsRequest::CopyFrom(const GetMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetricsRequest::IsInitialized() const {
  return true;
}

void GetMetricsRequest::InternalSwap(GetMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_.Swap(&other->request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMetricsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetMetricsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetMetricsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetMetricsResponse* msg);
};

const ::milvus::proto::common::Status&
GetMetricsResponse::_Internal::status(const GetMetricsResponse* msg) {
  return *msg->status_;
}
void GetMetricsResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetMetricsResponse::GetMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetMetricsResponse)
}
GetMetricsResponse::GetMetricsResponse(const GetMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_response(),
      GetArena());
  }
  component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_component_name().empty()) {
    component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_component_name(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetMetricsResponse)
}

void GetMetricsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMetricsResponse_milvus_2eproto.base);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

GetMetricsResponse::~GetMetricsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetMetricsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  component_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GetMetricsResponse::ArenaDtor(void* object) {
  GetMetricsResponse* _this = reinterpret_cast< GetMetricsResponse* >(object);
  (void)_this;
}
void GetMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMetricsResponse& GetMetricsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMetricsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  component_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetMetricsResponse.response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string component_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_component_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetMetricsResponse.component_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string response = 2;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetMetricsResponse.response");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_response(), target);
  }

  // string component_name = 3;
  if (this->component_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetMetricsResponse.component_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_component_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetMetricsResponse)
  return target;
}

size_t GetMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 2;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  // string component_name = 3;
  if (this->component_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_name());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetMetricsResponse)
    MergeFrom(*source);
  }
}

void GetMetricsResponse::MergeFrom(const GetMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {
    _internal_set_response(from._internal_response());
  }
  if (from.component_name().size() > 0) {
    _internal_set_component_name(from._internal_component_name());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void GetMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetricsResponse::CopyFrom(const GetMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetricsResponse::IsInitialized() const {
  return true;
}

void GetMetricsResponse::InternalSwap(GetMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  component_name_.Swap(&other->component_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComponentInfo::InitAsDefaultInstance() {
}
class ComponentInfo::_Internal {
 public:
};

void ComponentInfo::clear_extra_info() {
  extra_info_.Clear();
}
ComponentInfo::ComponentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  extra_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ComponentInfo)
}
ComponentInfo::ComponentInfo(const ComponentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extra_info_(from.extra_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role().empty()) {
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_role(),
      GetArena());
  }
  ::memcpy(&nodeid_, &from.nodeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_code_) -
    reinterpret_cast<char*>(&nodeid_)) + sizeof(state_code_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ComponentInfo)
}

void ComponentInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComponentInfo_milvus_2eproto.base);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_code_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(state_code_));
}

ComponentInfo::~ComponentInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ComponentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComponentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComponentInfo::ArenaDtor(void* object) {
  ComponentInfo* _this = reinterpret_cast< ComponentInfo* >(object);
  (void)_this;
}
void ComponentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComponentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentInfo& ComponentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComponentInfo_milvus_2eproto.base);
  return *internal_default_instance();
}


void ComponentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ComponentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_info_.Clear();
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_code_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(state_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 nodeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ComponentInfo.role"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.StateCode state_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state_code(static_cast<::milvus::proto::common::StateCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair extra_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ComponentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 nodeID = 1;
  if (this->nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_nodeid(), target);
  }

  // string role = 2;
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ComponentInfo.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  // .milvus.proto.common.StateCode state_code = 3;
  if (this->state_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state_code(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair extra_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_extra_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ComponentInfo)
  return target;
}

size_t ComponentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ComponentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair extra_info = 4;
  total_size += 1UL * this->_internal_extra_info_size();
  for (const auto& msg : this->extra_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string role = 2;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // int64 nodeID = 1;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_nodeid());
  }

  // .milvus.proto.common.StateCode state_code = 3;
  if (this->state_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ComponentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ComponentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ComponentInfo)
    MergeFrom(*source);
  }
}

void ComponentInfo::MergeFrom(const ComponentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ComponentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_info_.MergeFrom(from.extra_info_);
  if (from.role().size() > 0) {
    _internal_set_role(from._internal_role());
  }
  if (from.nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from.state_code() != 0) {
    _internal_set_state_code(from._internal_state_code());
  }
}

void ComponentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentInfo::CopyFrom(const ComponentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentInfo::IsInitialized() const {
  return true;
}

void ComponentInfo::InternalSwap(ComponentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  extra_info_.InternalSwap(&other->extra_info_);
  role_.Swap(&other->role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentInfo, state_code_)
      + sizeof(ComponentInfo::state_code_)
      - PROTOBUF_FIELD_OFFSET(ComponentInfo, nodeid_)>(
          reinterpret_cast<char*>(&nodeid_),
          reinterpret_cast<char*>(&other->nodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComponentStates::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ComponentStates_default_instance_._instance.get_mutable()->state_ = const_cast< ::milvus::proto::milvus::ComponentInfo*>(
      ::milvus::proto::milvus::ComponentInfo::internal_default_instance());
  ::milvus::proto::milvus::_ComponentStates_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ComponentStates::_Internal {
 public:
  static const ::milvus::proto::milvus::ComponentInfo& state(const ComponentStates* msg);
  static const ::milvus::proto::common::Status& status(const ComponentStates* msg);
};

const ::milvus::proto::milvus::ComponentInfo&
ComponentStates::_Internal::state(const ComponentStates* msg) {
  return *msg->state_;
}
const ::milvus::proto::common::Status&
ComponentStates::_Internal::status(const ComponentStates* msg) {
  return *msg->status_;
}
void ComponentStates::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ComponentStates::ComponentStates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subcomponent_states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ComponentStates)
}
ComponentStates::ComponentStates(const ComponentStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subcomponent_states_(from.subcomponent_states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::milvus::proto::milvus::ComponentInfo(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ComponentStates)
}

void ComponentStates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComponentStates_milvus_2eproto.base);
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&state_)) + sizeof(status_));
}

ComponentStates::~ComponentStates() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ComponentStates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComponentStates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete status_;
}

void ComponentStates::ArenaDtor(void* object) {
  ComponentStates* _this = reinterpret_cast< ComponentStates* >(object);
  (void)_this;
}
void ComponentStates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComponentStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentStates& ComponentStates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComponentStates_milvus_2eproto.base);
  return *internal_default_instance();
}


void ComponentStates::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ComponentStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subcomponent_states_.Clear();
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentStates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.milvus.ComponentInfo state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.ComponentInfo subcomponent_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subcomponent_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentStates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ComponentStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.ComponentInfo state = 1;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  // repeated .milvus.proto.milvus.ComponentInfo subcomponent_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subcomponent_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_subcomponent_states(i), target, stream);
  }

  // .milvus.proto.common.Status status = 3;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ComponentStates)
  return target;
}

size_t ComponentStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ComponentStates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.ComponentInfo subcomponent_states = 2;
  total_size += 1UL * this->_internal_subcomponent_states_size();
  for (const auto& msg : this->subcomponent_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.milvus.ComponentInfo state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .milvus.proto.common.Status status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentStates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ComponentStates)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentStates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentStates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ComponentStates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ComponentStates)
    MergeFrom(*source);
  }
}

void ComponentStates::MergeFrom(const ComponentStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ComponentStates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subcomponent_states_.MergeFrom(from.subcomponent_states_);
  if (from.has_state()) {
    _internal_mutable_state()->::milvus::proto::milvus::ComponentInfo::MergeFrom(from._internal_state());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ComponentStates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ComponentStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentStates::CopyFrom(const ComponentStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ComponentStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentStates::IsInitialized() const {
  return true;
}

void ComponentStates::InternalSwap(ComponentStates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subcomponent_states_.InternalSwap(&other->subcomponent_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentStates, status_)
      + sizeof(ComponentStates::status_)
      - PROTOBUF_FIELD_OFFSET(ComponentStates, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentStates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetComponentStatesRequest::InitAsDefaultInstance() {
}
class GetComponentStatesRequest::_Internal {
 public:
};

GetComponentStatesRequest::GetComponentStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetComponentStatesRequest)
}
GetComponentStatesRequest::GetComponentStatesRequest(const GetComponentStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetComponentStatesRequest)
}

void GetComponentStatesRequest::SharedCtor() {
}

GetComponentStatesRequest::~GetComponentStatesRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetComponentStatesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetComponentStatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetComponentStatesRequest::ArenaDtor(void* object) {
  GetComponentStatesRequest* _this = reinterpret_cast< GetComponentStatesRequest* >(object);
  (void)_this;
}
void GetComponentStatesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetComponentStatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetComponentStatesRequest& GetComponentStatesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetComponentStatesRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetComponentStatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetComponentStatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetComponentStatesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetComponentStatesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetComponentStatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetComponentStatesRequest)
  return target;
}

size_t GetComponentStatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetComponentStatesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetComponentStatesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetComponentStatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetComponentStatesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetComponentStatesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetComponentStatesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetComponentStatesRequest)
    MergeFrom(*source);
  }
}

void GetComponentStatesRequest::MergeFrom(const GetComponentStatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetComponentStatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetComponentStatesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetComponentStatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetComponentStatesRequest::CopyFrom(const GetComponentStatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetComponentStatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetComponentStatesRequest::IsInitialized() const {
  return true;
}

void GetComponentStatesRequest::InternalSwap(GetComponentStatesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetComponentStatesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadBalanceRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_LoadBalanceRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class LoadBalanceRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const LoadBalanceRequest* msg);
};

const ::milvus::proto::common::MsgBase&
LoadBalanceRequest::_Internal::base(const LoadBalanceRequest* msg) {
  return *msg->base_;
}
void LoadBalanceRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
LoadBalanceRequest::LoadBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dst_nodeids_(arena),
  sealed_segmentids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.LoadBalanceRequest)
}
LoadBalanceRequest::LoadBalanceRequest(const LoadBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dst_nodeids_(from.dst_nodeids_),
      sealed_segmentids_(from.sealed_segmentids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collectionname().empty()) {
    collectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collectionname(),
      GetArena());
  }
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  src_nodeid_ = from.src_nodeid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.LoadBalanceRequest)
}

void LoadBalanceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadBalanceRequest_milvus_2eproto.base);
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&src_nodeid_) -
      reinterpret_cast<char*>(&base_)) + sizeof(src_nodeid_));
}

LoadBalanceRequest::~LoadBalanceRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.LoadBalanceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadBalanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collectionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void LoadBalanceRequest::ArenaDtor(void* object) {
  LoadBalanceRequest* _this = reinterpret_cast< LoadBalanceRequest* >(object);
  (void)_this;
}
void LoadBalanceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadBalanceRequest& LoadBalanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadBalanceRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void LoadBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.LoadBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dst_nodeids_.Clear();
  sealed_segmentids_.Clear();
  collectionname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  src_nodeid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadBalanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 src_nodeID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          src_nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 dst_nodeIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dst_nodeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_dst_nodeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 sealed_segmentIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sealed_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_sealed_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collectionName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_collectionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.LoadBalanceRequest.collectionName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.LoadBalanceRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadBalanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.LoadBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // int64 src_nodeID = 2;
  if (this->src_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_src_nodeid(), target);
  }

  // repeated int64 dst_nodeIDs = 3;
  {
    int byte_size = _dst_nodeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_dst_nodeids(), byte_size, target);
    }
  }

  // repeated int64 sealed_segmentIDs = 4;
  {
    int byte_size = _sealed_segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_sealed_segmentids(), byte_size, target);
    }
  }

  // string collectionName = 5;
  if (this->collectionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectionname().data(), static_cast<int>(this->_internal_collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadBalanceRequest.collectionName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_collectionname(), target);
  }

  // string db_name = 6;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadBalanceRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.LoadBalanceRequest)
  return target;
}

size_t LoadBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.LoadBalanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dst_nodeIDs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dst_nodeids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dst_nodeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 sealed_segmentIDs = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->sealed_segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sealed_segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string collectionName = 5;
  if (this->collectionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionname());
  }

  // string db_name = 6;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 src_nodeID = 2;
  if (this->src_nodeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_src_nodeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadBalanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.LoadBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadBalanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadBalanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.LoadBalanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.LoadBalanceRequest)
    MergeFrom(*source);
  }
}

void LoadBalanceRequest::MergeFrom(const LoadBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.LoadBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dst_nodeids_.MergeFrom(from.dst_nodeids_);
  sealed_segmentids_.MergeFrom(from.sealed_segmentids_);
  if (from.collectionname().size() > 0) {
    _internal_set_collectionname(from._internal_collectionname());
  }
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.src_nodeid() != 0) {
    _internal_set_src_nodeid(from._internal_src_nodeid());
  }
}

void LoadBalanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.LoadBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadBalanceRequest::CopyFrom(const LoadBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.LoadBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadBalanceRequest::IsInitialized() const {
  return true;
}

void LoadBalanceRequest::InternalSwap(LoadBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dst_nodeids_.InternalSwap(&other->dst_nodeids_);
  sealed_segmentids_.InternalSwap(&other->sealed_segmentids_);
  collectionname_.Swap(&other->collectionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadBalanceRequest, src_nodeid_)
      + sizeof(LoadBalanceRequest::src_nodeid_)
      - PROTOBUF_FIELD_OFFSET(LoadBalanceRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadBalanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualCompactionRequest::InitAsDefaultInstance() {
}
class ManualCompactionRequest::_Internal {
 public:
};

ManualCompactionRequest::ManualCompactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ManualCompactionRequest)
}
ManualCompactionRequest::ManualCompactionRequest(const ManualCompactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&collectionid_, &from.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timetravel_) -
    reinterpret_cast<char*>(&collectionid_)) + sizeof(timetravel_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ManualCompactionRequest)
}

void ManualCompactionRequest::SharedCtor() {
  ::memset(&collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timetravel_) -
      reinterpret_cast<char*>(&collectionid_)) + sizeof(timetravel_));
}

ManualCompactionRequest::~ManualCompactionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ManualCompactionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManualCompactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ManualCompactionRequest::ArenaDtor(void* object) {
  ManualCompactionRequest* _this = reinterpret_cast< ManualCompactionRequest* >(object);
  (void)_this;
}
void ManualCompactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualCompactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualCompactionRequest& ManualCompactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualCompactionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ManualCompactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ManualCompactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timetravel_) -
      reinterpret_cast<char*>(&collectionid_)) + sizeof(timetravel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualCompactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 collectionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timetravel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timetravel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualCompactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ManualCompactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_collectionid(), target);
  }

  // uint64 timetravel = 2;
  if (this->timetravel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timetravel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ManualCompactionRequest)
  return target;
}

size_t ManualCompactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ManualCompactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 collectionID = 1;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collectionid());
  }

  // uint64 timetravel = 2;
  if (this->timetravel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timetravel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualCompactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ManualCompactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualCompactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualCompactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ManualCompactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ManualCompactionRequest)
    MergeFrom(*source);
  }
}

void ManualCompactionRequest::MergeFrom(const ManualCompactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ManualCompactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collectionid() != 0) {
    _internal_set_collectionid(from._internal_collectionid());
  }
  if (from.timetravel() != 0) {
    _internal_set_timetravel(from._internal_timetravel());
  }
}

void ManualCompactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ManualCompactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualCompactionRequest::CopyFrom(const ManualCompactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ManualCompactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualCompactionRequest::IsInitialized() const {
  return true;
}

void ManualCompactionRequest::InternalSwap(ManualCompactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManualCompactionRequest, timetravel_)
      + sizeof(ManualCompactionRequest::timetravel_)
      - PROTOBUF_FIELD_OFFSET(ManualCompactionRequest, collectionid_)>(
          reinterpret_cast<char*>(&collectionid_),
          reinterpret_cast<char*>(&other->collectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualCompactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualCompactionResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ManualCompactionResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ManualCompactionResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ManualCompactionResponse* msg);
};

const ::milvus::proto::common::Status&
ManualCompactionResponse::_Internal::status(const ManualCompactionResponse* msg) {
  return *msg->status_;
}
void ManualCompactionResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ManualCompactionResponse::ManualCompactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ManualCompactionResponse)
}
ManualCompactionResponse::ManualCompactionResponse(const ManualCompactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&compactionid_, &from.compactionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&compactionplancount_) -
    reinterpret_cast<char*>(&compactionid_)) + sizeof(compactionplancount_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ManualCompactionResponse)
}

void ManualCompactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualCompactionResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compactionplancount_) -
      reinterpret_cast<char*>(&status_)) + sizeof(compactionplancount_));
}

ManualCompactionResponse::~ManualCompactionResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ManualCompactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManualCompactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ManualCompactionResponse::ArenaDtor(void* object) {
  ManualCompactionResponse* _this = reinterpret_cast< ManualCompactionResponse* >(object);
  (void)_this;
}
void ManualCompactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualCompactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualCompactionResponse& ManualCompactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualCompactionResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ManualCompactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ManualCompactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&compactionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compactionplancount_) -
      reinterpret_cast<char*>(&compactionid_)) + sizeof(compactionplancount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualCompactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 compactionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          compactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 compactionPlanCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          compactionplancount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualCompactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ManualCompactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int64 compactionID = 2;
  if (this->compactionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_compactionid(), target);
  }

  // int32 compactionPlanCount = 3;
  if (this->compactionplancount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_compactionplancount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ManualCompactionResponse)
  return target;
}

size_t ManualCompactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ManualCompactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 compactionID = 2;
  if (this->compactionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_compactionid());
  }

  // int32 compactionPlanCount = 3;
  if (this->compactionplancount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compactionplancount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualCompactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ManualCompactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualCompactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualCompactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ManualCompactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ManualCompactionResponse)
    MergeFrom(*source);
  }
}

void ManualCompactionResponse::MergeFrom(const ManualCompactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ManualCompactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.compactionid() != 0) {
    _internal_set_compactionid(from._internal_compactionid());
  }
  if (from.compactionplancount() != 0) {
    _internal_set_compactionplancount(from._internal_compactionplancount());
  }
}

void ManualCompactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ManualCompactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualCompactionResponse::CopyFrom(const ManualCompactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ManualCompactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualCompactionResponse::IsInitialized() const {
  return true;
}

void ManualCompactionResponse::InternalSwap(ManualCompactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManualCompactionResponse, compactionplancount_)
      + sizeof(ManualCompactionResponse::compactionplancount_)
      - PROTOBUF_FIELD_OFFSET(ManualCompactionResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualCompactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCompactionStateRequest::InitAsDefaultInstance() {
}
class GetCompactionStateRequest::_Internal {
 public:
};

GetCompactionStateRequest::GetCompactionStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCompactionStateRequest)
}
GetCompactionStateRequest::GetCompactionStateRequest(const GetCompactionStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  compactionid_ = from.compactionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCompactionStateRequest)
}

void GetCompactionStateRequest::SharedCtor() {
  compactionid_ = PROTOBUF_LONGLONG(0);
}

GetCompactionStateRequest::~GetCompactionStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCompactionStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCompactionStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetCompactionStateRequest::ArenaDtor(void* object) {
  GetCompactionStateRequest* _this = reinterpret_cast< GetCompactionStateRequest* >(object);
  (void)_this;
}
void GetCompactionStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCompactionStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCompactionStateRequest& GetCompactionStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCompactionStateRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetCompactionStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCompactionStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compactionid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompactionStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 compactionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          compactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCompactionStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCompactionStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 compactionID = 1;
  if (this->compactionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_compactionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCompactionStateRequest)
  return target;
}

size_t GetCompactionStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCompactionStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 compactionID = 1;
  if (this->compactionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_compactionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCompactionStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetCompactionStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCompactionStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCompactionStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetCompactionStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetCompactionStateRequest)
    MergeFrom(*source);
  }
}

void GetCompactionStateRequest::MergeFrom(const GetCompactionStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCompactionStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.compactionid() != 0) {
    _internal_set_compactionid(from._internal_compactionid());
  }
}

void GetCompactionStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetCompactionStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCompactionStateRequest::CopyFrom(const GetCompactionStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCompactionStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompactionStateRequest::IsInitialized() const {
  return true;
}

void GetCompactionStateRequest::InternalSwap(GetCompactionStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(compactionid_, other->compactionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompactionStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCompactionStateResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetCompactionStateResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetCompactionStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetCompactionStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetCompactionStateResponse::_Internal::status(const GetCompactionStateResponse* msg) {
  return *msg->status_;
}
void GetCompactionStateResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetCompactionStateResponse::GetCompactionStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCompactionStateResponse)
}
GetCompactionStateResponse::GetCompactionStateResponse(const GetCompactionStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&executingplanno_, &from.executingplanno_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&executingplanno_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCompactionStateResponse)
}

void GetCompactionStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCompactionStateResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

GetCompactionStateResponse::~GetCompactionStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCompactionStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCompactionStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetCompactionStateResponse::ArenaDtor(void* object) {
  GetCompactionStateResponse* _this = reinterpret_cast< GetCompactionStateResponse* >(object);
  (void)_this;
}
void GetCompactionStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCompactionStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCompactionStateResponse& GetCompactionStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCompactionStateResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetCompactionStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCompactionStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&executingplanno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&executingplanno_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompactionStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.CompactionState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::CompactionState>(val));
        } else goto handle_unusual;
        continue;
      // int64 executingPlanNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          executingplanno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timeoutPlanNo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timeoutplanno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 completedPlanNo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          completedplanno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 failedPlanNo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          failedplanno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCompactionStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCompactionStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .milvus.proto.common.CompactionState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // int64 executingPlanNo = 3;
  if (this->executingplanno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_executingplanno(), target);
  }

  // int64 timeoutPlanNo = 4;
  if (this->timeoutplanno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timeoutplanno(), target);
  }

  // int64 completedPlanNo = 5;
  if (this->completedplanno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_completedplanno(), target);
  }

  // int64 failedPlanNo = 6;
  if (this->failedplanno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_failedplanno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCompactionStateResponse)
  return target;
}

size_t GetCompactionStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCompactionStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 executingPlanNo = 3;
  if (this->executingplanno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_executingplanno());
  }

  // int64 timeoutPlanNo = 4;
  if (this->timeoutplanno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timeoutplanno());
  }

  // int64 completedPlanNo = 5;
  if (this->completedplanno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_completedplanno());
  }

  // int64 failedPlanNo = 6;
  if (this->failedplanno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_failedplanno());
  }

  // .milvus.proto.common.CompactionState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCompactionStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetCompactionStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCompactionStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCompactionStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetCompactionStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetCompactionStateResponse)
    MergeFrom(*source);
  }
}

void GetCompactionStateResponse::MergeFrom(const GetCompactionStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCompactionStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.executingplanno() != 0) {
    _internal_set_executingplanno(from._internal_executingplanno());
  }
  if (from.timeoutplanno() != 0) {
    _internal_set_timeoutplanno(from._internal_timeoutplanno());
  }
  if (from.completedplanno() != 0) {
    _internal_set_completedplanno(from._internal_completedplanno());
  }
  if (from.failedplanno() != 0) {
    _internal_set_failedplanno(from._internal_failedplanno());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void GetCompactionStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetCompactionStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCompactionStateResponse::CopyFrom(const GetCompactionStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCompactionStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompactionStateResponse::IsInitialized() const {
  return true;
}

void GetCompactionStateResponse::InternalSwap(GetCompactionStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCompactionStateResponse, state_)
      + sizeof(GetCompactionStateResponse::state_)
      - PROTOBUF_FIELD_OFFSET(GetCompactionStateResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompactionStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCompactionPlansRequest::InitAsDefaultInstance() {
}
class GetCompactionPlansRequest::_Internal {
 public:
};

GetCompactionPlansRequest::GetCompactionPlansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCompactionPlansRequest)
}
GetCompactionPlansRequest::GetCompactionPlansRequest(const GetCompactionPlansRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  compactionid_ = from.compactionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCompactionPlansRequest)
}

void GetCompactionPlansRequest::SharedCtor() {
  compactionid_ = PROTOBUF_LONGLONG(0);
}

GetCompactionPlansRequest::~GetCompactionPlansRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCompactionPlansRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCompactionPlansRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetCompactionPlansRequest::ArenaDtor(void* object) {
  GetCompactionPlansRequest* _this = reinterpret_cast< GetCompactionPlansRequest* >(object);
  (void)_this;
}
void GetCompactionPlansRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCompactionPlansRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCompactionPlansRequest& GetCompactionPlansRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCompactionPlansRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetCompactionPlansRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCompactionPlansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compactionid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompactionPlansRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 compactionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          compactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCompactionPlansRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCompactionPlansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 compactionID = 1;
  if (this->compactionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_compactionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCompactionPlansRequest)
  return target;
}

size_t GetCompactionPlansRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCompactionPlansRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 compactionID = 1;
  if (this->compactionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_compactionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCompactionPlansRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetCompactionPlansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCompactionPlansRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCompactionPlansRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetCompactionPlansRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetCompactionPlansRequest)
    MergeFrom(*source);
  }
}

void GetCompactionPlansRequest::MergeFrom(const GetCompactionPlansRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCompactionPlansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.compactionid() != 0) {
    _internal_set_compactionid(from._internal_compactionid());
  }
}

void GetCompactionPlansRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetCompactionPlansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCompactionPlansRequest::CopyFrom(const GetCompactionPlansRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCompactionPlansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompactionPlansRequest::IsInitialized() const {
  return true;
}

void GetCompactionPlansRequest::InternalSwap(GetCompactionPlansRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(compactionid_, other->compactionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompactionPlansRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCompactionPlansResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetCompactionPlansResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetCompactionPlansResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetCompactionPlansResponse* msg);
};

const ::milvus::proto::common::Status&
GetCompactionPlansResponse::_Internal::status(const GetCompactionPlansResponse* msg) {
  return *msg->status_;
}
void GetCompactionPlansResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetCompactionPlansResponse::GetCompactionPlansResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mergeinfos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetCompactionPlansResponse)
}
GetCompactionPlansResponse::GetCompactionPlansResponse(const GetCompactionPlansResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mergeinfos_(from.mergeinfos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCompactionPlansResponse)
}

void GetCompactionPlansResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCompactionPlansResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

GetCompactionPlansResponse::~GetCompactionPlansResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCompactionPlansResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCompactionPlansResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetCompactionPlansResponse::ArenaDtor(void* object) {
  GetCompactionPlansResponse* _this = reinterpret_cast< GetCompactionPlansResponse* >(object);
  (void)_this;
}
void GetCompactionPlansResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCompactionPlansResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCompactionPlansResponse& GetCompactionPlansResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCompactionPlansResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetCompactionPlansResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCompactionPlansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mergeinfos_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompactionPlansResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.CompactionState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::CompactionState>(val));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.CompactionMergeInfo mergeInfos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mergeinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCompactionPlansResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCompactionPlansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .milvus.proto.common.CompactionState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // repeated .milvus.proto.milvus.CompactionMergeInfo mergeInfos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mergeinfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_mergeinfos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCompactionPlansResponse)
  return target;
}

size_t GetCompactionPlansResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCompactionPlansResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.CompactionMergeInfo mergeInfos = 3;
  total_size += 1UL * this->_internal_mergeinfos_size();
  for (const auto& msg : this->mergeinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .milvus.proto.common.CompactionState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCompactionPlansResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetCompactionPlansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCompactionPlansResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCompactionPlansResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetCompactionPlansResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetCompactionPlansResponse)
    MergeFrom(*source);
  }
}

void GetCompactionPlansResponse::MergeFrom(const GetCompactionPlansResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCompactionPlansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mergeinfos_.MergeFrom(from.mergeinfos_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void GetCompactionPlansResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetCompactionPlansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCompactionPlansResponse::CopyFrom(const GetCompactionPlansResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCompactionPlansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompactionPlansResponse::IsInitialized() const {
  return true;
}

void GetCompactionPlansResponse::InternalSwap(GetCompactionPlansResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mergeinfos_.InternalSwap(&other->mergeinfos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCompactionPlansResponse, state_)
      + sizeof(GetCompactionPlansResponse::state_)
      - PROTOBUF_FIELD_OFFSET(GetCompactionPlansResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompactionPlansResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompactionMergeInfo::InitAsDefaultInstance() {
}
class CompactionMergeInfo::_Internal {
 public:
};

CompactionMergeInfo::CompactionMergeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sources_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CompactionMergeInfo)
}
CompactionMergeInfo::CompactionMergeInfo(const CompactionMergeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sources_(from.sources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CompactionMergeInfo)
}

void CompactionMergeInfo::SharedCtor() {
  target_ = PROTOBUF_LONGLONG(0);
}

CompactionMergeInfo::~CompactionMergeInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CompactionMergeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompactionMergeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CompactionMergeInfo::ArenaDtor(void* object) {
  CompactionMergeInfo* _this = reinterpret_cast< CompactionMergeInfo* >(object);
  (void)_this;
}
void CompactionMergeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompactionMergeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompactionMergeInfo& CompactionMergeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompactionMergeInfo_milvus_2eproto.base);
  return *internal_default_instance();
}


void CompactionMergeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CompactionMergeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  target_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactionMergeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 sources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_sources(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_sources(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompactionMergeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CompactionMergeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 sources = 1;
  {
    int byte_size = _sources_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_sources(), byte_size, target);
    }
  }

  // int64 target = 2;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CompactionMergeInfo)
  return target;
}

size_t CompactionMergeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CompactionMergeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 sources = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->sources_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sources_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 target = 2;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompactionMergeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CompactionMergeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactionMergeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompactionMergeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CompactionMergeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CompactionMergeInfo)
    MergeFrom(*source);
  }
}

void CompactionMergeInfo::MergeFrom(const CompactionMergeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CompactionMergeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
}

void CompactionMergeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CompactionMergeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactionMergeInfo::CopyFrom(const CompactionMergeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CompactionMergeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionMergeInfo::IsInitialized() const {
  return true;
}

void CompactionMergeInfo::InternalSwap(CompactionMergeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sources_.InternalSwap(&other->sources_);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionMergeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFlushStateRequest::InitAsDefaultInstance() {
}
class GetFlushStateRequest::_Internal {
 public:
};

GetFlushStateRequest::GetFlushStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segmentids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetFlushStateRequest)
}
GetFlushStateRequest::GetFlushStateRequest(const GetFlushStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segmentids_(from.segmentids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  flush_ts_ = from.flush_ts_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetFlushStateRequest)
}

void GetFlushStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFlushStateRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flush_ts_ = PROTOBUF_ULONGLONG(0);
}

GetFlushStateRequest::~GetFlushStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetFlushStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetFlushStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFlushStateRequest::ArenaDtor(void* object) {
  GetFlushStateRequest* _this = reinterpret_cast< GetFlushStateRequest* >(object);
  (void)_this;
}
void GetFlushStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlushStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFlushStateRequest& GetFlushStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFlushStateRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetFlushStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetFlushStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segmentids_.Clear();
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flush_ts_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 segmentIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 flush_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flush_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetFlushStateRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetFlushStateRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFlushStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetFlushStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 1;
  {
    int byte_size = _segmentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_segmentids(), byte_size, target);
    }
  }

  // uint64 flush_ts = 2;
  if (this->flush_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_flush_ts(), target);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetFlushStateRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_db_name(), target);
  }

  // string collection_name = 4;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetFlushStateRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetFlushStateRequest)
  return target;
}

size_t GetFlushStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetFlushStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 4;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // uint64 flush_ts = 2;
  if (this->flush_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flush_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFlushStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetFlushStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFlushStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFlushStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetFlushStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetFlushStateRequest)
    MergeFrom(*source);
  }
}

void GetFlushStateRequest::MergeFrom(const GetFlushStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetFlushStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segmentids_.MergeFrom(from.segmentids_);
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.flush_ts() != 0) {
    _internal_set_flush_ts(from._internal_flush_ts());
  }
}

void GetFlushStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetFlushStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFlushStateRequest::CopyFrom(const GetFlushStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetFlushStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushStateRequest::IsInitialized() const {
  return true;
}

void GetFlushStateRequest::InternalSwap(GetFlushStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segmentids_.InternalSwap(&other->segmentids_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(flush_ts_, other->flush_ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFlushStateResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetFlushStateResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetFlushStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetFlushStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetFlushStateResponse::_Internal::status(const GetFlushStateResponse* msg) {
  return *msg->status_;
}
void GetFlushStateResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetFlushStateResponse::GetFlushStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetFlushStateResponse)
}
GetFlushStateResponse::GetFlushStateResponse(const GetFlushStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  flushed_ = from.flushed_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetFlushStateResponse)
}

void GetFlushStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFlushStateResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flushed_) -
      reinterpret_cast<char*>(&status_)) + sizeof(flushed_));
}

GetFlushStateResponse::~GetFlushStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetFlushStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetFlushStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetFlushStateResponse::ArenaDtor(void* object) {
  GetFlushStateResponse* _this = reinterpret_cast< GetFlushStateResponse* >(object);
  (void)_this;
}
void GetFlushStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlushStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFlushStateResponse& GetFlushStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFlushStateResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetFlushStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetFlushStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  flushed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool flushed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flushed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFlushStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetFlushStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // bool flushed = 2;
  if (this->flushed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_flushed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetFlushStateResponse)
  return target;
}

size_t GetFlushStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetFlushStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool flushed = 2;
  if (this->flushed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFlushStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetFlushStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFlushStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFlushStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetFlushStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetFlushStateResponse)
    MergeFrom(*source);
  }
}

void GetFlushStateResponse::MergeFrom(const GetFlushStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetFlushStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.flushed() != 0) {
    _internal_set_flushed(from._internal_flushed());
  }
}

void GetFlushStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetFlushStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFlushStateResponse::CopyFrom(const GetFlushStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetFlushStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushStateResponse::IsInitialized() const {
  return true;
}

void GetFlushStateResponse::InternalSwap(GetFlushStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushStateResponse, flushed_)
      + sizeof(GetFlushStateResponse::flushed_)
      - PROTOBUF_FIELD_OFFSET(GetFlushStateResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFlushAllStateRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetFlushAllStateRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetFlushAllStateRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetFlushAllStateRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetFlushAllStateRequest::_Internal::base(const GetFlushAllStateRequest* msg) {
  return *msg->base_;
}
void GetFlushAllStateRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetFlushAllStateRequest::GetFlushAllStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetFlushAllStateRequest)
}
GetFlushAllStateRequest::GetFlushAllStateRequest(const GetFlushAllStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  flush_all_ts_ = from.flush_all_ts_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetFlushAllStateRequest)
}

void GetFlushAllStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFlushAllStateRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flush_all_ts_) -
      reinterpret_cast<char*>(&base_)) + sizeof(flush_all_ts_));
}

GetFlushAllStateRequest::~GetFlushAllStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetFlushAllStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetFlushAllStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetFlushAllStateRequest::ArenaDtor(void* object) {
  GetFlushAllStateRequest* _this = reinterpret_cast< GetFlushAllStateRequest* >(object);
  (void)_this;
}
void GetFlushAllStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlushAllStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFlushAllStateRequest& GetFlushAllStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFlushAllStateRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetFlushAllStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetFlushAllStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  flush_all_ts_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushAllStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 flush_all_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flush_all_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetFlushAllStateRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFlushAllStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetFlushAllStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // uint64 flush_all_ts = 2;
  if (this->flush_all_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_flush_all_ts(), target);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetFlushAllStateRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetFlushAllStateRequest)
  return target;
}

size_t GetFlushAllStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetFlushAllStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 flush_all_ts = 2;
  if (this->flush_all_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flush_all_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFlushAllStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetFlushAllStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFlushAllStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFlushAllStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetFlushAllStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetFlushAllStateRequest)
    MergeFrom(*source);
  }
}

void GetFlushAllStateRequest::MergeFrom(const GetFlushAllStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetFlushAllStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.flush_all_ts() != 0) {
    _internal_set_flush_all_ts(from._internal_flush_all_ts());
  }
}

void GetFlushAllStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetFlushAllStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFlushAllStateRequest::CopyFrom(const GetFlushAllStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetFlushAllStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushAllStateRequest::IsInitialized() const {
  return true;
}

void GetFlushAllStateRequest::InternalSwap(GetFlushAllStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushAllStateRequest, flush_all_ts_)
      + sizeof(GetFlushAllStateRequest::flush_all_ts_)
      - PROTOBUF_FIELD_OFFSET(GetFlushAllStateRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushAllStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFlushAllStateResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetFlushAllStateResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetFlushAllStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetFlushAllStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetFlushAllStateResponse::_Internal::status(const GetFlushAllStateResponse* msg) {
  return *msg->status_;
}
void GetFlushAllStateResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetFlushAllStateResponse::GetFlushAllStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetFlushAllStateResponse)
}
GetFlushAllStateResponse::GetFlushAllStateResponse(const GetFlushAllStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  flushed_ = from.flushed_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetFlushAllStateResponse)
}

void GetFlushAllStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFlushAllStateResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flushed_) -
      reinterpret_cast<char*>(&status_)) + sizeof(flushed_));
}

GetFlushAllStateResponse::~GetFlushAllStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetFlushAllStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetFlushAllStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetFlushAllStateResponse::ArenaDtor(void* object) {
  GetFlushAllStateResponse* _this = reinterpret_cast< GetFlushAllStateResponse* >(object);
  (void)_this;
}
void GetFlushAllStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlushAllStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFlushAllStateResponse& GetFlushAllStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFlushAllStateResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetFlushAllStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetFlushAllStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  flushed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushAllStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool flushed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flushed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFlushAllStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetFlushAllStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // bool flushed = 2;
  if (this->flushed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_flushed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetFlushAllStateResponse)
  return target;
}

size_t GetFlushAllStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetFlushAllStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool flushed = 2;
  if (this->flushed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFlushAllStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetFlushAllStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFlushAllStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFlushAllStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetFlushAllStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetFlushAllStateResponse)
    MergeFrom(*source);
  }
}

void GetFlushAllStateResponse::MergeFrom(const GetFlushAllStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetFlushAllStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.flushed() != 0) {
    _internal_set_flushed(from._internal_flushed());
  }
}

void GetFlushAllStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetFlushAllStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFlushAllStateResponse::CopyFrom(const GetFlushAllStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetFlushAllStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushAllStateResponse::IsInitialized() const {
  return true;
}

void GetFlushAllStateResponse::InternalSwap(GetFlushAllStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushAllStateResponse, flushed_)
      + sizeof(GetFlushAllStateResponse::flushed_)
      - PROTOBUF_FIELD_OFFSET(GetFlushAllStateResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushAllStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImportRequest::InitAsDefaultInstance() {
}
class ImportRequest::_Internal {
 public:
};

void ImportRequest::clear_options() {
  options_.Clear();
}
ImportRequest::ImportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channel_names_(arena),
  files_(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ImportRequest)
}
ImportRequest::ImportRequest(const ImportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_names_(from.channel_names_),
      files_(from.files_),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partition_name().empty()) {
    partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_partition_name(),
      GetArena());
  }
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  row_based_ = from.row_based_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ImportRequest)
}

void ImportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImportRequest_milvus_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  row_based_ = false;
}

ImportRequest::~ImportRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ImportRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImportRequest::ArenaDtor(void* object) {
  ImportRequest* _this = reinterpret_cast< ImportRequest* >(object);
  (void)_this;
}
void ImportRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportRequest& ImportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImportRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ImportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ImportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_names_.Clear();
  files_.Clear();
  options_.Clear();
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  row_based_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string collection_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ImportRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_partition_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ImportRequest.partition_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string channel_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_channel_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ImportRequest.channel_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool row_based = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          row_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string files = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_files();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ImportRequest.files"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string db_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ImportRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ImportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection_name = 1;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ImportRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collection_name(), target);
  }

  // string partition_name = 2;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_name().data(), static_cast<int>(this->_internal_partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ImportRequest.partition_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partition_name(), target);
  }

  // repeated string channel_names = 3;
  for (int i = 0, n = this->_internal_channel_names_size(); i < n; i++) {
    const auto& s = this->_internal_channel_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ImportRequest.channel_names");
    target = stream->WriteString(3, s, target);
  }

  // bool row_based = 4;
  if (this->row_based() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_row_based(), target);
  }

  // repeated string files = 5;
  for (int i = 0, n = this->_internal_files_size(); i < n; i++) {
    const auto& s = this->_internal_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ImportRequest.files");
    target = stream->WriteString(5, s, target);
  }

  // repeated .milvus.proto.common.KeyValuePair options = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_options(i), target, stream);
  }

  // string db_name = 7;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ImportRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ImportRequest)
  return target;
}

size_t ImportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ImportRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channel_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(channel_names_.size());
  for (int i = 0, n = channel_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      channel_names_.Get(i));
  }

  // repeated string files = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(files_.size());
  for (int i = 0, n = files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      files_.Get(i));
  }

  // repeated .milvus.proto.common.KeyValuePair options = 6;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string collection_name = 1;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string partition_name = 2;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_name());
  }

  // string db_name = 7;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // bool row_based = 4;
  if (this->row_based() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ImportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ImportRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ImportRequest)
    MergeFrom(*source);
  }
}

void ImportRequest::MergeFrom(const ImportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ImportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_names_.MergeFrom(from.channel_names_);
  files_.MergeFrom(from.files_);
  options_.MergeFrom(from.options_);
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.partition_name().size() > 0) {
    _internal_set_partition_name(from._internal_partition_name());
  }
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.row_based() != 0) {
    _internal_set_row_based(from._internal_row_based());
  }
}

void ImportRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ImportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportRequest::CopyFrom(const ImportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ImportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportRequest::IsInitialized() const {
  return true;
}

void ImportRequest::InternalSwap(ImportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_names_.InternalSwap(&other->channel_names_);
  files_.InternalSwap(&other->files_);
  options_.InternalSwap(&other->options_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(row_based_, other->row_based_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImportResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ImportResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ImportResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ImportResponse* msg);
};

const ::milvus::proto::common::Status&
ImportResponse::_Internal::status(const ImportResponse* msg) {
  return *msg->status_;
}
void ImportResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ImportResponse::ImportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ImportResponse)
}
ImportResponse::ImportResponse(const ImportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ImportResponse)
}

void ImportResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImportResponse_milvus_2eproto.base);
  status_ = nullptr;
}

ImportResponse::~ImportResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ImportResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ImportResponse::ArenaDtor(void* object) {
  ImportResponse* _this = reinterpret_cast< ImportResponse* >(object);
  (void)_this;
}
void ImportResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportResponse& ImportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImportResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ImportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ImportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_tasks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_tasks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ImportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated int64 tasks = 2;
  {
    int byte_size = _tasks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_tasks(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ImportResponse)
  return target;
}

size_t ImportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ImportResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 tasks = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->tasks_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tasks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ImportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImportResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ImportResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ImportResponse)
    MergeFrom(*source);
  }
}

void ImportResponse::MergeFrom(const ImportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ImportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ImportResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ImportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportResponse::CopyFrom(const ImportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ImportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportResponse::IsInitialized() const {
  return true;
}

void ImportResponse::InternalSwap(ImportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetImportStateRequest::InitAsDefaultInstance() {
}
class GetImportStateRequest::_Internal {
 public:
};

GetImportStateRequest::GetImportStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetImportStateRequest)
}
GetImportStateRequest::GetImportStateRequest(const GetImportStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_ = from.task_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetImportStateRequest)
}

void GetImportStateRequest::SharedCtor() {
  task_ = PROTOBUF_LONGLONG(0);
}

GetImportStateRequest::~GetImportStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetImportStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetImportStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetImportStateRequest::ArenaDtor(void* object) {
  GetImportStateRequest* _this = reinterpret_cast< GetImportStateRequest* >(object);
  (void)_this;
}
void GetImportStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetImportStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetImportStateRequest& GetImportStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetImportStateRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetImportStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetImportStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetImportStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetImportStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetImportStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 task = 1;
  if (this->task() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_task(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetImportStateRequest)
  return target;
}

size_t GetImportStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetImportStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 task = 1;
  if (this->task() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_task());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetImportStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetImportStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetImportStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetImportStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetImportStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetImportStateRequest)
    MergeFrom(*source);
  }
}

void GetImportStateRequest::MergeFrom(const GetImportStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetImportStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task() != 0) {
    _internal_set_task(from._internal_task());
  }
}

void GetImportStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetImportStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImportStateRequest::CopyFrom(const GetImportStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetImportStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImportStateRequest::IsInitialized() const {
  return true;
}

void GetImportStateRequest::InternalSwap(GetImportStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(task_, other->task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImportStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetImportStateResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetImportStateResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetImportStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetImportStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetImportStateResponse::_Internal::status(const GetImportStateResponse* msg) {
  return *msg->status_;
}
void GetImportStateResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetImportStateResponse::clear_infos() {
  infos_.Clear();
}
GetImportStateResponse::GetImportStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  id_list_(arena),
  infos_(arena),
  segment_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetImportStateResponse)
}
GetImportStateResponse::GetImportStateResponse(const GetImportStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_list_(from.id_list_),
      infos_(from.infos_),
      segment_ids_(from.segment_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&row_count_, &from.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetImportStateResponse)
}

void GetImportStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetImportStateResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

GetImportStateResponse::~GetImportStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetImportStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetImportStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetImportStateResponse::ArenaDtor(void* object) {
  GetImportStateResponse* _this = reinterpret_cast< GetImportStateResponse* >(object);
  (void)_this;
}
void GetImportStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetImportStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetImportStateResponse& GetImportStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetImportStateResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetImportStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetImportStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_list_.Clear();
  infos_.Clear();
  segment_ids_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&row_count_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetImportStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.ImportState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::ImportState>(val));
        } else goto handle_unusual;
        continue;
      // int64 row_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 id_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair infos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collection_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          collection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 segment_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_segment_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_segment_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 create_ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          create_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetImportStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetImportStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .milvus.proto.common.ImportState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // int64 row_count = 3;
  if (this->row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_row_count(), target);
  }

  // repeated int64 id_list = 4;
  {
    int byte_size = _id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_id_list(), byte_size, target);
    }
  }

  // repeated .milvus.proto.common.KeyValuePair infos = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_infos(i), target, stream);
  }

  // int64 id = 6;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_id(), target);
  }

  // int64 collection_id = 7;
  if (this->collection_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_collection_id(), target);
  }

  // repeated int64 segment_ids = 8;
  {
    int byte_size = _segment_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_segment_ids(), byte_size, target);
    }
  }

  // int64 create_ts = 9;
  if (this->create_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_create_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetImportStateResponse)
  return target;
}

size_t GetImportStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetImportStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 id_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .milvus.proto.common.KeyValuePair infos = 5;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 segment_ids = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->segment_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _segment_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 row_count = 3;
  if (this->row_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_row_count());
  }

  // int64 id = 6;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 collection_id = 7;
  if (this->collection_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collection_id());
  }

  // int64 create_ts = 9;
  if (this->create_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_create_ts());
  }

  // .milvus.proto.common.ImportState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetImportStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetImportStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetImportStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetImportStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetImportStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetImportStateResponse)
    MergeFrom(*source);
  }
}

void GetImportStateResponse::MergeFrom(const GetImportStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetImportStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_list_.MergeFrom(from.id_list_);
  infos_.MergeFrom(from.infos_);
  segment_ids_.MergeFrom(from.segment_ids_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.collection_id() != 0) {
    _internal_set_collection_id(from._internal_collection_id());
  }
  if (from.create_ts() != 0) {
    _internal_set_create_ts(from._internal_create_ts());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void GetImportStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetImportStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImportStateResponse::CopyFrom(const GetImportStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetImportStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImportStateResponse::IsInitialized() const {
  return true;
}

void GetImportStateResponse::InternalSwap(GetImportStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_list_.InternalSwap(&other->id_list_);
  infos_.InternalSwap(&other->infos_);
  segment_ids_.InternalSwap(&other->segment_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetImportStateResponse, state_)
      + sizeof(GetImportStateResponse::state_)
      - PROTOBUF_FIELD_OFFSET(GetImportStateResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImportStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListImportTasksRequest::InitAsDefaultInstance() {
}
class ListImportTasksRequest::_Internal {
 public:
};

ListImportTasksRequest::ListImportTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListImportTasksRequest)
}
ListImportTasksRequest::ListImportTasksRequest(const ListImportTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListImportTasksRequest)
}

void ListImportTasksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListImportTasksRequest_milvus_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  limit_ = PROTOBUF_LONGLONG(0);
}

ListImportTasksRequest::~ListImportTasksRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListImportTasksRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListImportTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListImportTasksRequest::ArenaDtor(void* object) {
  ListImportTasksRequest* _this = reinterpret_cast< ListImportTasksRequest* >(object);
  (void)_this;
}
void ListImportTasksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListImportTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListImportTasksRequest& ListImportTasksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListImportTasksRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ListImportTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListImportTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  limit_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListImportTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string collection_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ListImportTasksRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ListImportTasksRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListImportTasksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListImportTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collection_name = 1;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListImportTasksRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collection_name(), target);
  }

  // int64 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_limit(), target);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListImportTasksRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListImportTasksRequest)
  return target;
}

size_t ListImportTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListImportTasksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection_name = 1;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // int64 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListImportTasksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ListImportTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListImportTasksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListImportTasksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ListImportTasksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ListImportTasksRequest)
    MergeFrom(*source);
  }
}

void ListImportTasksRequest::MergeFrom(const ListImportTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListImportTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void ListImportTasksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ListImportTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListImportTasksRequest::CopyFrom(const ListImportTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListImportTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListImportTasksRequest::IsInitialized() const {
  return true;
}

void ListImportTasksRequest::InternalSwap(ListImportTasksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListImportTasksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListImportTasksResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ListImportTasksResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ListImportTasksResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListImportTasksResponse* msg);
};

const ::milvus::proto::common::Status&
ListImportTasksResponse::_Internal::status(const ListImportTasksResponse* msg) {
  return *msg->status_;
}
void ListImportTasksResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ListImportTasksResponse::ListImportTasksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListImportTasksResponse)
}
ListImportTasksResponse::ListImportTasksResponse(const ListImportTasksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListImportTasksResponse)
}

void ListImportTasksResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListImportTasksResponse_milvus_2eproto.base);
  status_ = nullptr;
}

ListImportTasksResponse::~ListImportTasksResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListImportTasksResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListImportTasksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ListImportTasksResponse::ArenaDtor(void* object) {
  ListImportTasksResponse* _this = reinterpret_cast< ListImportTasksResponse* >(object);
  (void)_this;
}
void ListImportTasksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListImportTasksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListImportTasksResponse& ListImportTasksResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListImportTasksResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ListImportTasksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListImportTasksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListImportTasksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.GetImportStateResponse tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListImportTasksResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListImportTasksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.milvus.GetImportStateResponse tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListImportTasksResponse)
  return target;
}

size_t ListImportTasksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListImportTasksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.GetImportStateResponse tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListImportTasksResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ListImportTasksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListImportTasksResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListImportTasksResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ListImportTasksResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ListImportTasksResponse)
    MergeFrom(*source);
  }
}

void ListImportTasksResponse::MergeFrom(const ListImportTasksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListImportTasksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ListImportTasksResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ListImportTasksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListImportTasksResponse::CopyFrom(const ListImportTasksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListImportTasksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListImportTasksResponse::IsInitialized() const {
  return true;
}

void ListImportTasksResponse::InternalSwap(ListImportTasksResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListImportTasksResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetReplicasRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetReplicasRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetReplicasRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetReplicasRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetReplicasRequest::_Internal::base(const GetReplicasRequest* msg) {
  return *msg->base_;
}
void GetReplicasRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetReplicasRequest::GetReplicasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetReplicasRequest)
}
GetReplicasRequest::GetReplicasRequest(const GetReplicasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&collectionid_, &from.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&with_shard_nodes_) -
    reinterpret_cast<char*>(&collectionid_)) + sizeof(with_shard_nodes_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetReplicasRequest)
}

void GetReplicasRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetReplicasRequest_milvus_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&with_shard_nodes_) -
      reinterpret_cast<char*>(&base_)) + sizeof(with_shard_nodes_));
}

GetReplicasRequest::~GetReplicasRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetReplicasRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetReplicasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetReplicasRequest::ArenaDtor(void* object) {
  GetReplicasRequest* _this = reinterpret_cast< GetReplicasRequest* >(object);
  (void)_this;
}
void GetReplicasRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetReplicasRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetReplicasRequest& GetReplicasRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetReplicasRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetReplicasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetReplicasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&with_shard_nodes_) -
      reinterpret_cast<char*>(&collectionid_)) + sizeof(with_shard_nodes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReplicasRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_shard_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          with_shard_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetReplicasRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetReplicasRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReplicasRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetReplicasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // bool with_shard_nodes = 3;
  if (this->with_shard_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_with_shard_nodes(), target);
  }

  // string collection_name = 4;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetReplicasRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collection_name(), target);
  }

  // string db_name = 5;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetReplicasRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetReplicasRequest)
  return target;
}

size_t GetReplicasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetReplicasRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection_name = 4;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 5;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collectionid());
  }

  // bool with_shard_nodes = 3;
  if (this->with_shard_nodes() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetReplicasRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetReplicasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetReplicasRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetReplicasRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetReplicasRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetReplicasRequest)
    MergeFrom(*source);
  }
}

void GetReplicasRequest::MergeFrom(const GetReplicasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetReplicasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.collectionid() != 0) {
    _internal_set_collectionid(from._internal_collectionid());
  }
  if (from.with_shard_nodes() != 0) {
    _internal_set_with_shard_nodes(from._internal_with_shard_nodes());
  }
}

void GetReplicasRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetReplicasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReplicasRequest::CopyFrom(const GetReplicasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetReplicasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReplicasRequest::IsInitialized() const {
  return true;
}

void GetReplicasRequest::InternalSwap(GetReplicasRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetReplicasRequest, with_shard_nodes_)
      + sizeof(GetReplicasRequest::with_shard_nodes_)
      - PROTOBUF_FIELD_OFFSET(GetReplicasRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReplicasRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetReplicasResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetReplicasResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetReplicasResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetReplicasResponse* msg);
};

const ::milvus::proto::common::Status&
GetReplicasResponse::_Internal::status(const GetReplicasResponse* msg) {
  return *msg->status_;
}
void GetReplicasResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetReplicasResponse::GetReplicasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  replicas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetReplicasResponse)
}
GetReplicasResponse::GetReplicasResponse(const GetReplicasResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      replicas_(from.replicas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetReplicasResponse)
}

void GetReplicasResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetReplicasResponse_milvus_2eproto.base);
  status_ = nullptr;
}

GetReplicasResponse::~GetReplicasResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetReplicasResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetReplicasResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetReplicasResponse::ArenaDtor(void* object) {
  GetReplicasResponse* _this = reinterpret_cast< GetReplicasResponse* >(object);
  (void)_this;
}
void GetReplicasResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetReplicasResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetReplicasResponse& GetReplicasResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetReplicasResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetReplicasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetReplicasResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replicas_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReplicasResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.ReplicaInfo replicas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replicas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReplicasResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetReplicasResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.milvus.ReplicaInfo replicas = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replicas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_replicas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetReplicasResponse)
  return target;
}

size_t GetReplicasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetReplicasResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.ReplicaInfo replicas = 2;
  total_size += 1UL * this->_internal_replicas_size();
  for (const auto& msg : this->replicas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetReplicasResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetReplicasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetReplicasResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetReplicasResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetReplicasResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetReplicasResponse)
    MergeFrom(*source);
  }
}

void GetReplicasResponse::MergeFrom(const GetReplicasResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetReplicasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replicas_.MergeFrom(from.replicas_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void GetReplicasResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetReplicasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReplicasResponse::CopyFrom(const GetReplicasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetReplicasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReplicasResponse::IsInitialized() const {
  return true;
}

void GetReplicasResponse::InternalSwap(GetReplicasResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  replicas_.InternalSwap(&other->replicas_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReplicasResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ReplicaInfo_NumOutboundNodeEntry_DoNotUse::ReplicaInfo_NumOutboundNodeEntry_DoNotUse() {}
ReplicaInfo_NumOutboundNodeEntry_DoNotUse::ReplicaInfo_NumOutboundNodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ReplicaInfo_NumOutboundNodeEntry_DoNotUse::MergeFrom(const ReplicaInfo_NumOutboundNodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ReplicaInfo_NumOutboundNodeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ReplicaInfo_NumOutboundNodeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ReplicaInfo::InitAsDefaultInstance() {
}
class ReplicaInfo::_Internal {
 public:
};

ReplicaInfo::ReplicaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_ids_(arena),
  shard_replicas_(arena),
  node_ids_(arena),
  num_outbound_node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ReplicaInfo)
}
ReplicaInfo::ReplicaInfo(const ReplicaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_ids_(from.partition_ids_),
      shard_replicas_(from.shard_replicas_),
      node_ids_(from.node_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_outbound_node_.MergeFrom(from.num_outbound_node_);
  resource_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource_group_name().empty()) {
    resource_group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_group_name(),
      GetArena());
  }
  ::memcpy(&replicaid_, &from.replicaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&collectionid_) -
    reinterpret_cast<char*>(&replicaid_)) + sizeof(collectionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ReplicaInfo)
}

void ReplicaInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplicaInfo_milvus_2eproto.base);
  resource_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&replicaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collectionid_) -
      reinterpret_cast<char*>(&replicaid_)) + sizeof(collectionid_));
}

ReplicaInfo::~ReplicaInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ReplicaInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  resource_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReplicaInfo::ArenaDtor(void* object) {
  ReplicaInfo* _this = reinterpret_cast< ReplicaInfo* >(object);
  (void)_this;
}
void ReplicaInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicaInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicaInfo& ReplicaInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicaInfo_milvus_2eproto.base);
  return *internal_default_instance();
}


void ReplicaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ReplicaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_ids_.Clear();
  shard_replicas_.Clear();
  node_ids_.Clear();
  num_outbound_node_.Clear();
  resource_group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&replicaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collectionid_) -
      reinterpret_cast<char*>(&replicaid_)) + sizeof(collectionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicaInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 replicaID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          replicaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 partition_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_partition_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_partition_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shard_replicas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 node_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_node_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_node_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource_group_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_resource_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ReplicaInfo.resource_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int32> num_outbound_node = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&num_outbound_node_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicaInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ReplicaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 replicaID = 1;
  if (this->replicaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_replicaid(), target);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_collectionid(), target);
  }

  // repeated int64 partition_ids = 3;
  {
    int byte_size = _partition_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_partition_ids(), byte_size, target);
    }
  }

  // repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shard_replicas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_shard_replicas(i), target, stream);
  }

  // repeated int64 node_ids = 5;
  {
    int byte_size = _node_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_node_ids(), byte_size, target);
    }
  }

  // string resource_group_name = 6;
  if (this->resource_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_group_name().data(), static_cast<int>(this->_internal_resource_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReplicaInfo.resource_group_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_resource_group_name(), target);
  }

  // map<string, int32> num_outbound_node = 7;
  if (!this->_internal_num_outbound_node().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.milvus.ReplicaInfo.NumOutboundNodeEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_num_outbound_node().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_num_outbound_node().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_num_outbound_node().begin();
          it != this->_internal_num_outbound_node().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ReplicaInfo_NumOutboundNodeEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_num_outbound_node().begin();
          it != this->_internal_num_outbound_node().end(); ++it) {
        target = ReplicaInfo_NumOutboundNodeEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ReplicaInfo)
  return target;
}

size_t ReplicaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ReplicaInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 partition_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->partition_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _partition_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;
  total_size += 1UL * this->_internal_shard_replicas_size();
  for (const auto& msg : this->shard_replicas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 node_ids = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->node_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _node_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, int32> num_outbound_node = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_outbound_node_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_num_outbound_node().begin();
      it != this->_internal_num_outbound_node().end(); ++it) {
    total_size += ReplicaInfo_NumOutboundNodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string resource_group_name = 6;
  if (this->resource_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_group_name());
  }

  // int64 replicaID = 1;
  if (this->replicaid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_replicaid());
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collectionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ReplicaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicaInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicaInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ReplicaInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ReplicaInfo)
    MergeFrom(*source);
  }
}

void ReplicaInfo::MergeFrom(const ReplicaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ReplicaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_ids_.MergeFrom(from.partition_ids_);
  shard_replicas_.MergeFrom(from.shard_replicas_);
  node_ids_.MergeFrom(from.node_ids_);
  num_outbound_node_.MergeFrom(from.num_outbound_node_);
  if (from.resource_group_name().size() > 0) {
    _internal_set_resource_group_name(from._internal_resource_group_name());
  }
  if (from.replicaid() != 0) {
    _internal_set_replicaid(from._internal_replicaid());
  }
  if (from.collectionid() != 0) {
    _internal_set_collectionid(from._internal_collectionid());
  }
}

void ReplicaInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ReplicaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicaInfo::CopyFrom(const ReplicaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ReplicaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaInfo::IsInitialized() const {
  return true;
}

void ReplicaInfo::InternalSwap(ReplicaInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_ids_.InternalSwap(&other->partition_ids_);
  shard_replicas_.InternalSwap(&other->shard_replicas_);
  node_ids_.InternalSwap(&other->node_ids_);
  num_outbound_node_.Swap(&other->num_outbound_node_);
  resource_group_name_.Swap(&other->resource_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplicaInfo, collectionid_)
      + sizeof(ReplicaInfo::collectionid_)
      - PROTOBUF_FIELD_OFFSET(ReplicaInfo, replicaid_)>(
          reinterpret_cast<char*>(&replicaid_),
          reinterpret_cast<char*>(&other->replicaid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicaInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShardReplica::InitAsDefaultInstance() {
}
class ShardReplica::_Internal {
 public:
};

ShardReplica::ShardReplica(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ShardReplica)
}
ShardReplica::ShardReplica(const ShardReplica& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_ids_(from.node_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_addr().empty()) {
    leader_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_addr(),
      GetArena());
  }
  dm_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dm_channel_name().empty()) {
    dm_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dm_channel_name(),
      GetArena());
  }
  leaderid_ = from.leaderid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShardReplica)
}

void ShardReplica::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShardReplica_milvus_2eproto.base);
  leader_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dm_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leaderid_ = PROTOBUF_LONGLONG(0);
}

ShardReplica::~ShardReplica() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShardReplica)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShardReplica::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dm_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShardReplica::ArenaDtor(void* object) {
  ShardReplica* _this = reinterpret_cast< ShardReplica* >(object);
  (void)_this;
}
void ShardReplica::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardReplica::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShardReplica& ShardReplica::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShardReplica_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShardReplica::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShardReplica)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_ids_.Clear();
  leader_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dm_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  leaderid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardReplica::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 leaderID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string leader_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_leader_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ShardReplica.leader_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dm_channel_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dm_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ShardReplica.dm_channel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 node_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_node_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_node_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShardReplica::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShardReplica)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 leaderID = 1;
  if (this->leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_leaderid(), target);
  }

  // string leader_addr = 2;
  if (this->leader_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader_addr().data(), static_cast<int>(this->_internal_leader_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShardReplica.leader_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leader_addr(), target);
  }

  // string dm_channel_name = 3;
  if (this->dm_channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dm_channel_name().data(), static_cast<int>(this->_internal_dm_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShardReplica.dm_channel_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dm_channel_name(), target);
  }

  // repeated int64 node_ids = 4;
  {
    int byte_size = _node_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_node_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShardReplica)
  return target;
}

size_t ShardReplica::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShardReplica)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 node_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->node_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _node_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string leader_addr = 2;
  if (this->leader_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader_addr());
  }

  // string dm_channel_name = 3;
  if (this->dm_channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dm_channel_name());
  }

  // int64 leaderID = 1;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_leaderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShardReplica::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShardReplica)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardReplica* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShardReplica>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShardReplica)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShardReplica)
    MergeFrom(*source);
  }
}

void ShardReplica::MergeFrom(const ShardReplica& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShardReplica)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_ids_.MergeFrom(from.node_ids_);
  if (from.leader_addr().size() > 0) {
    _internal_set_leader_addr(from._internal_leader_addr());
  }
  if (from.dm_channel_name().size() > 0) {
    _internal_set_dm_channel_name(from._internal_dm_channel_name());
  }
  if (from.leaderid() != 0) {
    _internal_set_leaderid(from._internal_leaderid());
  }
}

void ShardReplica::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShardReplica)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardReplica::CopyFrom(const ShardReplica& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShardReplica)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardReplica::IsInitialized() const {
  return true;
}

void ShardReplica::InternalSwap(ShardReplica* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_ids_.InternalSwap(&other->node_ids_);
  leader_addr_.Swap(&other->leader_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dm_channel_name_.Swap(&other->dm_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(leaderid_, other->leaderid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardReplica::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateCredentialRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CreateCredentialRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class CreateCredentialRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateCredentialRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateCredentialRequest::_Internal::base(const CreateCredentialRequest* msg) {
  return *msg->base_;
}
void CreateCredentialRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
CreateCredentialRequest::CreateCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateCredentialRequest)
}
CreateCredentialRequest::CreateCredentialRequest(const CreateCredentialRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&created_utc_timestamps_, &from.created_utc_timestamps_,
    static_cast<size_t>(reinterpret_cast<char*>(&modified_utc_timestamps_) -
    reinterpret_cast<char*>(&created_utc_timestamps_)) + sizeof(modified_utc_timestamps_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateCredentialRequest)
}

void CreateCredentialRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateCredentialRequest_milvus_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modified_utc_timestamps_) -
      reinterpret_cast<char*>(&base_)) + sizeof(modified_utc_timestamps_));
}

CreateCredentialRequest::~CreateCredentialRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateCredentialRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateCredentialRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreateCredentialRequest::ArenaDtor(void* object) {
  CreateCredentialRequest* _this = reinterpret_cast< CreateCredentialRequest* >(object);
  (void)_this;
}
void CreateCredentialRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCredentialRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateCredentialRequest& CreateCredentialRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateCredentialRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CreateCredentialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateCredentialRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&created_utc_timestamps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modified_utc_timestamps_) -
      reinterpret_cast<char*>(&created_utc_timestamps_)) + sizeof(modified_utc_timestamps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCredentialRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateCredentialRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateCredentialRequest.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 created_utc_timestamps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          created_utc_timestamps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 modified_utc_timestamps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          modified_utc_timestamps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCredentialRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateCredentialRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCredentialRequest.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCredentialRequest.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // uint64 created_utc_timestamps = 4;
  if (this->created_utc_timestamps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_created_utc_timestamps(), target);
  }

  // uint64 modified_utc_timestamps = 5;
  if (this->modified_utc_timestamps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_modified_utc_timestamps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateCredentialRequest)
  return target;
}

size_t CreateCredentialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateCredentialRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 created_utc_timestamps = 4;
  if (this->created_utc_timestamps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_created_utc_timestamps());
  }

  // uint64 modified_utc_timestamps = 5;
  if (this->modified_utc_timestamps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_modified_utc_timestamps());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateCredentialRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CreateCredentialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateCredentialRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateCredentialRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CreateCredentialRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CreateCredentialRequest)
    MergeFrom(*source);
  }
}

void CreateCredentialRequest::MergeFrom(const CreateCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateCredentialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.created_utc_timestamps() != 0) {
    _internal_set_created_utc_timestamps(from._internal_created_utc_timestamps());
  }
  if (from.modified_utc_timestamps() != 0) {
    _internal_set_modified_utc_timestamps(from._internal_modified_utc_timestamps());
  }
}

void CreateCredentialRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CreateCredentialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCredentialRequest::CopyFrom(const CreateCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateCredentialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCredentialRequest::IsInitialized() const {
  return true;
}

void CreateCredentialRequest::InternalSwap(CreateCredentialRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateCredentialRequest, modified_utc_timestamps_)
      + sizeof(CreateCredentialRequest::modified_utc_timestamps_)
      - PROTOBUF_FIELD_OFFSET(CreateCredentialRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCredentialRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateCredentialRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_UpdateCredentialRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class UpdateCredentialRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const UpdateCredentialRequest* msg);
};

const ::milvus::proto::common::MsgBase&
UpdateCredentialRequest::_Internal::base(const UpdateCredentialRequest* msg) {
  return *msg->base_;
}
void UpdateCredentialRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
UpdateCredentialRequest::UpdateCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.UpdateCredentialRequest)
}
UpdateCredentialRequest::UpdateCredentialRequest(const UpdateCredentialRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  oldpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_oldpassword().empty()) {
    oldpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_oldpassword(),
      GetArena());
  }
  newpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newpassword().empty()) {
    newpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_newpassword(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&created_utc_timestamps_, &from.created_utc_timestamps_,
    static_cast<size_t>(reinterpret_cast<char*>(&modified_utc_timestamps_) -
    reinterpret_cast<char*>(&created_utc_timestamps_)) + sizeof(modified_utc_timestamps_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.UpdateCredentialRequest)
}

void UpdateCredentialRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCredentialRequest_milvus_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oldpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modified_utc_timestamps_) -
      reinterpret_cast<char*>(&base_)) + sizeof(modified_utc_timestamps_));
}

UpdateCredentialRequest::~UpdateCredentialRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.UpdateCredentialRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCredentialRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oldpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void UpdateCredentialRequest::ArenaDtor(void* object) {
  UpdateCredentialRequest* _this = reinterpret_cast< UpdateCredentialRequest* >(object);
  (void)_this;
}
void UpdateCredentialRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCredentialRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCredentialRequest& UpdateCredentialRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCredentialRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void UpdateCredentialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.UpdateCredentialRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  oldpassword_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newpassword_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&created_utc_timestamps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modified_utc_timestamps_) -
      reinterpret_cast<char*>(&created_utc_timestamps_)) + sizeof(modified_utc_timestamps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCredentialRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.UpdateCredentialRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string oldPassword = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_oldpassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.UpdateCredentialRequest.oldPassword"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string newPassword = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_newpassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.UpdateCredentialRequest.newPassword"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 created_utc_timestamps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          created_utc_timestamps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 modified_utc_timestamps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          modified_utc_timestamps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCredentialRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.UpdateCredentialRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpdateCredentialRequest.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string oldPassword = 3;
  if (this->oldpassword().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldpassword().data(), static_cast<int>(this->_internal_oldpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpdateCredentialRequest.oldPassword");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oldpassword(), target);
  }

  // string newPassword = 4;
  if (this->newpassword().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newpassword().data(), static_cast<int>(this->_internal_newpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UpdateCredentialRequest.newPassword");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newpassword(), target);
  }

  // uint64 created_utc_timestamps = 5;
  if (this->created_utc_timestamps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_created_utc_timestamps(), target);
  }

  // uint64 modified_utc_timestamps = 6;
  if (this->modified_utc_timestamps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_modified_utc_timestamps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.UpdateCredentialRequest)
  return target;
}

size_t UpdateCredentialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.UpdateCredentialRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string oldPassword = 3;
  if (this->oldpassword().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldpassword());
  }

  // string newPassword = 4;
  if (this->newpassword().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newpassword());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 created_utc_timestamps = 5;
  if (this->created_utc_timestamps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_created_utc_timestamps());
  }

  // uint64 modified_utc_timestamps = 6;
  if (this->modified_utc_timestamps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_modified_utc_timestamps());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCredentialRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.UpdateCredentialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCredentialRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCredentialRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.UpdateCredentialRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.UpdateCredentialRequest)
    MergeFrom(*source);
  }
}

void UpdateCredentialRequest::MergeFrom(const UpdateCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.UpdateCredentialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.oldpassword().size() > 0) {
    _internal_set_oldpassword(from._internal_oldpassword());
  }
  if (from.newpassword().size() > 0) {
    _internal_set_newpassword(from._internal_newpassword());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.created_utc_timestamps() != 0) {
    _internal_set_created_utc_timestamps(from._internal_created_utc_timestamps());
  }
  if (from.modified_utc_timestamps() != 0) {
    _internal_set_modified_utc_timestamps(from._internal_modified_utc_timestamps());
  }
}

void UpdateCredentialRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.UpdateCredentialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCredentialRequest::CopyFrom(const UpdateCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.UpdateCredentialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCredentialRequest::IsInitialized() const {
  return true;
}

void UpdateCredentialRequest::InternalSwap(UpdateCredentialRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  oldpassword_.Swap(&other->oldpassword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newpassword_.Swap(&other->newpassword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateCredentialRequest, modified_utc_timestamps_)
      + sizeof(UpdateCredentialRequest::modified_utc_timestamps_)
      - PROTOBUF_FIELD_OFFSET(UpdateCredentialRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCredentialRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteCredentialRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DeleteCredentialRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DeleteCredentialRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DeleteCredentialRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DeleteCredentialRequest::_Internal::base(const DeleteCredentialRequest* msg) {
  return *msg->base_;
}
void DeleteCredentialRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DeleteCredentialRequest::DeleteCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DeleteCredentialRequest)
}
DeleteCredentialRequest::DeleteCredentialRequest(const DeleteCredentialRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DeleteCredentialRequest)
}

void DeleteCredentialRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteCredentialRequest_milvus_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DeleteCredentialRequest::~DeleteCredentialRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DeleteCredentialRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteCredentialRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DeleteCredentialRequest::ArenaDtor(void* object) {
  DeleteCredentialRequest* _this = reinterpret_cast< DeleteCredentialRequest* >(object);
  (void)_this;
}
void DeleteCredentialRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCredentialRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteCredentialRequest& DeleteCredentialRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteCredentialRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DeleteCredentialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DeleteCredentialRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCredentialRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DeleteCredentialRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCredentialRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DeleteCredentialRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DeleteCredentialRequest.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DeleteCredentialRequest)
  return target;
}

size_t DeleteCredentialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DeleteCredentialRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCredentialRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DeleteCredentialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCredentialRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCredentialRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DeleteCredentialRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DeleteCredentialRequest)
    MergeFrom(*source);
  }
}

void DeleteCredentialRequest::MergeFrom(const DeleteCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DeleteCredentialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DeleteCredentialRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DeleteCredentialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCredentialRequest::CopyFrom(const DeleteCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DeleteCredentialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCredentialRequest::IsInitialized() const {
  return true;
}

void DeleteCredentialRequest::InternalSwap(DeleteCredentialRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCredentialRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCredUsersResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ListCredUsersResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ListCredUsersResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListCredUsersResponse* msg);
};

const ::milvus::proto::common::Status&
ListCredUsersResponse::_Internal::status(const ListCredUsersResponse* msg) {
  return *msg->status_;
}
void ListCredUsersResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ListCredUsersResponse::ListCredUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  usernames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListCredUsersResponse)
}
ListCredUsersResponse::ListCredUsersResponse(const ListCredUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      usernames_(from.usernames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListCredUsersResponse)
}

void ListCredUsersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCredUsersResponse_milvus_2eproto.base);
  status_ = nullptr;
}

ListCredUsersResponse::~ListCredUsersResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListCredUsersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCredUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ListCredUsersResponse::ArenaDtor(void* object) {
  ListCredUsersResponse* _this = reinterpret_cast< ListCredUsersResponse* >(object);
  (void)_this;
}
void ListCredUsersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCredUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCredUsersResponse& ListCredUsersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCredUsersResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ListCredUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListCredUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usernames_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCredUsersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string usernames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_usernames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ListCredUsersResponse.usernames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCredUsersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListCredUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string usernames = 2;
  for (int i = 0, n = this->_internal_usernames_size(); i < n; i++) {
    const auto& s = this->_internal_usernames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListCredUsersResponse.usernames");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListCredUsersResponse)
  return target;
}

size_t ListCredUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListCredUsersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string usernames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(usernames_.size());
  for (int i = 0, n = usernames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      usernames_.Get(i));
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCredUsersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ListCredUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCredUsersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCredUsersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ListCredUsersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ListCredUsersResponse)
    MergeFrom(*source);
  }
}

void ListCredUsersResponse::MergeFrom(const ListCredUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListCredUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usernames_.MergeFrom(from.usernames_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ListCredUsersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ListCredUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCredUsersResponse::CopyFrom(const ListCredUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListCredUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCredUsersResponse::IsInitialized() const {
  return true;
}

void ListCredUsersResponse::InternalSwap(ListCredUsersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  usernames_.InternalSwap(&other->usernames_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCredUsersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCredUsersRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ListCredUsersRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ListCredUsersRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ListCredUsersRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ListCredUsersRequest::_Internal::base(const ListCredUsersRequest* msg) {
  return *msg->base_;
}
void ListCredUsersRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ListCredUsersRequest::ListCredUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListCredUsersRequest)
}
ListCredUsersRequest::ListCredUsersRequest(const ListCredUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListCredUsersRequest)
}

void ListCredUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCredUsersRequest_milvus_2eproto.base);
  base_ = nullptr;
}

ListCredUsersRequest::~ListCredUsersRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListCredUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCredUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void ListCredUsersRequest::ArenaDtor(void* object) {
  ListCredUsersRequest* _this = reinterpret_cast< ListCredUsersRequest* >(object);
  (void)_this;
}
void ListCredUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCredUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCredUsersRequest& ListCredUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCredUsersRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ListCredUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListCredUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCredUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCredUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListCredUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListCredUsersRequest)
  return target;
}

size_t ListCredUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListCredUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCredUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ListCredUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCredUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCredUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ListCredUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ListCredUsersRequest)
    MergeFrom(*source);
  }
}

void ListCredUsersRequest::MergeFrom(const ListCredUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListCredUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void ListCredUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ListCredUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCredUsersRequest::CopyFrom(const ListCredUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListCredUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCredUsersRequest::IsInitialized() const {
  return true;
}

void ListCredUsersRequest::InternalSwap(ListCredUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCredUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleEntity::InitAsDefaultInstance() {
}
class RoleEntity::_Internal {
 public:
};

RoleEntity::RoleEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.RoleEntity)
}
RoleEntity::RoleEntity(const RoleEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RoleEntity)
}

void RoleEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleEntity_milvus_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoleEntity::~RoleEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.RoleEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoleEntity::ArenaDtor(void* object) {
  RoleEntity* _this = reinterpret_cast< RoleEntity* >(object);
  (void)_this;
}
void RoleEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleEntity& RoleEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleEntity_milvus_2eproto.base);
  return *internal_default_instance();
}


void RoleEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.RoleEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.RoleEntity.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.RoleEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.RoleEntity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.RoleEntity)
  return target;
}

size_t RoleEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.RoleEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.RoleEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.RoleEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.RoleEntity)
    MergeFrom(*source);
  }
}

void RoleEntity::MergeFrom(const RoleEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.RoleEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void RoleEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.RoleEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleEntity::CopyFrom(const RoleEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.RoleEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleEntity::IsInitialized() const {
  return true;
}

void RoleEntity::InternalSwap(RoleEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserEntity::InitAsDefaultInstance() {
}
class UserEntity::_Internal {
 public:
};

UserEntity::UserEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.UserEntity)
}
UserEntity::UserEntity(const UserEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.UserEntity)
}

void UserEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserEntity_milvus_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserEntity::~UserEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.UserEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserEntity::ArenaDtor(void* object) {
  UserEntity* _this = reinterpret_cast< UserEntity* >(object);
  (void)_this;
}
void UserEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEntity& UserEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserEntity_milvus_2eproto.base);
  return *internal_default_instance();
}


void UserEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.UserEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.UserEntity.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.UserEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.UserEntity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.UserEntity)
  return target;
}

size_t UserEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.UserEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.UserEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const UserEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.UserEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.UserEntity)
    MergeFrom(*source);
  }
}

void UserEntity::MergeFrom(const UserEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.UserEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void UserEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.UserEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEntity::CopyFrom(const UserEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.UserEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEntity::IsInitialized() const {
  return true;
}

void UserEntity::InternalSwap(UserEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateRoleRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CreateRoleRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
  ::milvus::proto::milvus::_CreateRoleRequest_default_instance_._instance.get_mutable()->entity_ = const_cast< ::milvus::proto::milvus::RoleEntity*>(
      ::milvus::proto::milvus::RoleEntity::internal_default_instance());
}
class CreateRoleRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateRoleRequest* msg);
  static const ::milvus::proto::milvus::RoleEntity& entity(const CreateRoleRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateRoleRequest::_Internal::base(const CreateRoleRequest* msg) {
  return *msg->base_;
}
const ::milvus::proto::milvus::RoleEntity&
CreateRoleRequest::_Internal::entity(const CreateRoleRequest* msg) {
  return *msg->entity_;
}
void CreateRoleRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
CreateRoleRequest::CreateRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateRoleRequest)
}
CreateRoleRequest::CreateRoleRequest(const CreateRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_entity()) {
    entity_ = new ::milvus::proto::milvus::RoleEntity(*from.entity_);
  } else {
    entity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateRoleRequest)
}

void CreateRoleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateRoleRequest_milvus_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_) -
      reinterpret_cast<char*>(&base_)) + sizeof(entity_));
}

CreateRoleRequest::~CreateRoleRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateRoleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete entity_;
}

void CreateRoleRequest::ArenaDtor(void* object) {
  CreateRoleRequest* _this = reinterpret_cast< CreateRoleRequest* >(object);
  (void)_this;
}
void CreateRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRoleRequest& CreateRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRoleRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CreateRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && entity_ != nullptr) {
    delete entity_;
  }
  entity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.RoleEntity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .milvus.proto.milvus.RoleEntity entity = 2;
  if (this->has_entity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateRoleRequest)
  return target;
}

size_t CreateRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .milvus.proto.milvus.RoleEntity entity = 2;
  if (this->has_entity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CreateRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CreateRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CreateRoleRequest)
    MergeFrom(*source);
  }
}

void CreateRoleRequest::MergeFrom(const CreateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.has_entity()) {
    _internal_mutable_entity()->::milvus::proto::milvus::RoleEntity::MergeFrom(from._internal_entity());
  }
}

void CreateRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CreateRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleRequest::CopyFrom(const CreateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleRequest::IsInitialized() const {
  return true;
}

void CreateRoleRequest::InternalSwap(CreateRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoleRequest, entity_)
      + sizeof(CreateRoleRequest::entity_)
      - PROTOBUF_FIELD_OFFSET(CreateRoleRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropRoleRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DropRoleRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DropRoleRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropRoleRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropRoleRequest::_Internal::base(const DropRoleRequest* msg) {
  return *msg->base_;
}
void DropRoleRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DropRoleRequest::DropRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropRoleRequest)
}
DropRoleRequest::DropRoleRequest(const DropRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_name().empty()) {
    role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_role_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropRoleRequest)
}

void DropRoleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropRoleRequest_milvus_2eproto.base);
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DropRoleRequest::~DropRoleRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropRoleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DropRoleRequest::ArenaDtor(void* object) {
  DropRoleRequest* _this = reinterpret_cast< DropRoleRequest* >(object);
  (void)_this;
}
void DropRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropRoleRequest& DropRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropRoleRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DropRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_role_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropRoleRequest.role_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropRoleRequest.role_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropRoleRequest)
  return target;
}

size_t DropRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DropRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DropRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DropRoleRequest)
    MergeFrom(*source);
  }
}

void DropRoleRequest::MergeFrom(const DropRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_name().size() > 0) {
    _internal_set_role_name(from._internal_role_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DropRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DropRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropRoleRequest::CopyFrom(const DropRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropRoleRequest::IsInitialized() const {
  return true;
}

void DropRoleRequest::InternalSwap(DropRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  role_name_.Swap(&other->role_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperateUserRoleRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_OperateUserRoleRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class OperateUserRoleRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const OperateUserRoleRequest* msg);
};

const ::milvus::proto::common::MsgBase&
OperateUserRoleRequest::_Internal::base(const OperateUserRoleRequest* msg) {
  return *msg->base_;
}
void OperateUserRoleRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
OperateUserRoleRequest::OperateUserRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.OperateUserRoleRequest)
}
OperateUserRoleRequest::OperateUserRoleRequest(const OperateUserRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_name().empty()) {
    role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_role_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.OperateUserRoleRequest)
}

void OperateUserRoleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperateUserRoleRequest_milvus_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&base_)) + sizeof(type_));
}

OperateUserRoleRequest::~OperateUserRoleRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.OperateUserRoleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperateUserRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void OperateUserRoleRequest::ArenaDtor(void* object) {
  OperateUserRoleRequest* _this = reinterpret_cast< OperateUserRoleRequest* >(object);
  (void)_this;
}
void OperateUserRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperateUserRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperateUserRoleRequest& OperateUserRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperateUserRoleRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void OperateUserRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.OperateUserRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  role_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperateUserRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.OperateUserRoleRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_role_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.OperateUserRoleRequest.role_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.OperateUserRoleType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::milvus::proto::milvus::OperateUserRoleType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperateUserRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.OperateUserRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.OperateUserRoleRequest.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string role_name = 3;
  if (this->role_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.OperateUserRoleRequest.role_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_role_name(), target);
  }

  // .milvus.proto.milvus.OperateUserRoleType type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.OperateUserRoleRequest)
  return target;
}

size_t OperateUserRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.OperateUserRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string role_name = 3;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .milvus.proto.milvus.OperateUserRoleType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperateUserRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.OperateUserRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OperateUserRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperateUserRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.OperateUserRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.OperateUserRoleRequest)
    MergeFrom(*source);
  }
}

void OperateUserRoleRequest::MergeFrom(const OperateUserRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.OperateUserRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.role_name().size() > 0) {
    _internal_set_role_name(from._internal_role_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void OperateUserRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.OperateUserRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateUserRoleRequest::CopyFrom(const OperateUserRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.OperateUserRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateUserRoleRequest::IsInitialized() const {
  return true;
}

void OperateUserRoleRequest::InternalSwap(OperateUserRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  role_name_.Swap(&other->role_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperateUserRoleRequest, type_)
      + sizeof(OperateUserRoleRequest::type_)
      - PROTOBUF_FIELD_OFFSET(OperateUserRoleRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperateUserRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectRoleRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_SelectRoleRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
  ::milvus::proto::milvus::_SelectRoleRequest_default_instance_._instance.get_mutable()->role_ = const_cast< ::milvus::proto::milvus::RoleEntity*>(
      ::milvus::proto::milvus::RoleEntity::internal_default_instance());
}
class SelectRoleRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SelectRoleRequest* msg);
  static const ::milvus::proto::milvus::RoleEntity& role(const SelectRoleRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SelectRoleRequest::_Internal::base(const SelectRoleRequest* msg) {
  return *msg->base_;
}
const ::milvus::proto::milvus::RoleEntity&
SelectRoleRequest::_Internal::role(const SelectRoleRequest* msg) {
  return *msg->role_;
}
void SelectRoleRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
SelectRoleRequest::SelectRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectRoleRequest)
}
SelectRoleRequest::SelectRoleRequest(const SelectRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_role()) {
    role_ = new ::milvus::proto::milvus::RoleEntity(*from.role_);
  } else {
    role_ = nullptr;
  }
  include_user_info_ = from.include_user_info_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectRoleRequest)
}

void SelectRoleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectRoleRequest_milvus_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_user_info_) -
      reinterpret_cast<char*>(&base_)) + sizeof(include_user_info_));
}

SelectRoleRequest::~SelectRoleRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectRoleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete role_;
}

void SelectRoleRequest::ArenaDtor(void* object) {
  SelectRoleRequest* _this = reinterpret_cast< SelectRoleRequest* >(object);
  (void)_this;
}
void SelectRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectRoleRequest& SelectRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectRoleRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void SelectRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  include_user_info_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.RoleEntity role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_user_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          include_user_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .milvus.proto.milvus.RoleEntity role = 2;
  if (this->has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::role(this), target, stream);
  }

  // bool include_user_info = 3;
  if (this->include_user_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_user_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectRoleRequest)
  return target;
}

size_t SelectRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .milvus.proto.milvus.RoleEntity role = 2;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // bool include_user_info = 3;
  if (this->include_user_info() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.SelectRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.SelectRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.SelectRoleRequest)
    MergeFrom(*source);
  }
}

void SelectRoleRequest::MergeFrom(const SelectRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.has_role()) {
    _internal_mutable_role()->::milvus::proto::milvus::RoleEntity::MergeFrom(from._internal_role());
  }
  if (from.include_user_info() != 0) {
    _internal_set_include_user_info(from._internal_include_user_info());
  }
}

void SelectRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.SelectRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectRoleRequest::CopyFrom(const SelectRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRoleRequest::IsInitialized() const {
  return true;
}

void SelectRoleRequest::InternalSwap(SelectRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectRoleRequest, include_user_info_)
      + sizeof(SelectRoleRequest::include_user_info_)
      - PROTOBUF_FIELD_OFFSET(SelectRoleRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleResult::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_RoleResult_default_instance_._instance.get_mutable()->role_ = const_cast< ::milvus::proto::milvus::RoleEntity*>(
      ::milvus::proto::milvus::RoleEntity::internal_default_instance());
}
class RoleResult::_Internal {
 public:
  static const ::milvus::proto::milvus::RoleEntity& role(const RoleResult* msg);
};

const ::milvus::proto::milvus::RoleEntity&
RoleResult::_Internal::role(const RoleResult* msg) {
  return *msg->role_;
}
RoleResult::RoleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.RoleResult)
}
RoleResult::RoleResult(const RoleResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::milvus::proto::milvus::RoleEntity(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RoleResult)
}

void RoleResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleResult_milvus_2eproto.base);
  role_ = nullptr;
}

RoleResult::~RoleResult() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.RoleResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void RoleResult::ArenaDtor(void* object) {
  RoleResult* _this = reinterpret_cast< RoleResult* >(object);
  (void)_this;
}
void RoleResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleResult& RoleResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleResult_milvus_2eproto.base);
  return *internal_default_instance();
}


void RoleResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.RoleResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.milvus.RoleEntity role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.UserEntity users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.RoleResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.RoleEntity role = 1;
  if (this->has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // repeated .milvus.proto.milvus.UserEntity users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.RoleResult)
  return target;
}

size_t RoleResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.RoleResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.UserEntity users = 2;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.milvus.RoleEntity role = 1;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.RoleResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.RoleResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.RoleResult)
    MergeFrom(*source);
  }
}

void RoleResult::MergeFrom(const RoleResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.RoleResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.has_role()) {
    _internal_mutable_role()->::milvus::proto::milvus::RoleEntity::MergeFrom(from._internal_role());
  }
}

void RoleResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.RoleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleResult::CopyFrom(const RoleResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.RoleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleResult::IsInitialized() const {
  return true;
}

void RoleResult::InternalSwap(RoleResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectRoleResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_SelectRoleResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class SelectRoleResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const SelectRoleResponse* msg);
};

const ::milvus::proto::common::Status&
SelectRoleResponse::_Internal::status(const SelectRoleResponse* msg) {
  return *msg->status_;
}
void SelectRoleResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SelectRoleResponse::SelectRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectRoleResponse)
}
SelectRoleResponse::SelectRoleResponse(const SelectRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectRoleResponse)
}

void SelectRoleResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectRoleResponse_milvus_2eproto.base);
  status_ = nullptr;
}

SelectRoleResponse::~SelectRoleResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectRoleResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectRoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SelectRoleResponse::ArenaDtor(void* object) {
  SelectRoleResponse* _this = reinterpret_cast< SelectRoleResponse* >(object);
  (void)_this;
}
void SelectRoleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectRoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectRoleResponse& SelectRoleResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectRoleResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void SelectRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectRoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.RoleResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectRoleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.milvus.RoleResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectRoleResponse)
  return target;
}

size_t SelectRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectRoleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.RoleResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectRoleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.SelectRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectRoleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectRoleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.SelectRoleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.SelectRoleResponse)
    MergeFrom(*source);
  }
}

void SelectRoleResponse::MergeFrom(const SelectRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void SelectRoleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.SelectRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectRoleResponse::CopyFrom(const SelectRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRoleResponse::IsInitialized() const {
  return true;
}

void SelectRoleResponse::InternalSwap(SelectRoleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectRoleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectUserRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_SelectUserRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
  ::milvus::proto::milvus::_SelectUserRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::milvus::proto::milvus::UserEntity*>(
      ::milvus::proto::milvus::UserEntity::internal_default_instance());
}
class SelectUserRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SelectUserRequest* msg);
  static const ::milvus::proto::milvus::UserEntity& user(const SelectUserRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SelectUserRequest::_Internal::base(const SelectUserRequest* msg) {
  return *msg->base_;
}
const ::milvus::proto::milvus::UserEntity&
SelectUserRequest::_Internal::user(const SelectUserRequest* msg) {
  return *msg->user_;
}
void SelectUserRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
SelectUserRequest::SelectUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectUserRequest)
}
SelectUserRequest::SelectUserRequest(const SelectUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::milvus::proto::milvus::UserEntity(*from.user_);
  } else {
    user_ = nullptr;
  }
  include_role_info_ = from.include_role_info_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectUserRequest)
}

void SelectUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectUserRequest_milvus_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_role_info_) -
      reinterpret_cast<char*>(&base_)) + sizeof(include_role_info_));
}

SelectUserRequest::~SelectUserRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete user_;
}

void SelectUserRequest::ArenaDtor(void* object) {
  SelectUserRequest* _this = reinterpret_cast< SelectUserRequest* >(object);
  (void)_this;
}
void SelectUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectUserRequest& SelectUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectUserRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void SelectUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  include_role_info_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.UserEntity user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_role_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          include_role_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .milvus.proto.milvus.UserEntity user = 2;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user(this), target, stream);
  }

  // bool include_role_info = 3;
  if (this->include_role_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_role_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectUserRequest)
  return target;
}

size_t SelectUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .milvus.proto.milvus.UserEntity user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // bool include_role_info = 3;
  if (this->include_role_info() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.SelectUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.SelectUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.SelectUserRequest)
    MergeFrom(*source);
  }
}

void SelectUserRequest::MergeFrom(const SelectUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::milvus::proto::milvus::UserEntity::MergeFrom(from._internal_user());
  }
  if (from.include_role_info() != 0) {
    _internal_set_include_role_info(from._internal_include_role_info());
  }
}

void SelectUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.SelectUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectUserRequest::CopyFrom(const SelectUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectUserRequest::IsInitialized() const {
  return true;
}

void SelectUserRequest::InternalSwap(SelectUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectUserRequest, include_role_info_)
      + sizeof(SelectUserRequest::include_role_info_)
      - PROTOBUF_FIELD_OFFSET(SelectUserRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserResult::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_UserResult_default_instance_._instance.get_mutable()->user_ = const_cast< ::milvus::proto::milvus::UserEntity*>(
      ::milvus::proto::milvus::UserEntity::internal_default_instance());
}
class UserResult::_Internal {
 public:
  static const ::milvus::proto::milvus::UserEntity& user(const UserResult* msg);
};

const ::milvus::proto::milvus::UserEntity&
UserResult::_Internal::user(const UserResult* msg) {
  return *msg->user_;
}
UserResult::UserResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.UserResult)
}
UserResult::UserResult(const UserResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::milvus::proto::milvus::UserEntity(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.UserResult)
}

void UserResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserResult_milvus_2eproto.base);
  user_ = nullptr;
}

UserResult::~UserResult() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.UserResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void UserResult::ArenaDtor(void* object) {
  UserResult* _this = reinterpret_cast< UserResult* >(object);
  (void)_this;
}
void UserResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserResult& UserResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserResult_milvus_2eproto.base);
  return *internal_default_instance();
}


void UserResult::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.UserResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.milvus.UserEntity user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.RoleEntity roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.UserResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.UserEntity user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // repeated .milvus.proto.milvus.RoleEntity roles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_roles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.UserResult)
  return target;
}

size_t UserResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.UserResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.RoleEntity roles = 2;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.milvus.UserEntity user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.UserResult)
  GOOGLE_DCHECK_NE(&from, this);
  const UserResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.UserResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.UserResult)
    MergeFrom(*source);
  }
}

void UserResult::MergeFrom(const UserResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.UserResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from.has_user()) {
    _internal_mutable_user()->::milvus::proto::milvus::UserEntity::MergeFrom(from._internal_user());
  }
}

void UserResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.UserResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserResult::CopyFrom(const UserResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.UserResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResult::IsInitialized() const {
  return true;
}

void UserResult::InternalSwap(UserResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectUserResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_SelectUserResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class SelectUserResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const SelectUserResponse* msg);
};

const ::milvus::proto::common::Status&
SelectUserResponse::_Internal::status(const SelectUserResponse* msg) {
  return *msg->status_;
}
void SelectUserResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SelectUserResponse::SelectUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectUserResponse)
}
SelectUserResponse::SelectUserResponse(const SelectUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectUserResponse)
}

void SelectUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectUserResponse_milvus_2eproto.base);
  status_ = nullptr;
}

SelectUserResponse::~SelectUserResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SelectUserResponse::ArenaDtor(void* object) {
  SelectUserResponse* _this = reinterpret_cast< SelectUserResponse* >(object);
  (void)_this;
}
void SelectUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectUserResponse& SelectUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectUserResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void SelectUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.UserResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.milvus.UserResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectUserResponse)
  return target;
}

size_t SelectUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.UserResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.SelectUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.SelectUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.SelectUserResponse)
    MergeFrom(*source);
  }
}

void SelectUserResponse::MergeFrom(const SelectUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void SelectUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.SelectUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectUserResponse::CopyFrom(const SelectUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectUserResponse::IsInitialized() const {
  return true;
}

void SelectUserResponse::InternalSwap(SelectUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectEntity::InitAsDefaultInstance() {
}
class ObjectEntity::_Internal {
 public:
};

ObjectEntity::ObjectEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ObjectEntity)
}
ObjectEntity::ObjectEntity(const ObjectEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ObjectEntity)
}

void ObjectEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectEntity_milvus_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ObjectEntity::~ObjectEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ObjectEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectEntity::ArenaDtor(void* object) {
  ObjectEntity* _this = reinterpret_cast< ObjectEntity* >(object);
  (void)_this;
}
void ObjectEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectEntity& ObjectEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectEntity_milvus_2eproto.base);
  return *internal_default_instance();
}


void ObjectEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ObjectEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ObjectEntity.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ObjectEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ObjectEntity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ObjectEntity)
  return target;
}

size_t ObjectEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ObjectEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ObjectEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ObjectEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ObjectEntity)
    MergeFrom(*source);
  }
}

void ObjectEntity::MergeFrom(const ObjectEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ObjectEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void ObjectEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ObjectEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectEntity::CopyFrom(const ObjectEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ObjectEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectEntity::IsInitialized() const {
  return true;
}

void ObjectEntity::InternalSwap(ObjectEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrivilegeEntity::InitAsDefaultInstance() {
}
class PrivilegeEntity::_Internal {
 public:
};

PrivilegeEntity::PrivilegeEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.PrivilegeEntity)
}
PrivilegeEntity::PrivilegeEntity(const PrivilegeEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.PrivilegeEntity)
}

void PrivilegeEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrivilegeEntity_milvus_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrivilegeEntity::~PrivilegeEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.PrivilegeEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrivilegeEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrivilegeEntity::ArenaDtor(void* object) {
  PrivilegeEntity* _this = reinterpret_cast< PrivilegeEntity* >(object);
  (void)_this;
}
void PrivilegeEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrivilegeEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivilegeEntity& PrivilegeEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrivilegeEntity_milvus_2eproto.base);
  return *internal_default_instance();
}


void PrivilegeEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.PrivilegeEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivilegeEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.PrivilegeEntity.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrivilegeEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.PrivilegeEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.PrivilegeEntity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.PrivilegeEntity)
  return target;
}

size_t PrivilegeEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.PrivilegeEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivilegeEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.PrivilegeEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivilegeEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrivilegeEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.PrivilegeEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.PrivilegeEntity)
    MergeFrom(*source);
  }
}

void PrivilegeEntity::MergeFrom(const PrivilegeEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.PrivilegeEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void PrivilegeEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.PrivilegeEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivilegeEntity::CopyFrom(const PrivilegeEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.PrivilegeEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivilegeEntity::IsInitialized() const {
  return true;
}

void PrivilegeEntity::InternalSwap(PrivilegeEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivilegeEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GrantorEntity::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GrantorEntity_default_instance_._instance.get_mutable()->user_ = const_cast< ::milvus::proto::milvus::UserEntity*>(
      ::milvus::proto::milvus::UserEntity::internal_default_instance());
  ::milvus::proto::milvus::_GrantorEntity_default_instance_._instance.get_mutable()->privilege_ = const_cast< ::milvus::proto::milvus::PrivilegeEntity*>(
      ::milvus::proto::milvus::PrivilegeEntity::internal_default_instance());
}
class GrantorEntity::_Internal {
 public:
  static const ::milvus::proto::milvus::UserEntity& user(const GrantorEntity* msg);
  static const ::milvus::proto::milvus::PrivilegeEntity& privilege(const GrantorEntity* msg);
};

const ::milvus::proto::milvus::UserEntity&
GrantorEntity::_Internal::user(const GrantorEntity* msg) {
  return *msg->user_;
}
const ::milvus::proto::milvus::PrivilegeEntity&
GrantorEntity::_Internal::privilege(const GrantorEntity* msg) {
  return *msg->privilege_;
}
GrantorEntity::GrantorEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GrantorEntity)
}
GrantorEntity::GrantorEntity(const GrantorEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::milvus::proto::milvus::UserEntity(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_privilege()) {
    privilege_ = new ::milvus::proto::milvus::PrivilegeEntity(*from.privilege_);
  } else {
    privilege_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GrantorEntity)
}

void GrantorEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GrantorEntity_milvus_2eproto.base);
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privilege_) -
      reinterpret_cast<char*>(&user_)) + sizeof(privilege_));
}

GrantorEntity::~GrantorEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GrantorEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GrantorEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete privilege_;
}

void GrantorEntity::ArenaDtor(void* object) {
  GrantorEntity* _this = reinterpret_cast< GrantorEntity* >(object);
  (void)_this;
}
void GrantorEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GrantorEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GrantorEntity& GrantorEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GrantorEntity_milvus_2eproto.base);
  return *internal_default_instance();
}


void GrantorEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GrantorEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArena() == nullptr && privilege_ != nullptr) {
    delete privilege_;
  }
  privilege_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantorEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.milvus.UserEntity user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.PrivilegeEntity privilege = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_privilege(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GrantorEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GrantorEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.UserEntity user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // .milvus.proto.milvus.PrivilegeEntity privilege = 2;
  if (this->has_privilege()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::privilege(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GrantorEntity)
  return target;
}

size_t GrantorEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GrantorEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.milvus.UserEntity user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .milvus.proto.milvus.PrivilegeEntity privilege = 2;
  if (this->has_privilege()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *privilege_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrantorEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GrantorEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const GrantorEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrantorEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GrantorEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GrantorEntity)
    MergeFrom(*source);
  }
}

void GrantorEntity::MergeFrom(const GrantorEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GrantorEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::milvus::proto::milvus::UserEntity::MergeFrom(from._internal_user());
  }
  if (from.has_privilege()) {
    _internal_mutable_privilege()->::milvus::proto::milvus::PrivilegeEntity::MergeFrom(from._internal_privilege());
  }
}

void GrantorEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GrantorEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrantorEntity::CopyFrom(const GrantorEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GrantorEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantorEntity::IsInitialized() const {
  return true;
}

void GrantorEntity::InternalSwap(GrantorEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrantorEntity, privilege_)
      + sizeof(GrantorEntity::privilege_)
      - PROTOBUF_FIELD_OFFSET(GrantorEntity, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantorEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GrantPrivilegeEntity::InitAsDefaultInstance() {
}
class GrantPrivilegeEntity::_Internal {
 public:
};

GrantPrivilegeEntity::GrantPrivilegeEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GrantPrivilegeEntity)
}
GrantPrivilegeEntity::GrantPrivilegeEntity(const GrantPrivilegeEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GrantPrivilegeEntity)
}

void GrantPrivilegeEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GrantPrivilegeEntity_milvus_2eproto.base);
}

GrantPrivilegeEntity::~GrantPrivilegeEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GrantPrivilegeEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GrantPrivilegeEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GrantPrivilegeEntity::ArenaDtor(void* object) {
  GrantPrivilegeEntity* _this = reinterpret_cast< GrantPrivilegeEntity* >(object);
  (void)_this;
}
void GrantPrivilegeEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GrantPrivilegeEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GrantPrivilegeEntity& GrantPrivilegeEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GrantPrivilegeEntity_milvus_2eproto.base);
  return *internal_default_instance();
}


void GrantPrivilegeEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GrantPrivilegeEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantPrivilegeEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .milvus.proto.milvus.GrantorEntity entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GrantPrivilegeEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GrantPrivilegeEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.GrantorEntity entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GrantPrivilegeEntity)
  return target;
}

size_t GrantPrivilegeEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GrantPrivilegeEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.GrantorEntity entities = 1;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrantPrivilegeEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GrantPrivilegeEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const GrantPrivilegeEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrantPrivilegeEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GrantPrivilegeEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GrantPrivilegeEntity)
    MergeFrom(*source);
  }
}

void GrantPrivilegeEntity::MergeFrom(const GrantPrivilegeEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GrantPrivilegeEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
}

void GrantPrivilegeEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GrantPrivilegeEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrantPrivilegeEntity::CopyFrom(const GrantPrivilegeEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GrantPrivilegeEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantPrivilegeEntity::IsInitialized() const {
  return true;
}

void GrantPrivilegeEntity::InternalSwap(GrantPrivilegeEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantPrivilegeEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GrantEntity::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GrantEntity_default_instance_._instance.get_mutable()->role_ = const_cast< ::milvus::proto::milvus::RoleEntity*>(
      ::milvus::proto::milvus::RoleEntity::internal_default_instance());
  ::milvus::proto::milvus::_GrantEntity_default_instance_._instance.get_mutable()->object_ = const_cast< ::milvus::proto::milvus::ObjectEntity*>(
      ::milvus::proto::milvus::ObjectEntity::internal_default_instance());
  ::milvus::proto::milvus::_GrantEntity_default_instance_._instance.get_mutable()->grantor_ = const_cast< ::milvus::proto::milvus::GrantorEntity*>(
      ::milvus::proto::milvus::GrantorEntity::internal_default_instance());
}
class GrantEntity::_Internal {
 public:
  static const ::milvus::proto::milvus::RoleEntity& role(const GrantEntity* msg);
  static const ::milvus::proto::milvus::ObjectEntity& object(const GrantEntity* msg);
  static const ::milvus::proto::milvus::GrantorEntity& grantor(const GrantEntity* msg);
};

const ::milvus::proto::milvus::RoleEntity&
GrantEntity::_Internal::role(const GrantEntity* msg) {
  return *msg->role_;
}
const ::milvus::proto::milvus::ObjectEntity&
GrantEntity::_Internal::object(const GrantEntity* msg) {
  return *msg->object_;
}
const ::milvus::proto::milvus::GrantorEntity&
GrantEntity::_Internal::grantor(const GrantEntity* msg) {
  return *msg->grantor_;
}
GrantEntity::GrantEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GrantEntity)
}
GrantEntity::GrantEntity(const GrantEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_name().empty()) {
    object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_object_name(),
      GetArena());
  }
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_role()) {
    role_ = new ::milvus::proto::milvus::RoleEntity(*from.role_);
  } else {
    role_ = nullptr;
  }
  if (from._internal_has_object()) {
    object_ = new ::milvus::proto::milvus::ObjectEntity(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from._internal_has_grantor()) {
    grantor_ = new ::milvus::proto::milvus::GrantorEntity(*from.grantor_);
  } else {
    grantor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GrantEntity)
}

void GrantEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GrantEntity_milvus_2eproto.base);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grantor_) -
      reinterpret_cast<char*>(&role_)) + sizeof(grantor_));
}

GrantEntity::~GrantEntity() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GrantEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GrantEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  object_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_;
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete grantor_;
}

void GrantEntity::ArenaDtor(void* object) {
  GrantEntity* _this = reinterpret_cast< GrantEntity* >(object);
  (void)_this;
}
void GrantEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GrantEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GrantEntity& GrantEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GrantEntity_milvus_2eproto.base);
  return *internal_default_instance();
}


void GrantEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GrantEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  if (GetArena() == nullptr && grantor_ != nullptr) {
    delete grantor_;
  }
  grantor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.milvus.RoleEntity role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.ObjectEntity object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string object_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_object_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GrantEntity.object_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.GrantorEntity grantor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_grantor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GrantEntity.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GrantEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GrantEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.milvus.RoleEntity role = 1;
  if (this->has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // .milvus.proto.milvus.ObjectEntity object = 2;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  // string object_name = 3;
  if (this->object_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_name().data(), static_cast<int>(this->_internal_object_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GrantEntity.object_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_object_name(), target);
  }

  // .milvus.proto.milvus.GrantorEntity grantor = 4;
  if (this->has_grantor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::grantor(this), target, stream);
  }

  // string db_name = 5;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GrantEntity.db_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GrantEntity)
  return target;
}

size_t GrantEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GrantEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_name = 3;
  if (this->object_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_name());
  }

  // string db_name = 5;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.milvus.RoleEntity role = 1;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .milvus.proto.milvus.ObjectEntity object = 2;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .milvus.proto.milvus.GrantorEntity grantor = 4;
  if (this->has_grantor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grantor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrantEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GrantEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const GrantEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrantEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GrantEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GrantEntity)
    MergeFrom(*source);
  }
}

void GrantEntity::MergeFrom(const GrantEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GrantEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_name().size() > 0) {
    _internal_set_object_name(from._internal_object_name());
  }
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_role()) {
    _internal_mutable_role()->::milvus::proto::milvus::RoleEntity::MergeFrom(from._internal_role());
  }
  if (from.has_object()) {
    _internal_mutable_object()->::milvus::proto::milvus::ObjectEntity::MergeFrom(from._internal_object());
  }
  if (from.has_grantor()) {
    _internal_mutable_grantor()->::milvus::proto::milvus::GrantorEntity::MergeFrom(from._internal_grantor());
  }
}

void GrantEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GrantEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrantEntity::CopyFrom(const GrantEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GrantEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantEntity::IsInitialized() const {
  return true;
}

void GrantEntity::InternalSwap(GrantEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_name_.Swap(&other->object_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrantEntity, grantor_)
      + sizeof(GrantEntity::grantor_)
      - PROTOBUF_FIELD_OFFSET(GrantEntity, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectGrantRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_SelectGrantRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
  ::milvus::proto::milvus::_SelectGrantRequest_default_instance_._instance.get_mutable()->entity_ = const_cast< ::milvus::proto::milvus::GrantEntity*>(
      ::milvus::proto::milvus::GrantEntity::internal_default_instance());
}
class SelectGrantRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SelectGrantRequest* msg);
  static const ::milvus::proto::milvus::GrantEntity& entity(const SelectGrantRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SelectGrantRequest::_Internal::base(const SelectGrantRequest* msg) {
  return *msg->base_;
}
const ::milvus::proto::milvus::GrantEntity&
SelectGrantRequest::_Internal::entity(const SelectGrantRequest* msg) {
  return *msg->entity_;
}
void SelectGrantRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
SelectGrantRequest::SelectGrantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectGrantRequest)
}
SelectGrantRequest::SelectGrantRequest(const SelectGrantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_entity()) {
    entity_ = new ::milvus::proto::milvus::GrantEntity(*from.entity_);
  } else {
    entity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectGrantRequest)
}

void SelectGrantRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectGrantRequest_milvus_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_) -
      reinterpret_cast<char*>(&base_)) + sizeof(entity_));
}

SelectGrantRequest::~SelectGrantRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectGrantRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectGrantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete entity_;
}

void SelectGrantRequest::ArenaDtor(void* object) {
  SelectGrantRequest* _this = reinterpret_cast< SelectGrantRequest* >(object);
  (void)_this;
}
void SelectGrantRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectGrantRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectGrantRequest& SelectGrantRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectGrantRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void SelectGrantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectGrantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && entity_ != nullptr) {
    delete entity_;
  }
  entity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectGrantRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.GrantEntity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectGrantRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectGrantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .milvus.proto.milvus.GrantEntity entity = 2;
  if (this->has_entity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectGrantRequest)
  return target;
}

size_t SelectGrantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectGrantRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .milvus.proto.milvus.GrantEntity entity = 2;
  if (this->has_entity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectGrantRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.SelectGrantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectGrantRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectGrantRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.SelectGrantRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.SelectGrantRequest)
    MergeFrom(*source);
  }
}

void SelectGrantRequest::MergeFrom(const SelectGrantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectGrantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.has_entity()) {
    _internal_mutable_entity()->::milvus::proto::milvus::GrantEntity::MergeFrom(from._internal_entity());
  }
}

void SelectGrantRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.SelectGrantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectGrantRequest::CopyFrom(const SelectGrantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectGrantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectGrantRequest::IsInitialized() const {
  return true;
}

void SelectGrantRequest::InternalSwap(SelectGrantRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectGrantRequest, entity_)
      + sizeof(SelectGrantRequest::entity_)
      - PROTOBUF_FIELD_OFFSET(SelectGrantRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectGrantRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectGrantResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_SelectGrantResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class SelectGrantResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const SelectGrantResponse* msg);
};

const ::milvus::proto::common::Status&
SelectGrantResponse::_Internal::status(const SelectGrantResponse* msg) {
  return *msg->status_;
}
void SelectGrantResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SelectGrantResponse::SelectGrantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.SelectGrantResponse)
}
SelectGrantResponse::SelectGrantResponse(const SelectGrantResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SelectGrantResponse)
}

void SelectGrantResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectGrantResponse_milvus_2eproto.base);
  status_ = nullptr;
}

SelectGrantResponse::~SelectGrantResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SelectGrantResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectGrantResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SelectGrantResponse::ArenaDtor(void* object) {
  SelectGrantResponse* _this = reinterpret_cast< SelectGrantResponse* >(object);
  (void)_this;
}
void SelectGrantResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectGrantResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectGrantResponse& SelectGrantResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectGrantResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void SelectGrantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SelectGrantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectGrantResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.GrantEntity entities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectGrantResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SelectGrantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.milvus.GrantEntity entities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SelectGrantResponse)
  return target;
}

size_t SelectGrantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SelectGrantResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.GrantEntity entities = 2;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectGrantResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.SelectGrantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectGrantResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectGrantResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.SelectGrantResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.SelectGrantResponse)
    MergeFrom(*source);
  }
}

void SelectGrantResponse::MergeFrom(const SelectGrantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SelectGrantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void SelectGrantResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.SelectGrantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectGrantResponse::CopyFrom(const SelectGrantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SelectGrantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectGrantResponse::IsInitialized() const {
  return true;
}

void SelectGrantResponse::InternalSwap(SelectGrantResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectGrantResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperatePrivilegeRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_OperatePrivilegeRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
  ::milvus::proto::milvus::_OperatePrivilegeRequest_default_instance_._instance.get_mutable()->entity_ = const_cast< ::milvus::proto::milvus::GrantEntity*>(
      ::milvus::proto::milvus::GrantEntity::internal_default_instance());
}
class OperatePrivilegeRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const OperatePrivilegeRequest* msg);
  static const ::milvus::proto::milvus::GrantEntity& entity(const OperatePrivilegeRequest* msg);
};

const ::milvus::proto::common::MsgBase&
OperatePrivilegeRequest::_Internal::base(const OperatePrivilegeRequest* msg) {
  return *msg->base_;
}
const ::milvus::proto::milvus::GrantEntity&
OperatePrivilegeRequest::_Internal::entity(const OperatePrivilegeRequest* msg) {
  return *msg->entity_;
}
void OperatePrivilegeRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
OperatePrivilegeRequest::OperatePrivilegeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.OperatePrivilegeRequest)
}
OperatePrivilegeRequest::OperatePrivilegeRequest(const OperatePrivilegeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_entity()) {
    entity_ = new ::milvus::proto::milvus::GrantEntity(*from.entity_);
  } else {
    entity_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.OperatePrivilegeRequest)
}

void OperatePrivilegeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperatePrivilegeRequest_milvus_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&base_)) + sizeof(type_));
}

OperatePrivilegeRequest::~OperatePrivilegeRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.OperatePrivilegeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperatePrivilegeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete entity_;
}

void OperatePrivilegeRequest::ArenaDtor(void* object) {
  OperatePrivilegeRequest* _this = reinterpret_cast< OperatePrivilegeRequest* >(object);
  (void)_this;
}
void OperatePrivilegeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperatePrivilegeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperatePrivilegeRequest& OperatePrivilegeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperatePrivilegeRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void OperatePrivilegeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.OperatePrivilegeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && entity_ != nullptr) {
    delete entity_;
  }
  entity_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatePrivilegeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.GrantEntity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.OperatePrivilegeType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::milvus::proto::milvus::OperatePrivilegeType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperatePrivilegeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.OperatePrivilegeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .milvus.proto.milvus.GrantEntity entity = 2;
  if (this->has_entity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity(this), target, stream);
  }

  // .milvus.proto.milvus.OperatePrivilegeType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.OperatePrivilegeRequest)
  return target;
}

size_t OperatePrivilegeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.OperatePrivilegeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .milvus.proto.milvus.GrantEntity entity = 2;
  if (this->has_entity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_);
  }

  // .milvus.proto.milvus.OperatePrivilegeType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperatePrivilegeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.OperatePrivilegeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OperatePrivilegeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperatePrivilegeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.OperatePrivilegeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.OperatePrivilegeRequest)
    MergeFrom(*source);
  }
}

void OperatePrivilegeRequest::MergeFrom(const OperatePrivilegeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.OperatePrivilegeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.has_entity()) {
    _internal_mutable_entity()->::milvus::proto::milvus::GrantEntity::MergeFrom(from._internal_entity());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void OperatePrivilegeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.OperatePrivilegeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatePrivilegeRequest::CopyFrom(const OperatePrivilegeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.OperatePrivilegeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatePrivilegeRequest::IsInitialized() const {
  return true;
}

void OperatePrivilegeRequest::InternalSwap(OperatePrivilegeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperatePrivilegeRequest, type_)
      + sizeof(OperatePrivilegeRequest::type_)
      - PROTOBUF_FIELD_OFFSET(OperatePrivilegeRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatePrivilegeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLoadingProgressRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetLoadingProgressRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetLoadingProgressRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetLoadingProgressRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetLoadingProgressRequest::_Internal::base(const GetLoadingProgressRequest* msg) {
  return *msg->base_;
}
void GetLoadingProgressRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetLoadingProgressRequest::GetLoadingProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetLoadingProgressRequest)
}
GetLoadingProgressRequest::GetLoadingProgressRequest(const GetLoadingProgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_names_(from.partition_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetLoadingProgressRequest)
}

void GetLoadingProgressRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLoadingProgressRequest_milvus_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetLoadingProgressRequest::~GetLoadingProgressRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetLoadingProgressRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLoadingProgressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetLoadingProgressRequest::ArenaDtor(void* object) {
  GetLoadingProgressRequest* _this = reinterpret_cast< GetLoadingProgressRequest* >(object);
  (void)_this;
}
void GetLoadingProgressRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLoadingProgressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLoadingProgressRequest& GetLoadingProgressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLoadingProgressRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetLoadingProgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetLoadingProgressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLoadingProgressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetLoadingProgressRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetLoadingProgressRequest.partition_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string db_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetLoadingProgressRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLoadingProgressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetLoadingProgressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string collection_name = 2;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadingProgressRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 3;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadingProgressRequest.partition_names");
    target = stream->WriteString(3, s, target);
  }

  // string db_name = 4;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadingProgressRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetLoadingProgressRequest)
  return target;
}

size_t GetLoadingProgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetLoadingProgressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(partition_names_.size());
  for (int i = 0, n = partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      partition_names_.Get(i));
  }

  // string collection_name = 2;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 4;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLoadingProgressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetLoadingProgressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLoadingProgressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLoadingProgressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetLoadingProgressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetLoadingProgressRequest)
    MergeFrom(*source);
  }
}

void GetLoadingProgressRequest::MergeFrom(const GetLoadingProgressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetLoadingProgressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void GetLoadingProgressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetLoadingProgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoadingProgressRequest::CopyFrom(const GetLoadingProgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetLoadingProgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoadingProgressRequest::IsInitialized() const {
  return true;
}

void GetLoadingProgressRequest::InternalSwap(GetLoadingProgressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_names_.InternalSwap(&other->partition_names_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLoadingProgressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLoadingProgressResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetLoadingProgressResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetLoadingProgressResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetLoadingProgressResponse* msg);
};

const ::milvus::proto::common::Status&
GetLoadingProgressResponse::_Internal::status(const GetLoadingProgressResponse* msg) {
  return *msg->status_;
}
void GetLoadingProgressResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetLoadingProgressResponse::GetLoadingProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetLoadingProgressResponse)
}
GetLoadingProgressResponse::GetLoadingProgressResponse(const GetLoadingProgressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_progress_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(refresh_progress_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetLoadingProgressResponse)
}

void GetLoadingProgressResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLoadingProgressResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_progress_) -
      reinterpret_cast<char*>(&status_)) + sizeof(refresh_progress_));
}

GetLoadingProgressResponse::~GetLoadingProgressResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetLoadingProgressResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLoadingProgressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetLoadingProgressResponse::ArenaDtor(void* object) {
  GetLoadingProgressResponse* _this = reinterpret_cast< GetLoadingProgressResponse* >(object);
  (void)_this;
}
void GetLoadingProgressResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLoadingProgressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLoadingProgressResponse& GetLoadingProgressResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLoadingProgressResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetLoadingProgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetLoadingProgressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_progress_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(refresh_progress_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLoadingProgressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 refresh_progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          refresh_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLoadingProgressResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetLoadingProgressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int64 progress = 2;
  if (this->progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_progress(), target);
  }

  // int64 refresh_progress = 3;
  if (this->refresh_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_refresh_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetLoadingProgressResponse)
  return target;
}

size_t GetLoadingProgressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetLoadingProgressResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 progress = 2;
  if (this->progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_progress());
  }

  // int64 refresh_progress = 3;
  if (this->refresh_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_refresh_progress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLoadingProgressResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetLoadingProgressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLoadingProgressResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLoadingProgressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetLoadingProgressResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetLoadingProgressResponse)
    MergeFrom(*source);
  }
}

void GetLoadingProgressResponse::MergeFrom(const GetLoadingProgressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetLoadingProgressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
  if (from.refresh_progress() != 0) {
    _internal_set_refresh_progress(from._internal_refresh_progress());
  }
}

void GetLoadingProgressResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetLoadingProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoadingProgressResponse::CopyFrom(const GetLoadingProgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetLoadingProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoadingProgressResponse::IsInitialized() const {
  return true;
}

void GetLoadingProgressResponse::InternalSwap(GetLoadingProgressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLoadingProgressResponse, refresh_progress_)
      + sizeof(GetLoadingProgressResponse::refresh_progress_)
      - PROTOBUF_FIELD_OFFSET(GetLoadingProgressResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLoadingProgressResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLoadStateRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetLoadStateRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetLoadStateRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetLoadStateRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetLoadStateRequest::_Internal::base(const GetLoadStateRequest* msg) {
  return *msg->base_;
}
void GetLoadStateRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetLoadStateRequest::GetLoadStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetLoadStateRequest)
}
GetLoadStateRequest::GetLoadStateRequest(const GetLoadStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_names_(from.partition_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetLoadStateRequest)
}

void GetLoadStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLoadStateRequest_milvus_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetLoadStateRequest::~GetLoadStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetLoadStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLoadStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetLoadStateRequest::ArenaDtor(void* object) {
  GetLoadStateRequest* _this = reinterpret_cast< GetLoadStateRequest* >(object);
  (void)_this;
}
void GetLoadStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLoadStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLoadStateRequest& GetLoadStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLoadStateRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetLoadStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetLoadStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLoadStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetLoadStateRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_partition_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetLoadStateRequest.partition_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string db_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetLoadStateRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLoadStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetLoadStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string collection_name = 2;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadStateRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection_name(), target);
  }

  // repeated string partition_names = 3;
  for (int i = 0, n = this->_internal_partition_names_size(); i < n; i++) {
    const auto& s = this->_internal_partition_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadStateRequest.partition_names");
    target = stream->WriteString(3, s, target);
  }

  // string db_name = 4;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetLoadStateRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetLoadStateRequest)
  return target;
}

size_t GetLoadStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetLoadStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(partition_names_.size());
  for (int i = 0, n = partition_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      partition_names_.Get(i));
  }

  // string collection_name = 2;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 4;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLoadStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetLoadStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLoadStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLoadStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetLoadStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetLoadStateRequest)
    MergeFrom(*source);
  }
}

void GetLoadStateRequest::MergeFrom(const GetLoadStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetLoadStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void GetLoadStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetLoadStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoadStateRequest::CopyFrom(const GetLoadStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetLoadStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoadStateRequest::IsInitialized() const {
  return true;
}

void GetLoadStateRequest::InternalSwap(GetLoadStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_names_.InternalSwap(&other->partition_names_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLoadStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLoadStateResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetLoadStateResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetLoadStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetLoadStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetLoadStateResponse::_Internal::status(const GetLoadStateResponse* msg) {
  return *msg->status_;
}
void GetLoadStateResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetLoadStateResponse::GetLoadStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetLoadStateResponse)
}
GetLoadStateResponse::GetLoadStateResponse(const GetLoadStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetLoadStateResponse)
}

void GetLoadStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLoadStateResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

GetLoadStateResponse::~GetLoadStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetLoadStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLoadStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetLoadStateResponse::ArenaDtor(void* object) {
  GetLoadStateResponse* _this = reinterpret_cast< GetLoadStateResponse* >(object);
  (void)_this;
}
void GetLoadStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLoadStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLoadStateResponse& GetLoadStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLoadStateResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetLoadStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetLoadStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLoadStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.LoadState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::milvus::proto::common::LoadState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLoadStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetLoadStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .milvus.proto.common.LoadState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetLoadStateResponse)
  return target;
}

size_t GetLoadStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetLoadStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .milvus.proto.common.LoadState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLoadStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetLoadStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLoadStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLoadStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetLoadStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetLoadStateResponse)
    MergeFrom(*source);
  }
}

void GetLoadStateResponse::MergeFrom(const GetLoadStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetLoadStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void GetLoadStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetLoadStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoadStateResponse::CopyFrom(const GetLoadStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetLoadStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoadStateResponse::IsInitialized() const {
  return true;
}

void GetLoadStateResponse::InternalSwap(GetLoadStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLoadStateResponse, state_)
      + sizeof(GetLoadStateResponse::state_)
      - PROTOBUF_FIELD_OFFSET(GetLoadStateResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLoadStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MilvusExt::InitAsDefaultInstance() {
}
class MilvusExt::_Internal {
 public:
};

MilvusExt::MilvusExt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.MilvusExt)
}
MilvusExt::MilvusExt(const MilvusExt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.MilvusExt)
}

void MilvusExt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MilvusExt_milvus_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MilvusExt::~MilvusExt() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.MilvusExt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MilvusExt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MilvusExt::ArenaDtor(void* object) {
  MilvusExt* _this = reinterpret_cast< MilvusExt* >(object);
  (void)_this;
}
void MilvusExt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MilvusExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MilvusExt& MilvusExt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MilvusExt_milvus_2eproto.base);
  return *internal_default_instance();
}


void MilvusExt::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.MilvusExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MilvusExt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.MilvusExt.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MilvusExt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.MilvusExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.MilvusExt.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.MilvusExt)
  return target;
}

size_t MilvusExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.MilvusExt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MilvusExt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.MilvusExt)
  GOOGLE_DCHECK_NE(&from, this);
  const MilvusExt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MilvusExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.MilvusExt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.MilvusExt)
    MergeFrom(*source);
  }
}

void MilvusExt::MergeFrom(const MilvusExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.MilvusExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void MilvusExt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.MilvusExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MilvusExt::CopyFrom(const MilvusExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.MilvusExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MilvusExt::IsInitialized() const {
  return true;
}

void MilvusExt::InternalSwap(MilvusExt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MilvusExt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetVersionRequest::InitAsDefaultInstance() {
}
class GetVersionRequest::_Internal {
 public:
};

GetVersionRequest::GetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetVersionRequest)
}
GetVersionRequest::GetVersionRequest(const GetVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetVersionRequest)
}

void GetVersionRequest::SharedCtor() {
}

GetVersionRequest::~GetVersionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetVersionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetVersionRequest::ArenaDtor(void* object) {
  GetVersionRequest* _this = reinterpret_cast< GetVersionRequest* >(object);
  (void)_this;
}
void GetVersionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVersionRequest& GetVersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVersionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetVersionRequest)
  return target;
}

size_t GetVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetVersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetVersionRequest)
    MergeFrom(*source);
  }
}

void GetVersionRequest::MergeFrom(const GetVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetVersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVersionRequest::CopyFrom(const GetVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVersionRequest::IsInitialized() const {
  return true;
}

void GetVersionRequest::InternalSwap(GetVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetVersionResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetVersionResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetVersionResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetVersionResponse* msg);
};

const ::milvus::proto::common::Status&
GetVersionResponse::_Internal::status(const GetVersionResponse* msg) {
  return *msg->status_;
}
void GetVersionResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetVersionResponse::GetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetVersionResponse)
}
GetVersionResponse::GetVersionResponse(const GetVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetVersionResponse)
}

void GetVersionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVersionResponse_milvus_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

GetVersionResponse::~GetVersionResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetVersionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GetVersionResponse::ArenaDtor(void* object) {
  GetVersionResponse* _this = reinterpret_cast< GetVersionResponse* >(object);
  (void)_this;
}
void GetVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVersionResponse& GetVersionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVersionResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetVersionResponse.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVersionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetVersionResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetVersionResponse)
  return target;
}

size_t GetVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetVersionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVersionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVersionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVersionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetVersionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetVersionResponse)
    MergeFrom(*source);
  }
}

void GetVersionResponse::MergeFrom(const GetVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void GetVersionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVersionResponse::CopyFrom(const GetVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVersionResponse::IsInitialized() const {
  return true;
}

void GetVersionResponse::InternalSwap(GetVersionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVersionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckHealthRequest::InitAsDefaultInstance() {
}
class CheckHealthRequest::_Internal {
 public:
};

CheckHealthRequest::CheckHealthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CheckHealthRequest)
}
CheckHealthRequest::CheckHealthRequest(const CheckHealthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CheckHealthRequest)
}

void CheckHealthRequest::SharedCtor() {
}

CheckHealthRequest::~CheckHealthRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CheckHealthRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckHealthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckHealthRequest::ArenaDtor(void* object) {
  CheckHealthRequest* _this = reinterpret_cast< CheckHealthRequest* >(object);
  (void)_this;
}
void CheckHealthRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckHealthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckHealthRequest& CheckHealthRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckHealthRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CheckHealthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CheckHealthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckHealthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckHealthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CheckHealthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CheckHealthRequest)
  return target;
}

size_t CheckHealthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CheckHealthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckHealthRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CheckHealthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckHealthRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckHealthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CheckHealthRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CheckHealthRequest)
    MergeFrom(*source);
  }
}

void CheckHealthRequest::MergeFrom(const CheckHealthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CheckHealthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckHealthRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CheckHealthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckHealthRequest::CopyFrom(const CheckHealthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CheckHealthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckHealthRequest::IsInitialized() const {
  return true;
}

void CheckHealthRequest::InternalSwap(CheckHealthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckHealthRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckHealthResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CheckHealthResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class CheckHealthResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const CheckHealthResponse* msg);
};

const ::milvus::proto::common::Status&
CheckHealthResponse::_Internal::status(const CheckHealthResponse* msg) {
  return *msg->status_;
}
void CheckHealthResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
CheckHealthResponse::CheckHealthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reasons_(arena),
  quota_states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CheckHealthResponse)
}
CheckHealthResponse::CheckHealthResponse(const CheckHealthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reasons_(from.reasons_),
      quota_states_(from.quota_states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ishealthy_ = from.ishealthy_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CheckHealthResponse)
}

void CheckHealthResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckHealthResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ishealthy_) -
      reinterpret_cast<char*>(&status_)) + sizeof(ishealthy_));
}

CheckHealthResponse::~CheckHealthResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CheckHealthResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckHealthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void CheckHealthResponse::ArenaDtor(void* object) {
  CheckHealthResponse* _this = reinterpret_cast< CheckHealthResponse* >(object);
  (void)_this;
}
void CheckHealthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckHealthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckHealthResponse& CheckHealthResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckHealthResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void CheckHealthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CheckHealthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reasons_.Clear();
  quota_states_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ishealthy_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckHealthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isHealthy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ishealthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string reasons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reasons();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CheckHealthResponse.reasons"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.QuotaState quota_states = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_quota_states(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_quota_states(static_cast<::milvus::proto::milvus::QuotaState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckHealthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CheckHealthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // bool isHealthy = 2;
  if (this->ishealthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ishealthy(), target);
  }

  // repeated string reasons = 3;
  for (int i = 0, n = this->_internal_reasons_size(); i < n; i++) {
    const auto& s = this->_internal_reasons(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CheckHealthResponse.reasons");
    target = stream->WriteString(3, s, target);
  }

  // repeated .milvus.proto.milvus.QuotaState quota_states = 4;
  {
    int byte_size = _quota_states_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, quota_states_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CheckHealthResponse)
  return target;
}

size_t CheckHealthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CheckHealthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string reasons = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reasons_.size());
  for (int i = 0, n = reasons_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reasons_.Get(i));
  }

  // repeated .milvus.proto.milvus.QuotaState quota_states = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_quota_states_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_quota_states(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _quota_states_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool isHealthy = 2;
  if (this->ishealthy() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckHealthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CheckHealthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckHealthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckHealthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CheckHealthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CheckHealthResponse)
    MergeFrom(*source);
  }
}

void CheckHealthResponse::MergeFrom(const CheckHealthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CheckHealthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reasons_.MergeFrom(from.reasons_);
  quota_states_.MergeFrom(from.quota_states_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.ishealthy() != 0) {
    _internal_set_ishealthy(from._internal_ishealthy());
  }
}

void CheckHealthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CheckHealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckHealthResponse::CopyFrom(const CheckHealthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CheckHealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckHealthResponse::IsInitialized() const {
  return true;
}

void CheckHealthResponse::InternalSwap(CheckHealthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reasons_.InternalSwap(&other->reasons_);
  quota_states_.InternalSwap(&other->quota_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckHealthResponse, ishealthy_)
      + sizeof(CheckHealthResponse::ishealthy_)
      - PROTOBUF_FIELD_OFFSET(CheckHealthResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckHealthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateResourceGroupRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CreateResourceGroupRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class CreateResourceGroupRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateResourceGroupRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateResourceGroupRequest::_Internal::base(const CreateResourceGroupRequest* msg) {
  return *msg->base_;
}
void CreateResourceGroupRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
CreateResourceGroupRequest::CreateResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateResourceGroupRequest)
}
CreateResourceGroupRequest::CreateResourceGroupRequest(const CreateResourceGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource_group().empty()) {
    resource_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_group(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateResourceGroupRequest)
}

void CreateResourceGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateResourceGroupRequest_milvus_2eproto.base);
  resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

CreateResourceGroupRequest::~CreateResourceGroupRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateResourceGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateResourceGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  resource_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreateResourceGroupRequest::ArenaDtor(void* object) {
  CreateResourceGroupRequest* _this = reinterpret_cast< CreateResourceGroupRequest* >(object);
  (void)_this;
}
void CreateResourceGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateResourceGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateResourceGroupRequest& CreateResourceGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateResourceGroupRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CreateResourceGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateResourceGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateResourceGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_resource_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateResourceGroupRequest.resource_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateResourceGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateResourceGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string resource_group = 2;
  if (this->resource_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_group().data(), static_cast<int>(this->_internal_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateResourceGroupRequest.resource_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateResourceGroupRequest)
  return target;
}

size_t CreateResourceGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateResourceGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_group = 2;
  if (this->resource_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_group());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateResourceGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CreateResourceGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateResourceGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateResourceGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CreateResourceGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CreateResourceGroupRequest)
    MergeFrom(*source);
  }
}

void CreateResourceGroupRequest::MergeFrom(const CreateResourceGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateResourceGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource_group().size() > 0) {
    _internal_set_resource_group(from._internal_resource_group());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void CreateResourceGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CreateResourceGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateResourceGroupRequest::CopyFrom(const CreateResourceGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateResourceGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResourceGroupRequest::IsInitialized() const {
  return true;
}

void CreateResourceGroupRequest::InternalSwap(CreateResourceGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_group_.Swap(&other->resource_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateResourceGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropResourceGroupRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DropResourceGroupRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DropResourceGroupRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropResourceGroupRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropResourceGroupRequest::_Internal::base(const DropResourceGroupRequest* msg) {
  return *msg->base_;
}
void DropResourceGroupRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DropResourceGroupRequest::DropResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropResourceGroupRequest)
}
DropResourceGroupRequest::DropResourceGroupRequest(const DropResourceGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource_group().empty()) {
    resource_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_group(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropResourceGroupRequest)
}

void DropResourceGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropResourceGroupRequest_milvus_2eproto.base);
  resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DropResourceGroupRequest::~DropResourceGroupRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropResourceGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropResourceGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  resource_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DropResourceGroupRequest::ArenaDtor(void* object) {
  DropResourceGroupRequest* _this = reinterpret_cast< DropResourceGroupRequest* >(object);
  (void)_this;
}
void DropResourceGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropResourceGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropResourceGroupRequest& DropResourceGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropResourceGroupRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DropResourceGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropResourceGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropResourceGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_resource_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropResourceGroupRequest.resource_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropResourceGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropResourceGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string resource_group = 2;
  if (this->resource_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_group().data(), static_cast<int>(this->_internal_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropResourceGroupRequest.resource_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropResourceGroupRequest)
  return target;
}

size_t DropResourceGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropResourceGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_group = 2;
  if (this->resource_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_group());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropResourceGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DropResourceGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropResourceGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropResourceGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DropResourceGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DropResourceGroupRequest)
    MergeFrom(*source);
  }
}

void DropResourceGroupRequest::MergeFrom(const DropResourceGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropResourceGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource_group().size() > 0) {
    _internal_set_resource_group(from._internal_resource_group());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DropResourceGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DropResourceGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropResourceGroupRequest::CopyFrom(const DropResourceGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropResourceGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropResourceGroupRequest::IsInitialized() const {
  return true;
}

void DropResourceGroupRequest::InternalSwap(DropResourceGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_group_.Swap(&other->resource_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropResourceGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferNodeRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_TransferNodeRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class TransferNodeRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const TransferNodeRequest* msg);
};

const ::milvus::proto::common::MsgBase&
TransferNodeRequest::_Internal::base(const TransferNodeRequest* msg) {
  return *msg->base_;
}
void TransferNodeRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
TransferNodeRequest::TransferNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.TransferNodeRequest)
}
TransferNodeRequest::TransferNodeRequest(const TransferNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_resource_group().empty()) {
    source_resource_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_resource_group(),
      GetArena());
  }
  target_resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_resource_group().empty()) {
    target_resource_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_resource_group(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  num_node_ = from.num_node_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.TransferNodeRequest)
}

void TransferNodeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferNodeRequest_milvus_2eproto.base);
  source_resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_node_) -
      reinterpret_cast<char*>(&base_)) + sizeof(num_node_));
}

TransferNodeRequest::~TransferNodeRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.TransferNodeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferNodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_resource_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_resource_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void TransferNodeRequest::ArenaDtor(void* object) {
  TransferNodeRequest* _this = reinterpret_cast< TransferNodeRequest* >(object);
  (void)_this;
}
void TransferNodeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferNodeRequest& TransferNodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferNodeRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void TransferNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.TransferNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_resource_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_resource_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  num_node_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferNodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_resource_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.TransferNodeRequest.source_resource_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_resource_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_resource_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.TransferNodeRequest.target_resource_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferNodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.TransferNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string source_resource_group = 2;
  if (this->source_resource_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_resource_group().data(), static_cast<int>(this->_internal_source_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferNodeRequest.source_resource_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_resource_group(), target);
  }

  // string target_resource_group = 3;
  if (this->target_resource_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_resource_group().data(), static_cast<int>(this->_internal_target_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferNodeRequest.target_resource_group");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_resource_group(), target);
  }

  // int32 num_node = 4;
  if (this->num_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_node(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.TransferNodeRequest)
  return target;
}

size_t TransferNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.TransferNodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_resource_group = 2;
  if (this->source_resource_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_resource_group());
  }

  // string target_resource_group = 3;
  if (this->target_resource_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_resource_group());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int32 num_node = 4;
  if (this->num_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_node());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferNodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.TransferNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferNodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferNodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.TransferNodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.TransferNodeRequest)
    MergeFrom(*source);
  }
}

void TransferNodeRequest::MergeFrom(const TransferNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.TransferNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_resource_group().size() > 0) {
    _internal_set_source_resource_group(from._internal_source_resource_group());
  }
  if (from.target_resource_group().size() > 0) {
    _internal_set_target_resource_group(from._internal_target_resource_group());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.num_node() != 0) {
    _internal_set_num_node(from._internal_num_node());
  }
}

void TransferNodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.TransferNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferNodeRequest::CopyFrom(const TransferNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.TransferNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferNodeRequest::IsInitialized() const {
  return true;
}

void TransferNodeRequest::InternalSwap(TransferNodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_resource_group_.Swap(&other->source_resource_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_resource_group_.Swap(&other->target_resource_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferNodeRequest, num_node_)
      + sizeof(TransferNodeRequest::num_node_)
      - PROTOBUF_FIELD_OFFSET(TransferNodeRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferNodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferReplicaRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_TransferReplicaRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class TransferReplicaRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const TransferReplicaRequest* msg);
};

const ::milvus::proto::common::MsgBase&
TransferReplicaRequest::_Internal::base(const TransferReplicaRequest* msg) {
  return *msg->base_;
}
void TransferReplicaRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
TransferReplicaRequest::TransferReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.TransferReplicaRequest)
}
TransferReplicaRequest::TransferReplicaRequest(const TransferReplicaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_resource_group().empty()) {
    source_resource_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_resource_group(),
      GetArena());
  }
  target_resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_resource_group().empty()) {
    target_resource_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_resource_group(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  num_replica_ = from.num_replica_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.TransferReplicaRequest)
}

void TransferReplicaRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferReplicaRequest_milvus_2eproto.base);
  source_resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_replica_) -
      reinterpret_cast<char*>(&base_)) + sizeof(num_replica_));
}

TransferReplicaRequest::~TransferReplicaRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.TransferReplicaRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferReplicaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_resource_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_resource_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void TransferReplicaRequest::ArenaDtor(void* object) {
  TransferReplicaRequest* _this = reinterpret_cast< TransferReplicaRequest* >(object);
  (void)_this;
}
void TransferReplicaRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferReplicaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferReplicaRequest& TransferReplicaRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferReplicaRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void TransferReplicaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.TransferReplicaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_resource_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_resource_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  num_replica_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferReplicaRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_resource_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.TransferReplicaRequest.source_resource_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_resource_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_resource_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.TransferReplicaRequest.target_resource_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.TransferReplicaRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_replica = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_replica_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.TransferReplicaRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferReplicaRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.TransferReplicaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string source_resource_group = 2;
  if (this->source_resource_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_resource_group().data(), static_cast<int>(this->_internal_source_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferReplicaRequest.source_resource_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_resource_group(), target);
  }

  // string target_resource_group = 3;
  if (this->target_resource_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_resource_group().data(), static_cast<int>(this->_internal_target_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferReplicaRequest.target_resource_group");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_resource_group(), target);
  }

  // string collection_name = 4;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferReplicaRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collection_name(), target);
  }

  // int64 num_replica = 5;
  if (this->num_replica() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_replica(), target);
  }

  // string db_name = 6;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.TransferReplicaRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.TransferReplicaRequest)
  return target;
}

size_t TransferReplicaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.TransferReplicaRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_resource_group = 2;
  if (this->source_resource_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_resource_group());
  }

  // string target_resource_group = 3;
  if (this->target_resource_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_resource_group());
  }

  // string collection_name = 4;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string db_name = 6;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 num_replica = 5;
  if (this->num_replica() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_replica());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferReplicaRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.TransferReplicaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferReplicaRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferReplicaRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.TransferReplicaRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.TransferReplicaRequest)
    MergeFrom(*source);
  }
}

void TransferReplicaRequest::MergeFrom(const TransferReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.TransferReplicaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_resource_group().size() > 0) {
    _internal_set_source_resource_group(from._internal_source_resource_group());
  }
  if (from.target_resource_group().size() > 0) {
    _internal_set_target_resource_group(from._internal_target_resource_group());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.num_replica() != 0) {
    _internal_set_num_replica(from._internal_num_replica());
  }
}

void TransferReplicaRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.TransferReplicaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferReplicaRequest::CopyFrom(const TransferReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.TransferReplicaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferReplicaRequest::IsInitialized() const {
  return true;
}

void TransferReplicaRequest::InternalSwap(TransferReplicaRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_resource_group_.Swap(&other->source_resource_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_resource_group_.Swap(&other->target_resource_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferReplicaRequest, num_replica_)
      + sizeof(TransferReplicaRequest::num_replica_)
      - PROTOBUF_FIELD_OFFSET(TransferReplicaRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferReplicaRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListResourceGroupsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ListResourceGroupsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ListResourceGroupsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ListResourceGroupsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ListResourceGroupsRequest::_Internal::base(const ListResourceGroupsRequest* msg) {
  return *msg->base_;
}
void ListResourceGroupsRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ListResourceGroupsRequest::ListResourceGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListResourceGroupsRequest)
}
ListResourceGroupsRequest::ListResourceGroupsRequest(const ListResourceGroupsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListResourceGroupsRequest)
}

void ListResourceGroupsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListResourceGroupsRequest_milvus_2eproto.base);
  base_ = nullptr;
}

ListResourceGroupsRequest::~ListResourceGroupsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListResourceGroupsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListResourceGroupsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void ListResourceGroupsRequest::ArenaDtor(void* object) {
  ListResourceGroupsRequest* _this = reinterpret_cast< ListResourceGroupsRequest* >(object);
  (void)_this;
}
void ListResourceGroupsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListResourceGroupsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListResourceGroupsRequest& ListResourceGroupsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListResourceGroupsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ListResourceGroupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListResourceGroupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResourceGroupsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListResourceGroupsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListResourceGroupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListResourceGroupsRequest)
  return target;
}

size_t ListResourceGroupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListResourceGroupsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListResourceGroupsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ListResourceGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListResourceGroupsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListResourceGroupsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ListResourceGroupsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ListResourceGroupsRequest)
    MergeFrom(*source);
  }
}

void ListResourceGroupsRequest::MergeFrom(const ListResourceGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListResourceGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void ListResourceGroupsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ListResourceGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListResourceGroupsRequest::CopyFrom(const ListResourceGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListResourceGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResourceGroupsRequest::IsInitialized() const {
  return true;
}

void ListResourceGroupsRequest::InternalSwap(ListResourceGroupsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResourceGroupsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListResourceGroupsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ListResourceGroupsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ListResourceGroupsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListResourceGroupsResponse* msg);
};

const ::milvus::proto::common::Status&
ListResourceGroupsResponse::_Internal::status(const ListResourceGroupsResponse* msg) {
  return *msg->status_;
}
void ListResourceGroupsResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ListResourceGroupsResponse::ListResourceGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resource_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListResourceGroupsResponse)
}
ListResourceGroupsResponse::ListResourceGroupsResponse(const ListResourceGroupsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_groups_(from.resource_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListResourceGroupsResponse)
}

void ListResourceGroupsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListResourceGroupsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

ListResourceGroupsResponse::~ListResourceGroupsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListResourceGroupsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListResourceGroupsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ListResourceGroupsResponse::ArenaDtor(void* object) {
  ListResourceGroupsResponse* _this = reinterpret_cast< ListResourceGroupsResponse* >(object);
  (void)_this;
}
void ListResourceGroupsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListResourceGroupsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListResourceGroupsResponse& ListResourceGroupsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListResourceGroupsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ListResourceGroupsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListResourceGroupsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_groups_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResourceGroupsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string resource_groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resource_groups();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ListResourceGroupsResponse.resource_groups"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListResourceGroupsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListResourceGroupsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string resource_groups = 2;
  for (int i = 0, n = this->_internal_resource_groups_size(); i < n; i++) {
    const auto& s = this->_internal_resource_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListResourceGroupsResponse.resource_groups");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListResourceGroupsResponse)
  return target;
}

size_t ListResourceGroupsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListResourceGroupsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string resource_groups = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(resource_groups_.size());
  for (int i = 0, n = resource_groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      resource_groups_.Get(i));
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListResourceGroupsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ListResourceGroupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListResourceGroupsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListResourceGroupsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ListResourceGroupsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ListResourceGroupsResponse)
    MergeFrom(*source);
  }
}

void ListResourceGroupsResponse::MergeFrom(const ListResourceGroupsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListResourceGroupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_groups_.MergeFrom(from.resource_groups_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ListResourceGroupsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ListResourceGroupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListResourceGroupsResponse::CopyFrom(const ListResourceGroupsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListResourceGroupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResourceGroupsResponse::IsInitialized() const {
  return true;
}

void ListResourceGroupsResponse::InternalSwap(ListResourceGroupsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_groups_.InternalSwap(&other->resource_groups_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResourceGroupsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeResourceGroupRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeResourceGroupRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DescribeResourceGroupRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeResourceGroupRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeResourceGroupRequest::_Internal::base(const DescribeResourceGroupRequest* msg) {
  return *msg->base_;
}
void DescribeResourceGroupRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DescribeResourceGroupRequest::DescribeResourceGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeResourceGroupRequest)
}
DescribeResourceGroupRequest::DescribeResourceGroupRequest(const DescribeResourceGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource_group().empty()) {
    resource_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_group(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeResourceGroupRequest)
}

void DescribeResourceGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeResourceGroupRequest_milvus_2eproto.base);
  resource_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DescribeResourceGroupRequest::~DescribeResourceGroupRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeResourceGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeResourceGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  resource_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DescribeResourceGroupRequest::ArenaDtor(void* object) {
  DescribeResourceGroupRequest* _this = reinterpret_cast< DescribeResourceGroupRequest* >(object);
  (void)_this;
}
void DescribeResourceGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeResourceGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeResourceGroupRequest& DescribeResourceGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeResourceGroupRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeResourceGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeResourceGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_resource_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DescribeResourceGroupRequest.resource_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeResourceGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string resource_group = 2;
  if (this->resource_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_group().data(), static_cast<int>(this->_internal_resource_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeResourceGroupRequest.resource_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeResourceGroupRequest)
  return target;
}

size_t DescribeResourceGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_group = 2;
  if (this->resource_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_group());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeResourceGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeResourceGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeResourceGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeResourceGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeResourceGroupRequest)
    MergeFrom(*source);
  }
}

void DescribeResourceGroupRequest::MergeFrom(const DescribeResourceGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource_group().size() > 0) {
    _internal_set_resource_group(from._internal_resource_group());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DescribeResourceGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeResourceGroupRequest::CopyFrom(const DescribeResourceGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeResourceGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeResourceGroupRequest::IsInitialized() const {
  return true;
}

void DescribeResourceGroupRequest::InternalSwap(DescribeResourceGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_group_.Swap(&other->resource_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeResourceGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeResourceGroupResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeResourceGroupResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
  ::milvus::proto::milvus::_DescribeResourceGroupResponse_default_instance_._instance.get_mutable()->resource_group_ = const_cast< ::milvus::proto::milvus::ResourceGroup*>(
      ::milvus::proto::milvus::ResourceGroup::internal_default_instance());
}
class DescribeResourceGroupResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeResourceGroupResponse* msg);
  static const ::milvus::proto::milvus::ResourceGroup& resource_group(const DescribeResourceGroupResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeResourceGroupResponse::_Internal::status(const DescribeResourceGroupResponse* msg) {
  return *msg->status_;
}
const ::milvus::proto::milvus::ResourceGroup&
DescribeResourceGroupResponse::_Internal::resource_group(const DescribeResourceGroupResponse* msg) {
  return *msg->resource_group_;
}
void DescribeResourceGroupResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DescribeResourceGroupResponse::DescribeResourceGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DescribeResourceGroupResponse)
}
DescribeResourceGroupResponse::DescribeResourceGroupResponse(const DescribeResourceGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_resource_group()) {
    resource_group_ = new ::milvus::proto::milvus::ResourceGroup(*from.resource_group_);
  } else {
    resource_group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeResourceGroupResponse)
}

void DescribeResourceGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeResourceGroupResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_group_) -
      reinterpret_cast<char*>(&status_)) + sizeof(resource_group_));
}

DescribeResourceGroupResponse::~DescribeResourceGroupResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeResourceGroupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeResourceGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete resource_group_;
}

void DescribeResourceGroupResponse::ArenaDtor(void* object) {
  DescribeResourceGroupResponse* _this = reinterpret_cast< DescribeResourceGroupResponse* >(object);
  (void)_this;
}
void DescribeResourceGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeResourceGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeResourceGroupResponse& DescribeResourceGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeResourceGroupResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeResourceGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && resource_group_ != nullptr) {
    delete resource_group_;
  }
  resource_group_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeResourceGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.ResourceGroup resource_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeResourceGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .milvus.proto.milvus.ResourceGroup resource_group = 2;
  if (this->has_resource_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::resource_group(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeResourceGroupResponse)
  return target;
}

size_t DescribeResourceGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .milvus.proto.milvus.ResourceGroup resource_group = 2;
  if (this->has_resource_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_group_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeResourceGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeResourceGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeResourceGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeResourceGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeResourceGroupResponse)
    MergeFrom(*source);
  }
}

void DescribeResourceGroupResponse::MergeFrom(const DescribeResourceGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.has_resource_group()) {
    _internal_mutable_resource_group()->::milvus::proto::milvus::ResourceGroup::MergeFrom(from._internal_resource_group());
  }
}

void DescribeResourceGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeResourceGroupResponse::CopyFrom(const DescribeResourceGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeResourceGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeResourceGroupResponse::IsInitialized() const {
  return true;
}

void DescribeResourceGroupResponse::InternalSwap(DescribeResourceGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeResourceGroupResponse, resource_group_)
      + sizeof(DescribeResourceGroupResponse::resource_group_)
      - PROTOBUF_FIELD_OFFSET(DescribeResourceGroupResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeResourceGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ResourceGroup_NumLoadedReplicaEntry_DoNotUse::ResourceGroup_NumLoadedReplicaEntry_DoNotUse() {}
ResourceGroup_NumLoadedReplicaEntry_DoNotUse::ResourceGroup_NumLoadedReplicaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourceGroup_NumLoadedReplicaEntry_DoNotUse::MergeFrom(const ResourceGroup_NumLoadedReplicaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourceGroup_NumLoadedReplicaEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ResourceGroup_NumLoadedReplicaEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ResourceGroup_NumOutgoingNodeEntry_DoNotUse::ResourceGroup_NumOutgoingNodeEntry_DoNotUse() {}
ResourceGroup_NumOutgoingNodeEntry_DoNotUse::ResourceGroup_NumOutgoingNodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourceGroup_NumOutgoingNodeEntry_DoNotUse::MergeFrom(const ResourceGroup_NumOutgoingNodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourceGroup_NumOutgoingNodeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ResourceGroup_NumOutgoingNodeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ResourceGroup_NumIncomingNodeEntry_DoNotUse::ResourceGroup_NumIncomingNodeEntry_DoNotUse() {}
ResourceGroup_NumIncomingNodeEntry_DoNotUse::ResourceGroup_NumIncomingNodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourceGroup_NumIncomingNodeEntry_DoNotUse::MergeFrom(const ResourceGroup_NumIncomingNodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourceGroup_NumIncomingNodeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ResourceGroup_NumIncomingNodeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ResourceGroup::InitAsDefaultInstance() {
}
class ResourceGroup::_Internal {
 public:
};

ResourceGroup::ResourceGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  num_loaded_replica_(arena),
  num_outgoing_node_(arena),
  num_incoming_node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ResourceGroup)
}
ResourceGroup::ResourceGroup(const ResourceGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_loaded_replica_.MergeFrom(from.num_loaded_replica_);
  num_outgoing_node_.MergeFrom(from.num_outgoing_node_);
  num_incoming_node_.MergeFrom(from.num_incoming_node_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&capacity_, &from.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_available_node_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(num_available_node_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ResourceGroup)
}

void ResourceGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceGroup_milvus_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_available_node_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(num_available_node_));
}

ResourceGroup::~ResourceGroup() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ResourceGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceGroup::ArenaDtor(void* object) {
  ResourceGroup* _this = reinterpret_cast< ResourceGroup* >(object);
  (void)_this;
}
void ResourceGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceGroup& ResourceGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceGroup_milvus_2eproto.base);
  return *internal_default_instance();
}


void ResourceGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ResourceGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_loaded_replica_.Clear();
  num_outgoing_node_.Clear();
  num_incoming_node_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_available_node_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(num_available_node_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ResourceGroup.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_available_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_available_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int32> num_loaded_replica = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&num_loaded_replica_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int32> num_outgoing_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&num_outgoing_node_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int32> num_incoming_node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&num_incoming_node_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ResourceGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ResourceGroup.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 capacity = 2;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_capacity(), target);
  }

  // int32 num_available_node = 3;
  if (this->num_available_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_available_node(), target);
  }

  // map<string, int32> num_loaded_replica = 4;
  if (!this->_internal_num_loaded_replica().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.milvus.ResourceGroup.NumLoadedReplicaEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_num_loaded_replica().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_num_loaded_replica().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_num_loaded_replica().begin();
          it != this->_internal_num_loaded_replica().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResourceGroup_NumLoadedReplicaEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_num_loaded_replica().begin();
          it != this->_internal_num_loaded_replica().end(); ++it) {
        target = ResourceGroup_NumLoadedReplicaEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int32> num_outgoing_node = 5;
  if (!this->_internal_num_outgoing_node().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.milvus.ResourceGroup.NumOutgoingNodeEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_num_outgoing_node().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_num_outgoing_node().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_num_outgoing_node().begin();
          it != this->_internal_num_outgoing_node().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResourceGroup_NumOutgoingNodeEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_num_outgoing_node().begin();
          it != this->_internal_num_outgoing_node().end(); ++it) {
        target = ResourceGroup_NumOutgoingNodeEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int32> num_incoming_node = 6;
  if (!this->_internal_num_incoming_node().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "milvus.proto.milvus.ResourceGroup.NumIncomingNodeEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_num_incoming_node().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_num_incoming_node().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_num_incoming_node().begin();
          it != this->_internal_num_incoming_node().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResourceGroup_NumIncomingNodeEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_num_incoming_node().begin();
          it != this->_internal_num_incoming_node().end(); ++it) {
        target = ResourceGroup_NumIncomingNodeEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ResourceGroup)
  return target;
}

size_t ResourceGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ResourceGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> num_loaded_replica = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_loaded_replica_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_num_loaded_replica().begin();
      it != this->_internal_num_loaded_replica().end(); ++it) {
    total_size += ResourceGroup_NumLoadedReplicaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> num_outgoing_node = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_outgoing_node_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_num_outgoing_node().begin();
      it != this->_internal_num_outgoing_node().end(); ++it) {
    total_size += ResourceGroup_NumOutgoingNodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> num_incoming_node = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_incoming_node_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_num_incoming_node().begin();
      it != this->_internal_num_incoming_node().end(); ++it) {
    total_size += ResourceGroup_NumIncomingNodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 capacity = 2;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_capacity());
  }

  // int32 num_available_node = 3;
  if (this->num_available_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_available_node());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ResourceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ResourceGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ResourceGroup)
    MergeFrom(*source);
  }
}

void ResourceGroup::MergeFrom(const ResourceGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ResourceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  num_loaded_replica_.MergeFrom(from.num_loaded_replica_);
  num_outgoing_node_.MergeFrom(from.num_outgoing_node_);
  num_incoming_node_.MergeFrom(from.num_incoming_node_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (from.num_available_node() != 0) {
    _internal_set_num_available_node(from._internal_num_available_node());
  }
}

void ResourceGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ResourceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceGroup::CopyFrom(const ResourceGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ResourceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceGroup::IsInitialized() const {
  return true;
}

void ResourceGroup::InternalSwap(ResourceGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  num_loaded_replica_.Swap(&other->num_loaded_replica_);
  num_outgoing_node_.Swap(&other->num_outgoing_node_);
  num_incoming_node_.Swap(&other->num_incoming_node_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceGroup, num_available_node_)
      + sizeof(ResourceGroup::num_available_node_)
      - PROTOBUF_FIELD_OFFSET(ResourceGroup, capacity_)>(
          reinterpret_cast<char*>(&capacity_),
          reinterpret_cast<char*>(&other->capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RenameCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_RenameCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class RenameCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const RenameCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
RenameCollectionRequest::_Internal::base(const RenameCollectionRequest* msg) {
  return *msg->base_;
}
void RenameCollectionRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
RenameCollectionRequest::RenameCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.RenameCollectionRequest)
}
RenameCollectionRequest::RenameCollectionRequest(const RenameCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  oldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_oldname().empty()) {
    oldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_oldname(),
      GetArena());
  }
  newname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newname().empty()) {
    newname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_newname(),
      GetArena());
  }
  newdbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newdbname().empty()) {
    newdbname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_newdbname(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RenameCollectionRequest)
}

void RenameCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RenameCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newdbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

RenameCollectionRequest::~RenameCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.RenameCollectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RenameCollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newdbname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void RenameCollectionRequest::ArenaDtor(void* object) {
  RenameCollectionRequest* _this = reinterpret_cast< RenameCollectionRequest* >(object);
  (void)_this;
}
void RenameCollectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenameCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameCollectionRequest& RenameCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenameCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void RenameCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.RenameCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  oldname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newdbname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.RenameCollectionRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string oldName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_oldname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.RenameCollectionRequest.oldName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string newName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_newname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.RenameCollectionRequest.newName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string newDBName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_newdbname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.RenameCollectionRequest.newDBName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameCollectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.RenameCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.RenameCollectionRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string oldName = 3;
  if (this->oldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldname().data(), static_cast<int>(this->_internal_oldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.RenameCollectionRequest.oldName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oldname(), target);
  }

  // string newName = 4;
  if (this->newname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newname().data(), static_cast<int>(this->_internal_newname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.RenameCollectionRequest.newName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newname(), target);
  }

  // string newDBName = 5;
  if (this->newdbname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newdbname().data(), static_cast<int>(this->_internal_newdbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.RenameCollectionRequest.newDBName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_newdbname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.RenameCollectionRequest)
  return target;
}

size_t RenameCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.RenameCollectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string oldName = 3;
  if (this->oldname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());
  }

  // string newName = 4;
  if (this->newname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());
  }

  // string newDBName = 5;
  if (this->newdbname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newdbname());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.RenameCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenameCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.RenameCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.RenameCollectionRequest)
    MergeFrom(*source);
  }
}

void RenameCollectionRequest::MergeFrom(const RenameCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.RenameCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.oldname().size() > 0) {
    _internal_set_oldname(from._internal_oldname());
  }
  if (from.newname().size() > 0) {
    _internal_set_newname(from._internal_newname());
  }
  if (from.newdbname().size() > 0) {
    _internal_set_newdbname(from._internal_newdbname());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void RenameCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.RenameCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameCollectionRequest::CopyFrom(const RenameCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.RenameCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameCollectionRequest::IsInitialized() const {
  return true;
}

void RenameCollectionRequest::InternalSwap(RenameCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  oldname_.Swap(&other->oldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newname_.Swap(&other->newname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newdbname_.Swap(&other->newdbname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexStatisticsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetIndexStatisticsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetIndexStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetIndexStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetIndexStatisticsRequest::_Internal::base(const GetIndexStatisticsRequest* msg) {
  return *msg->base_;
}
void GetIndexStatisticsRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetIndexStatisticsRequest::GetIndexStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexStatisticsRequest)
}
GetIndexStatisticsRequest::GetIndexStatisticsRequest(const GetIndexStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_name().empty()) {
    collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection_name(),
      GetArena());
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexStatisticsRequest)
}

void GetIndexStatisticsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIndexStatisticsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&base_)) + sizeof(timestamp_));
}

GetIndexStatisticsRequest::~GetIndexStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexStatisticsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetIndexStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetIndexStatisticsRequest::ArenaDtor(void* object) {
  GetIndexStatisticsRequest* _this = reinterpret_cast< GetIndexStatisticsRequest* >(object);
  (void)_this;
}
void GetIndexStatisticsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetIndexStatisticsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexStatisticsRequest& GetIndexStatisticsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexStatisticsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetIndexStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStatisticsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStatisticsRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStatisticsRequest.collection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.GetIndexStatisticsRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexStatisticsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStatisticsRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_name().data(), static_cast<int>(this->_internal_collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStatisticsRequest.collection_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection_name(), target);
  }

  // string index_name = 4;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStatisticsRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_index_name(), target);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexStatisticsRequest)
  return target;
}

size_t GetIndexStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_name());
  }

  // string index_name = 4;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexStatisticsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexStatisticsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexStatisticsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetIndexStatisticsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetIndexStatisticsRequest)
    MergeFrom(*source);
  }
}

void GetIndexStatisticsRequest::MergeFrom(const GetIndexStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.collection_name().size() > 0) {
    _internal_set_collection_name(from._internal_collection_name());
  }
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void GetIndexStatisticsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexStatisticsRequest::CopyFrom(const GetIndexStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStatisticsRequest::IsInitialized() const {
  return true;
}

void GetIndexStatisticsRequest::InternalSwap(GetIndexStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetIndexStatisticsRequest, timestamp_)
      + sizeof(GetIndexStatisticsRequest::timestamp_)
      - PROTOBUF_FIELD_OFFSET(GetIndexStatisticsRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStatisticsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexStatisticsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetIndexStatisticsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetIndexStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexStatisticsResponse::_Internal::status(const GetIndexStatisticsResponse* msg) {
  return *msg->status_;
}
void GetIndexStatisticsResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetIndexStatisticsResponse::GetIndexStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  index_descriptions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.GetIndexStatisticsResponse)
}
GetIndexStatisticsResponse::GetIndexStatisticsResponse(const GetIndexStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      index_descriptions_(from.index_descriptions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexStatisticsResponse)
}

void GetIndexStatisticsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIndexStatisticsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

GetIndexStatisticsResponse::~GetIndexStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexStatisticsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetIndexStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void GetIndexStatisticsResponse::ArenaDtor(void* object) {
  GetIndexStatisticsResponse* _this = reinterpret_cast< GetIndexStatisticsResponse* >(object);
  (void)_this;
}
void GetIndexStatisticsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetIndexStatisticsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexStatisticsResponse& GetIndexStatisticsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexStatisticsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetIndexStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_descriptions_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexStatisticsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexStatisticsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_index_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_index_descriptions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexStatisticsResponse)
  return target;
}

size_t GetIndexStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  total_size += 1UL * this->_internal_index_descriptions_size();
  for (const auto& msg : this->index_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexStatisticsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexStatisticsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexStatisticsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetIndexStatisticsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetIndexStatisticsResponse)
    MergeFrom(*source);
  }
}

void GetIndexStatisticsResponse::MergeFrom(const GetIndexStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_descriptions_.MergeFrom(from.index_descriptions_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void GetIndexStatisticsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexStatisticsResponse::CopyFrom(const GetIndexStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStatisticsResponse::IsInitialized() const {
  return true;
}

void GetIndexStatisticsResponse::InternalSwap(GetIndexStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_descriptions_.InternalSwap(&other->index_descriptions_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStatisticsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ConnectRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
  ::milvus::proto::milvus::_ConnectRequest_default_instance_._instance.get_mutable()->client_info_ = const_cast< ::milvus::proto::common::ClientInfo*>(
      ::milvus::proto::common::ClientInfo::internal_default_instance());
}
class ConnectRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ConnectRequest* msg);
  static const ::milvus::proto::common::ClientInfo& client_info(const ConnectRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ConnectRequest::_Internal::base(const ConnectRequest* msg) {
  return *msg->base_;
}
const ::milvus::proto::common::ClientInfo&
ConnectRequest::_Internal::client_info(const ConnectRequest* msg) {
  return *msg->client_info_;
}
void ConnectRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void ConnectRequest::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
ConnectRequest::ConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ConnectRequest)
}
ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::milvus::proto::common::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ConnectRequest)
}

void ConnectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectRequest_milvus_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_info_) -
      reinterpret_cast<char*>(&base_)) + sizeof(client_info_));
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ConnectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete client_info_;
}

void ConnectRequest::ArenaDtor(void* object) {
  ConnectRequest* _this = reinterpret_cast< ConnectRequest* >(object);
  (void)_this;
}
void ConnectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectRequest& ConnectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.ClientInfo client_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .milvus.proto.common.ClientInfo client_info = 2;
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::client_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ConnectRequest)
  return target;
}

size_t ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ConnectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .milvus.proto.common.ClientInfo client_info = 2;
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ConnectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ConnectRequest)
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::milvus::proto::common::ClientInfo::MergeFrom(from._internal_client_info());
  }
}

void ConnectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  return true;
}

void ConnectRequest::InternalSwap(ConnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectRequest, client_info_)
      + sizeof(ConnectRequest::client_info_)
      - PROTOBUF_FIELD_OFFSET(ConnectRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ConnectResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
  ::milvus::proto::milvus::_ConnectResponse_default_instance_._instance.get_mutable()->server_info_ = const_cast< ::milvus::proto::common::ServerInfo*>(
      ::milvus::proto::common::ServerInfo::internal_default_instance());
}
class ConnectResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ConnectResponse* msg);
  static const ::milvus::proto::common::ServerInfo& server_info(const ConnectResponse* msg);
};

const ::milvus::proto::common::Status&
ConnectResponse::_Internal::status(const ConnectResponse* msg) {
  return *msg->status_;
}
const ::milvus::proto::common::ServerInfo&
ConnectResponse::_Internal::server_info(const ConnectResponse* msg) {
  return *msg->server_info_;
}
void ConnectResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void ConnectResponse::clear_server_info() {
  if (GetArena() == nullptr && server_info_ != nullptr) {
    delete server_info_;
  }
  server_info_ = nullptr;
}
ConnectResponse::ConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ConnectResponse)
}
ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_server_info()) {
    server_info_ = new ::milvus::proto::common::ServerInfo(*from.server_info_);
  } else {
    server_info_ = nullptr;
  }
  identifier_ = from.identifier_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ConnectResponse)
}

void ConnectResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identifier_) -
      reinterpret_cast<char*>(&status_)) + sizeof(identifier_));
}

ConnectResponse::~ConnectResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ConnectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete server_info_;
}

void ConnectResponse::ArenaDtor(void* object) {
  ConnectResponse* _this = reinterpret_cast< ConnectResponse* >(object);
  (void)_this;
}
void ConnectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectResponse& ConnectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ConnectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && server_info_ != nullptr) {
    delete server_info_;
  }
  server_info_ = nullptr;
  identifier_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.ServerInfo server_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ConnectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .milvus.proto.common.ServerInfo server_info = 2;
  if (this->has_server_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server_info(this), target, stream);
  }

  // int64 identifier = 3;
  if (this->identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ConnectResponse)
  return target;
}

size_t ConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ConnectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .milvus.proto.common.ServerInfo server_info = 2;
  if (this->has_server_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_info_);
  }

  // int64 identifier = 3;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ConnectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ConnectResponse)
    MergeFrom(*source);
  }
}

void ConnectResponse::MergeFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.has_server_info()) {
    _internal_mutable_server_info()->::milvus::proto::common::ServerInfo::MergeFrom(from._internal_server_info());
  }
  if (from.identifier() != 0) {
    _internal_set_identifier(from._internal_identifier());
  }
}

void ConnectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  return true;
}

void ConnectResponse::InternalSwap(ConnectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectResponse, identifier_)
      + sizeof(ConnectResponse::identifier_)
      - PROTOBUF_FIELD_OFFSET(ConnectResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllocTimestampRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_AllocTimestampRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class AllocTimestampRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const AllocTimestampRequest* msg);
};

const ::milvus::proto::common::MsgBase&
AllocTimestampRequest::_Internal::base(const AllocTimestampRequest* msg) {
  return *msg->base_;
}
void AllocTimestampRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
AllocTimestampRequest::AllocTimestampRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.AllocTimestampRequest)
}
AllocTimestampRequest::AllocTimestampRequest(const AllocTimestampRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.AllocTimestampRequest)
}

void AllocTimestampRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllocTimestampRequest_milvus_2eproto.base);
  base_ = nullptr;
}

AllocTimestampRequest::~AllocTimestampRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.AllocTimestampRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllocTimestampRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void AllocTimestampRequest::ArenaDtor(void* object) {
  AllocTimestampRequest* _this = reinterpret_cast< AllocTimestampRequest* >(object);
  (void)_this;
}
void AllocTimestampRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocTimestampRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocTimestampRequest& AllocTimestampRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocTimestampRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void AllocTimestampRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.AllocTimestampRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocTimestampRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocTimestampRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.AllocTimestampRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.AllocTimestampRequest)
  return target;
}

size_t AllocTimestampRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.AllocTimestampRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocTimestampRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.AllocTimestampRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocTimestampRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocTimestampRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.AllocTimestampRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.AllocTimestampRequest)
    MergeFrom(*source);
  }
}

void AllocTimestampRequest::MergeFrom(const AllocTimestampRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.AllocTimestampRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void AllocTimestampRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.AllocTimestampRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocTimestampRequest::CopyFrom(const AllocTimestampRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.AllocTimestampRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocTimestampRequest::IsInitialized() const {
  return true;
}

void AllocTimestampRequest::InternalSwap(AllocTimestampRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocTimestampRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllocTimestampResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_AllocTimestampResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class AllocTimestampResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const AllocTimestampResponse* msg);
};

const ::milvus::proto::common::Status&
AllocTimestampResponse::_Internal::status(const AllocTimestampResponse* msg) {
  return *msg->status_;
}
void AllocTimestampResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
AllocTimestampResponse::AllocTimestampResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.AllocTimestampResponse)
}
AllocTimestampResponse::AllocTimestampResponse(const AllocTimestampResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.AllocTimestampResponse)
}

void AllocTimestampResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllocTimestampResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&status_)) + sizeof(timestamp_));
}

AllocTimestampResponse::~AllocTimestampResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.AllocTimestampResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllocTimestampResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void AllocTimestampResponse::ArenaDtor(void* object) {
  AllocTimestampResponse* _this = reinterpret_cast< AllocTimestampResponse* >(object);
  (void)_this;
}
void AllocTimestampResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocTimestampResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocTimestampResponse& AllocTimestampResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocTimestampResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void AllocTimestampResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.AllocTimestampResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocTimestampResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocTimestampResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.AllocTimestampResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.AllocTimestampResponse)
  return target;
}

size_t AllocTimestampResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.AllocTimestampResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocTimestampResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.AllocTimestampResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocTimestampResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocTimestampResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.AllocTimestampResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.AllocTimestampResponse)
    MergeFrom(*source);
  }
}

void AllocTimestampResponse::MergeFrom(const AllocTimestampResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.AllocTimestampResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void AllocTimestampResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.AllocTimestampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocTimestampResponse::CopyFrom(const AllocTimestampResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.AllocTimestampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocTimestampResponse::IsInitialized() const {
  return true;
}

void AllocTimestampResponse::InternalSwap(AllocTimestampResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllocTimestampResponse, timestamp_)
      + sizeof(AllocTimestampResponse::timestamp_)
      - PROTOBUF_FIELD_OFFSET(AllocTimestampResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocTimestampResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateDatabaseRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CreateDatabaseRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class CreateDatabaseRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateDatabaseRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateDatabaseRequest::_Internal::base(const CreateDatabaseRequest* msg) {
  return *msg->base_;
}
void CreateDatabaseRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
CreateDatabaseRequest::CreateDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.CreateDatabaseRequest)
}
CreateDatabaseRequest::CreateDatabaseRequest(const CreateDatabaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateDatabaseRequest)
}

void CreateDatabaseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateDatabaseRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

CreateDatabaseRequest::~CreateDatabaseRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateDatabaseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateDatabaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreateDatabaseRequest::ArenaDtor(void* object) {
  CreateDatabaseRequest* _this = reinterpret_cast< CreateDatabaseRequest* >(object);
  (void)_this;
}
void CreateDatabaseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDatabaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDatabaseRequest& CreateDatabaseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateDatabaseRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CreateDatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateDatabaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDatabaseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.CreateDatabaseRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDatabaseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateDatabaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateDatabaseRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateDatabaseRequest)
  return target;
}

size_t CreateDatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateDatabaseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDatabaseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CreateDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDatabaseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateDatabaseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CreateDatabaseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CreateDatabaseRequest)
    MergeFrom(*source);
  }
}

void CreateDatabaseRequest::MergeFrom(const CreateDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void CreateDatabaseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CreateDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDatabaseRequest::CopyFrom(const CreateDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatabaseRequest::IsInitialized() const {
  return true;
}

void CreateDatabaseRequest::InternalSwap(CreateDatabaseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDatabaseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropDatabaseRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DropDatabaseRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DropDatabaseRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropDatabaseRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropDatabaseRequest::_Internal::base(const DropDatabaseRequest* msg) {
  return *msg->base_;
}
void DropDatabaseRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DropDatabaseRequest::DropDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.DropDatabaseRequest)
}
DropDatabaseRequest::DropDatabaseRequest(const DropDatabaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropDatabaseRequest)
}

void DropDatabaseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropDatabaseRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DropDatabaseRequest::~DropDatabaseRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropDatabaseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropDatabaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DropDatabaseRequest::ArenaDtor(void* object) {
  DropDatabaseRequest* _this = reinterpret_cast< DropDatabaseRequest* >(object);
  (void)_this;
}
void DropDatabaseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropDatabaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropDatabaseRequest& DropDatabaseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropDatabaseRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DropDatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropDatabaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropDatabaseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.DropDatabaseRequest.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropDatabaseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropDatabaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropDatabaseRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropDatabaseRequest)
  return target;
}

size_t DropDatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropDatabaseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropDatabaseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DropDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropDatabaseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropDatabaseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DropDatabaseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DropDatabaseRequest)
    MergeFrom(*source);
  }
}

void DropDatabaseRequest::MergeFrom(const DropDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void DropDatabaseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DropDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropDatabaseRequest::CopyFrom(const DropDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropDatabaseRequest::IsInitialized() const {
  return true;
}

void DropDatabaseRequest::InternalSwap(DropDatabaseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropDatabaseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDatabasesRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ListDatabasesRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ListDatabasesRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ListDatabasesRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ListDatabasesRequest::_Internal::base(const ListDatabasesRequest* msg) {
  return *msg->base_;
}
void ListDatabasesRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ListDatabasesRequest::ListDatabasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListDatabasesRequest)
}
ListDatabasesRequest::ListDatabasesRequest(const ListDatabasesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListDatabasesRequest)
}

void ListDatabasesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDatabasesRequest_milvus_2eproto.base);
  base_ = nullptr;
}

ListDatabasesRequest::~ListDatabasesRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListDatabasesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDatabasesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void ListDatabasesRequest::ArenaDtor(void* object) {
  ListDatabasesRequest* _this = reinterpret_cast< ListDatabasesRequest* >(object);
  (void)_this;
}
void ListDatabasesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDatabasesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDatabasesRequest& ListDatabasesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDatabasesRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ListDatabasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListDatabasesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatabasesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDatabasesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListDatabasesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListDatabasesRequest)
  return target;
}

size_t ListDatabasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListDatabasesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDatabasesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ListDatabasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDatabasesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDatabasesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ListDatabasesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ListDatabasesRequest)
    MergeFrom(*source);
  }
}

void ListDatabasesRequest::MergeFrom(const ListDatabasesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListDatabasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
}

void ListDatabasesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ListDatabasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDatabasesRequest::CopyFrom(const ListDatabasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListDatabasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatabasesRequest::IsInitialized() const {
  return true;
}

void ListDatabasesRequest::InternalSwap(ListDatabasesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatabasesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDatabasesResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ListDatabasesResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ListDatabasesResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ListDatabasesResponse* msg);
};

const ::milvus::proto::common::Status&
ListDatabasesResponse::_Internal::status(const ListDatabasesResponse* msg) {
  return *msg->status_;
}
void ListDatabasesResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ListDatabasesResponse::ListDatabasesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  db_names_(arena),
  created_timestamp_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ListDatabasesResponse)
}
ListDatabasesResponse::ListDatabasesResponse(const ListDatabasesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      db_names_(from.db_names_),
      created_timestamp_(from.created_timestamp_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ListDatabasesResponse)
}

void ListDatabasesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDatabasesResponse_milvus_2eproto.base);
  status_ = nullptr;
}

ListDatabasesResponse::~ListDatabasesResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ListDatabasesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDatabasesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ListDatabasesResponse::ArenaDtor(void* object) {
  ListDatabasesResponse* _this = reinterpret_cast< ListDatabasesResponse* >(object);
  (void)_this;
}
void ListDatabasesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDatabasesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDatabasesResponse& ListDatabasesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDatabasesResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ListDatabasesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ListDatabasesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_names_.Clear();
  created_timestamp_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatabasesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string db_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_db_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ListDatabasesResponse.db_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 created_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_created_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_created_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDatabasesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ListDatabasesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string db_names = 2;
  for (int i = 0, n = this->_internal_db_names_size(); i < n; i++) {
    const auto& s = this->_internal_db_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ListDatabasesResponse.db_names");
    target = stream->WriteString(2, s, target);
  }

  // repeated uint64 created_timestamp = 3;
  {
    int byte_size = _created_timestamp_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_created_timestamp(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ListDatabasesResponse)
  return target;
}

size_t ListDatabasesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ListDatabasesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string db_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(db_names_.size());
  for (int i = 0, n = db_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      db_names_.Get(i));
  }

  // repeated uint64 created_timestamp = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->created_timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _created_timestamp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDatabasesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ListDatabasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDatabasesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDatabasesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ListDatabasesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ListDatabasesResponse)
    MergeFrom(*source);
  }
}

void ListDatabasesResponse::MergeFrom(const ListDatabasesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ListDatabasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  db_names_.MergeFrom(from.db_names_);
  created_timestamp_.MergeFrom(from.created_timestamp_);
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ListDatabasesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ListDatabasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDatabasesResponse::CopyFrom(const ListDatabasesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ListDatabasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatabasesResponse::IsInitialized() const {
  return true;
}

void ListDatabasesResponse::InternalSwap(ListDatabasesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_names_.InternalSwap(&other->db_names_);
  created_timestamp_.InternalSwap(&other->created_timestamp_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatabasesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicateMessageRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ReplicateMessageRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ReplicateMessageRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ReplicateMessageRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ReplicateMessageRequest::_Internal::base(const ReplicateMessageRequest* msg) {
  return *msg->base_;
}
void ReplicateMessageRequest::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void ReplicateMessageRequest::clear_startpositions() {
  startpositions_.Clear();
}
void ReplicateMessageRequest::clear_endpositions() {
  endpositions_.Clear();
}
ReplicateMessageRequest::ReplicateMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  msgs_(arena),
  startpositions_(arena),
  endpositions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ReplicateMessageRequest)
}
ReplicateMessageRequest::ReplicateMessageRequest(const ReplicateMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msgs_(from.msgs_),
      startpositions_(from.startpositions_),
      endpositions_(from.endpositions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_name().empty()) {
    channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&begints_, &from.begints_,
    static_cast<size_t>(reinterpret_cast<char*>(&endts_) -
    reinterpret_cast<char*>(&begints_)) + sizeof(endts_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ReplicateMessageRequest)
}

void ReplicateMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplicateMessageRequest_milvus_2eproto.base);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endts_) -
      reinterpret_cast<char*>(&base_)) + sizeof(endts_));
}

ReplicateMessageRequest::~ReplicateMessageRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ReplicateMessageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicateMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ReplicateMessageRequest::ArenaDtor(void* object) {
  ReplicateMessageRequest* _this = reinterpret_cast< ReplicateMessageRequest* >(object);
  (void)_this;
}
void ReplicateMessageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicateMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicateMessageRequest& ReplicateMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicateMessageRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ReplicateMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ReplicateMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  startpositions_.Clear();
  endpositions_.Clear();
  channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&begints_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endts_) -
      reinterpret_cast<char*>(&begints_)) + sizeof(endts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicateMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ReplicateMessageRequest.channel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 BeginTs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          begints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 EndTs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          endts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes Msgs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msgs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.msg.MsgPosition StartPositions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_startpositions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.msg.MsgPosition EndPositions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_endpositions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicateMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ReplicateMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReplicateMessageRequest.channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_name(), target);
  }

  // uint64 BeginTs = 3;
  if (this->begints() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_begints(), target);
  }

  // uint64 EndTs = 4;
  if (this->endts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_endts(), target);
  }

  // repeated bytes Msgs = 5;
  for (int i = 0, n = this->_internal_msgs_size(); i < n; i++) {
    const auto& s = this->_internal_msgs(i);
    target = stream->WriteBytes(5, s, target);
  }

  // repeated .milvus.proto.msg.MsgPosition StartPositions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_startpositions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_startpositions(i), target, stream);
  }

  // repeated .milvus.proto.msg.MsgPosition EndPositions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_endpositions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_endpositions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ReplicateMessageRequest)
  return target;
}

size_t ReplicateMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ReplicateMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes Msgs = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(msgs_.size());
  for (int i = 0, n = msgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      msgs_.Get(i));
  }

  // repeated .milvus.proto.msg.MsgPosition StartPositions = 6;
  total_size += 1UL * this->_internal_startpositions_size();
  for (const auto& msg : this->startpositions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .milvus.proto.msg.MsgPosition EndPositions = 7;
  total_size += 1UL * this->_internal_endpositions_size();
  for (const auto& msg : this->endpositions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 BeginTs = 3;
  if (this->begints() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_begints());
  }

  // uint64 EndTs = 4;
  if (this->endts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_endts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicateMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ReplicateMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicateMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicateMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ReplicateMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ReplicateMessageRequest)
    MergeFrom(*source);
  }
}

void ReplicateMessageRequest::MergeFrom(const ReplicateMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ReplicateMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  startpositions_.MergeFrom(from.startpositions_);
  endpositions_.MergeFrom(from.endpositions_);
  if (from.channel_name().size() > 0) {
    _internal_set_channel_name(from._internal_channel_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from._internal_base());
  }
  if (from.begints() != 0) {
    _internal_set_begints(from._internal_begints());
  }
  if (from.endts() != 0) {
    _internal_set_endts(from._internal_endts());
  }
}

void ReplicateMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ReplicateMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicateMessageRequest::CopyFrom(const ReplicateMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ReplicateMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateMessageRequest::IsInitialized() const {
  return true;
}

void ReplicateMessageRequest::InternalSwap(ReplicateMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
  startpositions_.InternalSwap(&other->startpositions_);
  endpositions_.InternalSwap(&other->endpositions_);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplicateMessageRequest, endts_)
      + sizeof(ReplicateMessageRequest::endts_)
      - PROTOBUF_FIELD_OFFSET(ReplicateMessageRequest, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicateMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicateMessageResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ReplicateMessageResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ReplicateMessageResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ReplicateMessageResponse* msg);
};

const ::milvus::proto::common::Status&
ReplicateMessageResponse::_Internal::status(const ReplicateMessageResponse* msg) {
  return *msg->status_;
}
void ReplicateMessageResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ReplicateMessageResponse::ReplicateMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.milvus.ReplicateMessageResponse)
}
ReplicateMessageResponse::ReplicateMessageResponse(const ReplicateMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_position().empty()) {
    position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_position(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ReplicateMessageResponse)
}

void ReplicateMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplicateMessageResponse_milvus_2eproto.base);
  position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

ReplicateMessageResponse::~ReplicateMessageResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ReplicateMessageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicateMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  position_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void ReplicateMessageResponse::ArenaDtor(void* object) {
  ReplicateMessageResponse* _this = reinterpret_cast< ReplicateMessageResponse* >(object);
  (void)_this;
}
void ReplicateMessageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicateMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicateMessageResponse& ReplicateMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicateMessageResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ReplicateMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ReplicateMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicateMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_position();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.milvus.ReplicateMessageResponse.position"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicateMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ReplicateMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string position = 2;
  if (this->position().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position().data(), static_cast<int>(this->_internal_position().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReplicateMessageResponse.position");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ReplicateMessageResponse)
  return target;
}

size_t ReplicateMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ReplicateMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string position = 2;
  if (this->position().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicateMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ReplicateMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicateMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicateMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ReplicateMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ReplicateMessageResponse)
    MergeFrom(*source);
  }
}

void ReplicateMessageResponse::MergeFrom(const ReplicateMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ReplicateMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position().size() > 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::milvus::proto::common::Status::MergeFrom(from._internal_status());
  }
}

void ReplicateMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ReplicateMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicateMessageResponse::CopyFrom(const ReplicateMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ReplicateMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateMessageResponse::IsInitialized() const {
  return true;
}

void ReplicateMessageResponse::InternalSwap(ReplicateMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  position_.Swap(&other->position_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicateMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::milvus::proto::milvus::MilvusExt >, 11, false >
  milvus_ext_obj(kMilvusExtObjFieldNumber, ::milvus::proto::milvus::MilvusExt::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace milvus
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateAliasRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateAliasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropAliasRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropAliasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::AlterAliasRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::AlterAliasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::AlterAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeAliasRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeAliasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeAliasResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeAliasResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeAliasResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListAliasesRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListAliasesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListAliasesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListAliasesResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListAliasesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListAliasesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::AlterCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::AlterCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::AlterCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::HasCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::HasCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::HasCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::BoolResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::BoolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::BoolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::StringResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::StringResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::StringResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeCollectionResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeCollectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeCollectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::LoadCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::LoadCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::LoadCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReleaseCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReleaseCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ReleaseCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetStatisticsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetStatisticsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCollectionStatisticsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCollectionStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCollectionStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCollectionStatisticsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCollectionStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCollectionStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowCollectionsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowCollectionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowCollectionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowCollectionsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowCollectionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowCollectionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreatePartitionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreatePartitionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreatePartitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropPartitionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropPartitionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropPartitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::HasPartitionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::HasPartitionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::HasPartitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::LoadPartitionsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::LoadPartitionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::LoadPartitionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReleasePartitionsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReleasePartitionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ReleasePartitionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPartitionStatisticsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPartitionStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetPartitionStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPartitionStatisticsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPartitionStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetPartitionStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowPartitionsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowPartitionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowPartitionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowPartitionsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowPartitionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowPartitionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeSegmentRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeSegmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeSegmentResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeSegmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeSegmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowSegmentsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowSegmentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowSegmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowSegmentsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowSegmentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShowSegmentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateIndexRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::AlterIndexRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::AlterIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::AlterIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeIndexRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::IndexDescription* Arena::CreateMaybeMessage< ::milvus::proto::milvus::IndexDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::IndexDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeIndexResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexBuildProgressRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexBuildProgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexBuildProgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexBuildProgressResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexBuildProgressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexBuildProgressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexStateRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexStateResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropIndexRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::InsertRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::InsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::InsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::UpsertRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::UpsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::UpsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::MutationResult* Arena::CreateMaybeMessage< ::milvus::proto::milvus::MutationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::MutationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DeleteRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SearchRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::SearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::Hits* Arena::CreateMaybeMessage< ::milvus::proto::milvus::Hits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::Hits >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SearchResults* Arena::CreateMaybeMessage< ::milvus::proto::milvus::SearchResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SearchResults >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SearchRequestV2* Arena::CreateMaybeMessage< ::milvus::proto::milvus::SearchRequestV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SearchRequestV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushResponse_CollSegIDsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushResponse_FlushCollSegIDsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushResponse_CollSealTimesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushResponse_CollFlushTsEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushResponse_CollFlushTsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushResponse_CollFlushTsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::QueryRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::QueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::QueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::QueryResults* Arena::CreateMaybeMessage< ::milvus::proto::milvus::QueryResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::QueryResults >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::VectorIDs* Arena::CreateMaybeMessage< ::milvus::proto::milvus::VectorIDs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::VectorIDs >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::VectorsArray* Arena::CreateMaybeMessage< ::milvus::proto::milvus::VectorsArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::VectorsArray >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CalcDistanceRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CalcDistanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CalcDistanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CalcDistanceResults* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CalcDistanceResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CalcDistanceResults >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushAllRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushAllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushAllResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushAllResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::FlushAllResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::PersistentSegmentInfo* Arena::CreateMaybeMessage< ::milvus::proto::milvus::PersistentSegmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::PersistentSegmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPersistentSegmentInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetPersistentSegmentInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::QuerySegmentInfo* Arena::CreateMaybeMessage< ::milvus::proto::milvus::QuerySegmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::QuerySegmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetQuerySegmentInfoRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetQuerySegmentInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetQuerySegmentInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetQuerySegmentInfoResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetQuerySegmentInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetQuerySegmentInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DummyRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DummyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DummyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DummyResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DummyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DummyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RegisterLinkRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::RegisterLinkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::RegisterLinkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RegisterLinkResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::RegisterLinkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::RegisterLinkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetMetricsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetMetricsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ComponentInfo* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ComponentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ComponentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ComponentStates* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ComponentStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ComponentStates >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetComponentStatesRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetComponentStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetComponentStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::LoadBalanceRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::LoadBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::LoadBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ManualCompactionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ManualCompactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ManualCompactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ManualCompactionResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ManualCompactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ManualCompactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCompactionStateRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCompactionStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCompactionStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCompactionStateResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCompactionStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCompactionStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCompactionPlansRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCompactionPlansRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCompactionPlansRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCompactionPlansResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCompactionPlansResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetCompactionPlansResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CompactionMergeInfo* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CompactionMergeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CompactionMergeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetFlushStateRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetFlushStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetFlushStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetFlushStateResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetFlushStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetFlushStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetFlushAllStateRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetFlushAllStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetFlushAllStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetFlushAllStateResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetFlushAllStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetFlushAllStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ImportRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ImportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ImportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ImportResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ImportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ImportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetImportStateRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetImportStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetImportStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetImportStateResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetImportStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetImportStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListImportTasksRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListImportTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListImportTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListImportTasksResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListImportTasksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListImportTasksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetReplicasRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetReplicasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetReplicasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetReplicasResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetReplicasResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetReplicasResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ReplicaInfo_NumOutboundNodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReplicaInfo* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReplicaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ReplicaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShardReplica* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShardReplica >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ShardReplica >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateCredentialRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateCredentialRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateCredentialRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::UpdateCredentialRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::UpdateCredentialRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::UpdateCredentialRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DeleteCredentialRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DeleteCredentialRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DeleteCredentialRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListCredUsersResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListCredUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListCredUsersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListCredUsersRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListCredUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListCredUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RoleEntity* Arena::CreateMaybeMessage< ::milvus::proto::milvus::RoleEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::RoleEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::UserEntity* Arena::CreateMaybeMessage< ::milvus::proto::milvus::UserEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::UserEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateRoleRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropRoleRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::OperateUserRoleRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::OperateUserRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::OperateUserRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectRoleRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RoleResult* Arena::CreateMaybeMessage< ::milvus::proto::milvus::RoleResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::RoleResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectRoleResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectRoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectUserRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::UserResult* Arena::CreateMaybeMessage< ::milvus::proto::milvus::UserResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::UserResult >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectUserResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ObjectEntity* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ObjectEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ObjectEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::PrivilegeEntity* Arena::CreateMaybeMessage< ::milvus::proto::milvus::PrivilegeEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::PrivilegeEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GrantorEntity* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GrantorEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GrantorEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GrantPrivilegeEntity* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GrantPrivilegeEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GrantPrivilegeEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GrantEntity* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GrantEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GrantEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectGrantRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectGrantRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectGrantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SelectGrantResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::SelectGrantResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::SelectGrantResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::OperatePrivilegeRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::OperatePrivilegeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::OperatePrivilegeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetLoadingProgressRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetLoadingProgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetLoadingProgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetLoadingProgressResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetLoadingProgressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetLoadingProgressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetLoadStateRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetLoadStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetLoadStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetLoadStateResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetLoadStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetLoadStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::MilvusExt* Arena::CreateMaybeMessage< ::milvus::proto::milvus::MilvusExt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::MilvusExt >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetVersionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetVersionResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CheckHealthRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CheckHealthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CheckHealthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CheckHealthResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CheckHealthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CheckHealthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateResourceGroupRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateResourceGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateResourceGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropResourceGroupRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropResourceGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropResourceGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::TransferNodeRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::TransferNodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::TransferNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::TransferReplicaRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::TransferReplicaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::TransferReplicaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListResourceGroupsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListResourceGroupsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListResourceGroupsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListResourceGroupsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListResourceGroupsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListResourceGroupsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeResourceGroupRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeResourceGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeResourceGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeResourceGroupResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeResourceGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DescribeResourceGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ResourceGroup_NumLoadedReplicaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ResourceGroup_NumOutgoingNodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ResourceGroup_NumIncomingNodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ResourceGroup* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ResourceGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ResourceGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RenameCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::RenameCollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::RenameCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexStatisticsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexStatisticsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::GetIndexStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ConnectRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ConnectResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ConnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ConnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::AllocTimestampRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::AllocTimestampRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::AllocTimestampRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::AllocTimestampResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::AllocTimestampResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::AllocTimestampResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateDatabaseRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateDatabaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::CreateDatabaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropDatabaseRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropDatabaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::DropDatabaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListDatabasesRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListDatabasesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListDatabasesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ListDatabasesResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ListDatabasesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ListDatabasesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReplicateMessageRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReplicateMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ReplicateMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReplicateMessageResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReplicateMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::milvus::ReplicateMessageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
