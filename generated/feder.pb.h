// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feder.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_feder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_feder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_feder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_feder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_feder_2eproto;
namespace milvus {
namespace proto {
namespace feder {
class DescribeSegmentIndexDataRequest;
class DescribeSegmentIndexDataRequestDefaultTypeInternal;
extern DescribeSegmentIndexDataRequestDefaultTypeInternal _DescribeSegmentIndexDataRequest_default_instance_;
class DescribeSegmentIndexDataResponse;
class DescribeSegmentIndexDataResponseDefaultTypeInternal;
extern DescribeSegmentIndexDataResponseDefaultTypeInternal _DescribeSegmentIndexDataResponse_default_instance_;
class DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse;
class DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUseDefaultTypeInternal;
extern DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUseDefaultTypeInternal _DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_default_instance_;
class FederSegmentSearchResult;
class FederSegmentSearchResultDefaultTypeInternal;
extern FederSegmentSearchResultDefaultTypeInternal _FederSegmentSearchResult_default_instance_;
class ListIndexedSegmentRequest;
class ListIndexedSegmentRequestDefaultTypeInternal;
extern ListIndexedSegmentRequestDefaultTypeInternal _ListIndexedSegmentRequest_default_instance_;
class ListIndexedSegmentResponse;
class ListIndexedSegmentResponseDefaultTypeInternal;
extern ListIndexedSegmentResponseDefaultTypeInternal _ListIndexedSegmentResponse_default_instance_;
class SegmentIndexData;
class SegmentIndexDataDefaultTypeInternal;
extern SegmentIndexDataDefaultTypeInternal _SegmentIndexData_default_instance_;
}  // namespace feder
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::feder::DescribeSegmentIndexDataRequest* Arena::CreateMaybeMessage<::milvus::proto::feder::DescribeSegmentIndexDataRequest>(Arena*);
template<> ::milvus::proto::feder::DescribeSegmentIndexDataResponse* Arena::CreateMaybeMessage<::milvus::proto::feder::DescribeSegmentIndexDataResponse>(Arena*);
template<> ::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse* Arena::CreateMaybeMessage<::milvus::proto::feder::DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse>(Arena*);
template<> ::milvus::proto::feder::FederSegmentSearchResult* Arena::CreateMaybeMessage<::milvus::proto::feder::FederSegmentSearchResult>(Arena*);
template<> ::milvus::proto::feder::ListIndexedSegmentRequest* Arena::CreateMaybeMessage<::milvus::proto::feder::ListIndexedSegmentRequest>(Arena*);
template<> ::milvus::proto::feder::ListIndexedSegmentResponse* Arena::CreateMaybeMessage<::milvus::proto::feder::ListIndexedSegmentResponse>(Arena*);
template<> ::milvus::proto::feder::SegmentIndexData* Arena::CreateMaybeMessage<::milvus::proto::feder::SegmentIndexData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace feder {

// ===================================================================

class SegmentIndexData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.feder.SegmentIndexData) */ {
 public:
  inline SegmentIndexData() : SegmentIndexData(nullptr) {};
  virtual ~SegmentIndexData();

  SegmentIndexData(const SegmentIndexData& from);
  SegmentIndexData(SegmentIndexData&& from) noexcept
    : SegmentIndexData() {
    *this = ::std::move(from);
  }

  inline SegmentIndexData& operator=(const SegmentIndexData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentIndexData& operator=(SegmentIndexData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentIndexData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentIndexData* internal_default_instance() {
    return reinterpret_cast<const SegmentIndexData*>(
               &_SegmentIndexData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SegmentIndexData& a, SegmentIndexData& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentIndexData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentIndexData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentIndexData* New() const final {
    return CreateMaybeMessage<SegmentIndexData>(nullptr);
  }

  SegmentIndexData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentIndexData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentIndexData& from);
  void MergeFrom(const SegmentIndexData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentIndexData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.feder.SegmentIndexData";
  }
  protected:
  explicit SegmentIndexData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_feder_2eproto);
    return ::descriptor_table_feder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexDataFieldNumber = 2,
    kSegmentIDFieldNumber = 1,
  };
  // string index_data = 2;
  void clear_index_data();
  const std::string& index_data() const;
  void set_index_data(const std::string& value);
  void set_index_data(std::string&& value);
  void set_index_data(const char* value);
  void set_index_data(const char* value, size_t size);
  std::string* mutable_index_data();
  std::string* release_index_data();
  void set_allocated_index_data(std::string* index_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_index_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_index_data(
      std::string* index_data);
  private:
  const std::string& _internal_index_data() const;
  void _internal_set_index_data(const std::string& value);
  std::string* _internal_mutable_index_data();
  public:

  // int64 segmentID = 1;
  void clear_segmentid();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid() const;
  void set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_segmentid() const;
  void _internal_set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.feder.SegmentIndexData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_feder_2eproto;
};
// -------------------------------------------------------------------

class FederSegmentSearchResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.feder.FederSegmentSearchResult) */ {
 public:
  inline FederSegmentSearchResult() : FederSegmentSearchResult(nullptr) {};
  virtual ~FederSegmentSearchResult();

  FederSegmentSearchResult(const FederSegmentSearchResult& from);
  FederSegmentSearchResult(FederSegmentSearchResult&& from) noexcept
    : FederSegmentSearchResult() {
    *this = ::std::move(from);
  }

  inline FederSegmentSearchResult& operator=(const FederSegmentSearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederSegmentSearchResult& operator=(FederSegmentSearchResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FederSegmentSearchResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FederSegmentSearchResult* internal_default_instance() {
    return reinterpret_cast<const FederSegmentSearchResult*>(
               &_FederSegmentSearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FederSegmentSearchResult& a, FederSegmentSearchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(FederSegmentSearchResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederSegmentSearchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FederSegmentSearchResult* New() const final {
    return CreateMaybeMessage<FederSegmentSearchResult>(nullptr);
  }

  FederSegmentSearchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FederSegmentSearchResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FederSegmentSearchResult& from);
  void MergeFrom(const FederSegmentSearchResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederSegmentSearchResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.feder.FederSegmentSearchResult";
  }
  protected:
  explicit FederSegmentSearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_feder_2eproto);
    return ::descriptor_table_feder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisitInfoFieldNumber = 2,
    kSegmentIDFieldNumber = 1,
  };
  // string visit_info = 2;
  void clear_visit_info();
  const std::string& visit_info() const;
  void set_visit_info(const std::string& value);
  void set_visit_info(std::string&& value);
  void set_visit_info(const char* value);
  void set_visit_info(const char* value, size_t size);
  std::string* mutable_visit_info();
  std::string* release_visit_info();
  void set_allocated_visit_info(std::string* visit_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_visit_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_visit_info(
      std::string* visit_info);
  private:
  const std::string& _internal_visit_info() const;
  void _internal_set_visit_info(const std::string& value);
  std::string* _internal_mutable_visit_info();
  public:

  // int64 segmentID = 1;
  void clear_segmentid();
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid() const;
  void set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_segmentid() const;
  void _internal_set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.feder.FederSegmentSearchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visit_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 segmentid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_feder_2eproto;
};
// -------------------------------------------------------------------

class ListIndexedSegmentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.feder.ListIndexedSegmentRequest) */ {
 public:
  inline ListIndexedSegmentRequest() : ListIndexedSegmentRequest(nullptr) {};
  virtual ~ListIndexedSegmentRequest();

  ListIndexedSegmentRequest(const ListIndexedSegmentRequest& from);
  ListIndexedSegmentRequest(ListIndexedSegmentRequest&& from) noexcept
    : ListIndexedSegmentRequest() {
    *this = ::std::move(from);
  }

  inline ListIndexedSegmentRequest& operator=(const ListIndexedSegmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListIndexedSegmentRequest& operator=(ListIndexedSegmentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListIndexedSegmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListIndexedSegmentRequest* internal_default_instance() {
    return reinterpret_cast<const ListIndexedSegmentRequest*>(
               &_ListIndexedSegmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListIndexedSegmentRequest& a, ListIndexedSegmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListIndexedSegmentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListIndexedSegmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListIndexedSegmentRequest* New() const final {
    return CreateMaybeMessage<ListIndexedSegmentRequest>(nullptr);
  }

  ListIndexedSegmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListIndexedSegmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListIndexedSegmentRequest& from);
  void MergeFrom(const ListIndexedSegmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListIndexedSegmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.feder.ListIndexedSegmentRequest";
  }
  protected:
  explicit ListIndexedSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_feder_2eproto);
    return ::descriptor_table_feder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNameFieldNumber = 2,
    kIndexNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string collection_name = 2;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_collection_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_collection_name(
      std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string index_name = 3;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_index_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_index_name(
      std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.feder.ListIndexedSegmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_feder_2eproto;
};
// -------------------------------------------------------------------

class ListIndexedSegmentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.feder.ListIndexedSegmentResponse) */ {
 public:
  inline ListIndexedSegmentResponse() : ListIndexedSegmentResponse(nullptr) {};
  virtual ~ListIndexedSegmentResponse();

  ListIndexedSegmentResponse(const ListIndexedSegmentResponse& from);
  ListIndexedSegmentResponse(ListIndexedSegmentResponse&& from) noexcept
    : ListIndexedSegmentResponse() {
    *this = ::std::move(from);
  }

  inline ListIndexedSegmentResponse& operator=(const ListIndexedSegmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListIndexedSegmentResponse& operator=(ListIndexedSegmentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListIndexedSegmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListIndexedSegmentResponse* internal_default_instance() {
    return reinterpret_cast<const ListIndexedSegmentResponse*>(
               &_ListIndexedSegmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListIndexedSegmentResponse& a, ListIndexedSegmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListIndexedSegmentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListIndexedSegmentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListIndexedSegmentResponse* New() const final {
    return CreateMaybeMessage<ListIndexedSegmentResponse>(nullptr);
  }

  ListIndexedSegmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListIndexedSegmentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListIndexedSegmentResponse& from);
  void MergeFrom(const ListIndexedSegmentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListIndexedSegmentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.feder.ListIndexedSegmentResponse";
  }
  protected:
  explicit ListIndexedSegmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_feder_2eproto);
    return ::descriptor_table_feder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIDsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated int64 segmentIDs = 2;
  int segmentids_size() const;
  private:
  int _internal_segmentids_size() const;
  public:
  void clear_segmentids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_segmentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_segmentids() const;
  void _internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_segmentids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 segmentids(int index) const;
  void set_segmentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      segmentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_segmentids();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.feder.ListIndexedSegmentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > segmentids_;
  mutable std::atomic<int> _segmentids_cached_byte_size_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_feder_2eproto;
};
// -------------------------------------------------------------------

class DescribeSegmentIndexDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.feder.DescribeSegmentIndexDataRequest) */ {
 public:
  inline DescribeSegmentIndexDataRequest() : DescribeSegmentIndexDataRequest(nullptr) {};
  virtual ~DescribeSegmentIndexDataRequest();

  DescribeSegmentIndexDataRequest(const DescribeSegmentIndexDataRequest& from);
  DescribeSegmentIndexDataRequest(DescribeSegmentIndexDataRequest&& from) noexcept
    : DescribeSegmentIndexDataRequest() {
    *this = ::std::move(from);
  }

  inline DescribeSegmentIndexDataRequest& operator=(const DescribeSegmentIndexDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeSegmentIndexDataRequest& operator=(DescribeSegmentIndexDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeSegmentIndexDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeSegmentIndexDataRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeSegmentIndexDataRequest*>(
               &_DescribeSegmentIndexDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DescribeSegmentIndexDataRequest& a, DescribeSegmentIndexDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeSegmentIndexDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeSegmentIndexDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeSegmentIndexDataRequest* New() const final {
    return CreateMaybeMessage<DescribeSegmentIndexDataRequest>(nullptr);
  }

  DescribeSegmentIndexDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeSegmentIndexDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeSegmentIndexDataRequest& from);
  void MergeFrom(const DescribeSegmentIndexDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeSegmentIndexDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.feder.DescribeSegmentIndexDataRequest";
  }
  protected:
  explicit DescribeSegmentIndexDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_feder_2eproto);
    return ::descriptor_table_feder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsIDsFieldNumber = 4,
    kCollectionNameFieldNumber = 2,
    kIndexNameFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated int64 segmentsIDs = 4;
  int segmentsids_size() const;
  private:
  int _internal_segmentsids_size() const;
  public:
  void clear_segmentsids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_segmentsids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_segmentsids() const;
  void _internal_add_segmentsids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_segmentsids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 segmentsids(int index) const;
  void set_segmentsids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_segmentsids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      segmentsids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_segmentsids();

  // string collection_name = 2;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_collection_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_collection_name(
      std::string* collection_name);
  private:
  const std::string& _internal_collection_name() const;
  void _internal_set_collection_name(const std::string& value);
  std::string* _internal_mutable_collection_name();
  public:

  // string index_name = 3;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_index_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_index_name(
      std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.feder.DescribeSegmentIndexDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > segmentsids_;
  mutable std::atomic<int> _segmentsids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_feder_2eproto;
};
// -------------------------------------------------------------------

class DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse();
  DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse& other);
  static const DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse*>(&_DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_feder_2eproto);
    return ::descriptor_table_feder_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class DescribeSegmentIndexDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.feder.DescribeSegmentIndexDataResponse) */ {
 public:
  inline DescribeSegmentIndexDataResponse() : DescribeSegmentIndexDataResponse(nullptr) {};
  virtual ~DescribeSegmentIndexDataResponse();

  DescribeSegmentIndexDataResponse(const DescribeSegmentIndexDataResponse& from);
  DescribeSegmentIndexDataResponse(DescribeSegmentIndexDataResponse&& from) noexcept
    : DescribeSegmentIndexDataResponse() {
    *this = ::std::move(from);
  }

  inline DescribeSegmentIndexDataResponse& operator=(const DescribeSegmentIndexDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeSegmentIndexDataResponse& operator=(DescribeSegmentIndexDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeSegmentIndexDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeSegmentIndexDataResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeSegmentIndexDataResponse*>(
               &_DescribeSegmentIndexDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DescribeSegmentIndexDataResponse& a, DescribeSegmentIndexDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeSegmentIndexDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeSegmentIndexDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeSegmentIndexDataResponse* New() const final {
    return CreateMaybeMessage<DescribeSegmentIndexDataResponse>(nullptr);
  }

  DescribeSegmentIndexDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeSegmentIndexDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeSegmentIndexDataResponse& from);
  void MergeFrom(const DescribeSegmentIndexDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeSegmentIndexDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.feder.DescribeSegmentIndexDataResponse";
  }
  protected:
  explicit DescribeSegmentIndexDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_feder_2eproto);
    return ::descriptor_table_feder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIndexDataFieldNumber = 2,
    kIndexParamsFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // map<int64, .milvus.proto.feder.SegmentIndexData> index_data = 2;
  int index_data_size() const;
  private:
  int _internal_index_data_size() const;
  public:
  void clear_index_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >&
      _internal_index_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >*
      _internal_mutable_index_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >&
      index_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >*
      mutable_index_data();

  // repeated .milvus.proto.common.KeyValuePair index_params = 3;
  int index_params_size() const;
  private:
  int _internal_index_params_size() const;
  public:
  void clear_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      index_params() const;

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);
  private:
  const ::milvus::proto::common::Status& _internal_status() const;
  ::milvus::proto::common::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::milvus::proto::common::Status* status);
  ::milvus::proto::common::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:milvus.proto.feder.DescribeSegmentIndexDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DescribeSegmentIndexDataResponse_IndexDataEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > index_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > index_params_;
  ::milvus::proto::common::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_feder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SegmentIndexData

// int64 segmentID = 1;
inline void SegmentIndexData::clear_segmentid() {
  segmentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegmentIndexData::_internal_segmentid() const {
  return segmentid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegmentIndexData::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.SegmentIndexData.segmentID)
  return _internal_segmentid();
}
inline void SegmentIndexData::_internal_set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  segmentid_ = value;
}
inline void SegmentIndexData::set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.feder.SegmentIndexData.segmentID)
}

// string index_data = 2;
inline void SegmentIndexData::clear_index_data() {
  index_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SegmentIndexData::index_data() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.SegmentIndexData.index_data)
  return _internal_index_data();
}
inline void SegmentIndexData::set_index_data(const std::string& value) {
  _internal_set_index_data(value);
  // @@protoc_insertion_point(field_set:milvus.proto.feder.SegmentIndexData.index_data)
}
inline std::string* SegmentIndexData::mutable_index_data() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.feder.SegmentIndexData.index_data)
  return _internal_mutable_index_data();
}
inline const std::string& SegmentIndexData::_internal_index_data() const {
  return index_data_.Get();
}
inline void SegmentIndexData::_internal_set_index_data(const std::string& value) {
  
  index_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SegmentIndexData::set_index_data(std::string&& value) {
  
  index_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.feder.SegmentIndexData.index_data)
}
inline void SegmentIndexData::set_index_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.feder.SegmentIndexData.index_data)
}
inline void SegmentIndexData::set_index_data(const char* value,
    size_t size) {
  
  index_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.feder.SegmentIndexData.index_data)
}
inline std::string* SegmentIndexData::_internal_mutable_index_data() {
  
  return index_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SegmentIndexData::release_index_data() {
  // @@protoc_insertion_point(field_release:milvus.proto.feder.SegmentIndexData.index_data)
  return index_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SegmentIndexData::set_allocated_index_data(std::string* index_data) {
  if (index_data != nullptr) {
    
  } else {
    
  }
  index_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.feder.SegmentIndexData.index_data)
}
inline std::string* SegmentIndexData::unsafe_arena_release_index_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.feder.SegmentIndexData.index_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return index_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SegmentIndexData::unsafe_arena_set_allocated_index_data(
    std::string* index_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (index_data != nullptr) {
    
  } else {
    
  }
  index_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      index_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.feder.SegmentIndexData.index_data)
}

// -------------------------------------------------------------------

// FederSegmentSearchResult

// int64 segmentID = 1;
inline void FederSegmentSearchResult::clear_segmentid() {
  segmentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FederSegmentSearchResult::_internal_segmentid() const {
  return segmentid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FederSegmentSearchResult::segmentid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.FederSegmentSearchResult.segmentID)
  return _internal_segmentid();
}
inline void FederSegmentSearchResult::_internal_set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  segmentid_ = value;
}
inline void FederSegmentSearchResult::set_segmentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_segmentid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.feder.FederSegmentSearchResult.segmentID)
}

// string visit_info = 2;
inline void FederSegmentSearchResult::clear_visit_info() {
  visit_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FederSegmentSearchResult::visit_info() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.FederSegmentSearchResult.visit_info)
  return _internal_visit_info();
}
inline void FederSegmentSearchResult::set_visit_info(const std::string& value) {
  _internal_set_visit_info(value);
  // @@protoc_insertion_point(field_set:milvus.proto.feder.FederSegmentSearchResult.visit_info)
}
inline std::string* FederSegmentSearchResult::mutable_visit_info() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.feder.FederSegmentSearchResult.visit_info)
  return _internal_mutable_visit_info();
}
inline const std::string& FederSegmentSearchResult::_internal_visit_info() const {
  return visit_info_.Get();
}
inline void FederSegmentSearchResult::_internal_set_visit_info(const std::string& value) {
  
  visit_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FederSegmentSearchResult::set_visit_info(std::string&& value) {
  
  visit_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.feder.FederSegmentSearchResult.visit_info)
}
inline void FederSegmentSearchResult::set_visit_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  visit_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.feder.FederSegmentSearchResult.visit_info)
}
inline void FederSegmentSearchResult::set_visit_info(const char* value,
    size_t size) {
  
  visit_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.feder.FederSegmentSearchResult.visit_info)
}
inline std::string* FederSegmentSearchResult::_internal_mutable_visit_info() {
  
  return visit_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FederSegmentSearchResult::release_visit_info() {
  // @@protoc_insertion_point(field_release:milvus.proto.feder.FederSegmentSearchResult.visit_info)
  return visit_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FederSegmentSearchResult::set_allocated_visit_info(std::string* visit_info) {
  if (visit_info != nullptr) {
    
  } else {
    
  }
  visit_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), visit_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.feder.FederSegmentSearchResult.visit_info)
}
inline std::string* FederSegmentSearchResult::unsafe_arena_release_visit_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.feder.FederSegmentSearchResult.visit_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return visit_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FederSegmentSearchResult::unsafe_arena_set_allocated_visit_info(
    std::string* visit_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (visit_info != nullptr) {
    
  } else {
    
  }
  visit_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      visit_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.feder.FederSegmentSearchResult.visit_info)
}

// -------------------------------------------------------------------

// ListIndexedSegmentRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool ListIndexedSegmentRequest::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ListIndexedSegmentRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& ListIndexedSegmentRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& ListIndexedSegmentRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.ListIndexedSegmentRequest.base)
  return _internal_base();
}
inline void ListIndexedSegmentRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.feder.ListIndexedSegmentRequest.base)
}
inline ::milvus::proto::common::MsgBase* ListIndexedSegmentRequest::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListIndexedSegmentRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.feder.ListIndexedSegmentRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* ListIndexedSegmentRequest::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* ListIndexedSegmentRequest::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.feder.ListIndexedSegmentRequest.base)
  return _internal_mutable_base();
}
inline void ListIndexedSegmentRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base)->GetArena();
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.feder.ListIndexedSegmentRequest.base)
}

// string collection_name = 2;
inline void ListIndexedSegmentRequest::clear_collection_name() {
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListIndexedSegmentRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.ListIndexedSegmentRequest.collection_name)
  return _internal_collection_name();
}
inline void ListIndexedSegmentRequest::set_collection_name(const std::string& value) {
  _internal_set_collection_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.feder.ListIndexedSegmentRequest.collection_name)
}
inline std::string* ListIndexedSegmentRequest::mutable_collection_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.feder.ListIndexedSegmentRequest.collection_name)
  return _internal_mutable_collection_name();
}
inline const std::string& ListIndexedSegmentRequest::_internal_collection_name() const {
  return collection_name_.Get();
}
inline void ListIndexedSegmentRequest::_internal_set_collection_name(const std::string& value) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListIndexedSegmentRequest::set_collection_name(std::string&& value) {
  
  collection_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.feder.ListIndexedSegmentRequest.collection_name)
}
inline void ListIndexedSegmentRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.feder.ListIndexedSegmentRequest.collection_name)
}
inline void ListIndexedSegmentRequest::set_collection_name(const char* value,
    size_t size) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.feder.ListIndexedSegmentRequest.collection_name)
}
inline std::string* ListIndexedSegmentRequest::_internal_mutable_collection_name() {
  
  return collection_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListIndexedSegmentRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.feder.ListIndexedSegmentRequest.collection_name)
  return collection_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListIndexedSegmentRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.feder.ListIndexedSegmentRequest.collection_name)
}
inline std::string* ListIndexedSegmentRequest::unsafe_arena_release_collection_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.feder.ListIndexedSegmentRequest.collection_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return collection_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListIndexedSegmentRequest::unsafe_arena_set_allocated_collection_name(
    std::string* collection_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      collection_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.feder.ListIndexedSegmentRequest.collection_name)
}

// string index_name = 3;
inline void ListIndexedSegmentRequest::clear_index_name() {
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListIndexedSegmentRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.ListIndexedSegmentRequest.index_name)
  return _internal_index_name();
}
inline void ListIndexedSegmentRequest::set_index_name(const std::string& value) {
  _internal_set_index_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.feder.ListIndexedSegmentRequest.index_name)
}
inline std::string* ListIndexedSegmentRequest::mutable_index_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.feder.ListIndexedSegmentRequest.index_name)
  return _internal_mutable_index_name();
}
inline const std::string& ListIndexedSegmentRequest::_internal_index_name() const {
  return index_name_.Get();
}
inline void ListIndexedSegmentRequest::_internal_set_index_name(const std::string& value) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListIndexedSegmentRequest::set_index_name(std::string&& value) {
  
  index_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.feder.ListIndexedSegmentRequest.index_name)
}
inline void ListIndexedSegmentRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.feder.ListIndexedSegmentRequest.index_name)
}
inline void ListIndexedSegmentRequest::set_index_name(const char* value,
    size_t size) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.feder.ListIndexedSegmentRequest.index_name)
}
inline std::string* ListIndexedSegmentRequest::_internal_mutable_index_name() {
  
  return index_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListIndexedSegmentRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.feder.ListIndexedSegmentRequest.index_name)
  return index_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListIndexedSegmentRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.feder.ListIndexedSegmentRequest.index_name)
}
inline std::string* ListIndexedSegmentRequest::unsafe_arena_release_index_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.feder.ListIndexedSegmentRequest.index_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return index_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListIndexedSegmentRequest::unsafe_arena_set_allocated_index_name(
    std::string* index_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      index_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.feder.ListIndexedSegmentRequest.index_name)
}

// -------------------------------------------------------------------

// ListIndexedSegmentResponse

// .milvus.proto.common.Status status = 1;
inline bool ListIndexedSegmentResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListIndexedSegmentResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& ListIndexedSegmentResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& ListIndexedSegmentResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.ListIndexedSegmentResponse.status)
  return _internal_status();
}
inline void ListIndexedSegmentResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.feder.ListIndexedSegmentResponse.status)
}
inline ::milvus::proto::common::Status* ListIndexedSegmentResponse::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::Status* ListIndexedSegmentResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.feder.ListIndexedSegmentResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* ListIndexedSegmentResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::milvus::proto::common::Status* ListIndexedSegmentResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.feder.ListIndexedSegmentResponse.status)
  return _internal_mutable_status();
}
inline void ListIndexedSegmentResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.feder.ListIndexedSegmentResponse.status)
}

// repeated int64 segmentIDs = 2;
inline int ListIndexedSegmentResponse::_internal_segmentids_size() const {
  return segmentids_.size();
}
inline int ListIndexedSegmentResponse::segmentids_size() const {
  return _internal_segmentids_size();
}
inline void ListIndexedSegmentResponse::clear_segmentids() {
  segmentids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListIndexedSegmentResponse::_internal_segmentids(int index) const {
  return segmentids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListIndexedSegmentResponse::segmentids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.ListIndexedSegmentResponse.segmentIDs)
  return _internal_segmentids(index);
}
inline void ListIndexedSegmentResponse::set_segmentids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  segmentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.feder.ListIndexedSegmentResponse.segmentIDs)
}
inline void ListIndexedSegmentResponse::_internal_add_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  segmentids_.Add(value);
}
inline void ListIndexedSegmentResponse::add_segmentids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_segmentids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.feder.ListIndexedSegmentResponse.segmentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ListIndexedSegmentResponse::_internal_segmentids() const {
  return segmentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ListIndexedSegmentResponse::segmentids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.feder.ListIndexedSegmentResponse.segmentIDs)
  return _internal_segmentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ListIndexedSegmentResponse::_internal_mutable_segmentids() {
  return &segmentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ListIndexedSegmentResponse::mutable_segmentids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.feder.ListIndexedSegmentResponse.segmentIDs)
  return _internal_mutable_segmentids();
}

// -------------------------------------------------------------------

// DescribeSegmentIndexDataRequest

// .milvus.proto.common.MsgBase base = 1;
inline bool DescribeSegmentIndexDataRequest::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool DescribeSegmentIndexDataRequest::has_base() const {
  return _internal_has_base();
}
inline const ::milvus::proto::common::MsgBase& DescribeSegmentIndexDataRequest::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::MsgBase*>(
      &::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DescribeSegmentIndexDataRequest::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.DescribeSegmentIndexDataRequest.base)
  return _internal_base();
}
inline void DescribeSegmentIndexDataRequest::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.feder.DescribeSegmentIndexDataRequest.base)
}
inline ::milvus::proto::common::MsgBase* DescribeSegmentIndexDataRequest::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeSegmentIndexDataRequest::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.feder.DescribeSegmentIndexDataRequest.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DescribeSegmentIndexDataRequest::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* DescribeSegmentIndexDataRequest::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.feder.DescribeSegmentIndexDataRequest.base)
  return _internal_mutable_base();
}
inline void DescribeSegmentIndexDataRequest::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base)->GetArena();
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.feder.DescribeSegmentIndexDataRequest.base)
}

// string collection_name = 2;
inline void DescribeSegmentIndexDataRequest::clear_collection_name() {
  collection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DescribeSegmentIndexDataRequest::collection_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name)
  return _internal_collection_name();
}
inline void DescribeSegmentIndexDataRequest::set_collection_name(const std::string& value) {
  _internal_set_collection_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name)
}
inline std::string* DescribeSegmentIndexDataRequest::mutable_collection_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name)
  return _internal_mutable_collection_name();
}
inline const std::string& DescribeSegmentIndexDataRequest::_internal_collection_name() const {
  return collection_name_.Get();
}
inline void DescribeSegmentIndexDataRequest::_internal_set_collection_name(const std::string& value) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DescribeSegmentIndexDataRequest::set_collection_name(std::string&& value) {
  
  collection_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name)
}
inline void DescribeSegmentIndexDataRequest::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name)
}
inline void DescribeSegmentIndexDataRequest::set_collection_name(const char* value,
    size_t size) {
  
  collection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name)
}
inline std::string* DescribeSegmentIndexDataRequest::_internal_mutable_collection_name() {
  
  return collection_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DescribeSegmentIndexDataRequest::release_collection_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name)
  return collection_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DescribeSegmentIndexDataRequest::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name)
}
inline std::string* DescribeSegmentIndexDataRequest::unsafe_arena_release_collection_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return collection_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DescribeSegmentIndexDataRequest::unsafe_arena_set_allocated_collection_name(
    std::string* collection_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      collection_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.feder.DescribeSegmentIndexDataRequest.collection_name)
}

// string index_name = 3;
inline void DescribeSegmentIndexDataRequest::clear_index_name() {
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DescribeSegmentIndexDataRequest::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name)
  return _internal_index_name();
}
inline void DescribeSegmentIndexDataRequest::set_index_name(const std::string& value) {
  _internal_set_index_name(value);
  // @@protoc_insertion_point(field_set:milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name)
}
inline std::string* DescribeSegmentIndexDataRequest::mutable_index_name() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name)
  return _internal_mutable_index_name();
}
inline const std::string& DescribeSegmentIndexDataRequest::_internal_index_name() const {
  return index_name_.Get();
}
inline void DescribeSegmentIndexDataRequest::_internal_set_index_name(const std::string& value) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DescribeSegmentIndexDataRequest::set_index_name(std::string&& value) {
  
  index_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name)
}
inline void DescribeSegmentIndexDataRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name)
}
inline void DescribeSegmentIndexDataRequest::set_index_name(const char* value,
    size_t size) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name)
}
inline std::string* DescribeSegmentIndexDataRequest::_internal_mutable_index_name() {
  
  return index_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DescribeSegmentIndexDataRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name)
  return index_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DescribeSegmentIndexDataRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name)
}
inline std::string* DescribeSegmentIndexDataRequest::unsafe_arena_release_index_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return index_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DescribeSegmentIndexDataRequest::unsafe_arena_set_allocated_index_name(
    std::string* index_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      index_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.feder.DescribeSegmentIndexDataRequest.index_name)
}

// repeated int64 segmentsIDs = 4;
inline int DescribeSegmentIndexDataRequest::_internal_segmentsids_size() const {
  return segmentsids_.size();
}
inline int DescribeSegmentIndexDataRequest::segmentsids_size() const {
  return _internal_segmentsids_size();
}
inline void DescribeSegmentIndexDataRequest::clear_segmentsids() {
  segmentsids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribeSegmentIndexDataRequest::_internal_segmentsids(int index) const {
  return segmentsids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribeSegmentIndexDataRequest::segmentsids(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.DescribeSegmentIndexDataRequest.segmentsIDs)
  return _internal_segmentsids(index);
}
inline void DescribeSegmentIndexDataRequest::set_segmentsids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  segmentsids_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.feder.DescribeSegmentIndexDataRequest.segmentsIDs)
}
inline void DescribeSegmentIndexDataRequest::_internal_add_segmentsids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  segmentsids_.Add(value);
}
inline void DescribeSegmentIndexDataRequest::add_segmentsids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_segmentsids(value);
  // @@protoc_insertion_point(field_add:milvus.proto.feder.DescribeSegmentIndexDataRequest.segmentsIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DescribeSegmentIndexDataRequest::_internal_segmentsids() const {
  return segmentsids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DescribeSegmentIndexDataRequest::segmentsids() const {
  // @@protoc_insertion_point(field_list:milvus.proto.feder.DescribeSegmentIndexDataRequest.segmentsIDs)
  return _internal_segmentsids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DescribeSegmentIndexDataRequest::_internal_mutable_segmentsids() {
  return &segmentsids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DescribeSegmentIndexDataRequest::mutable_segmentsids() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.feder.DescribeSegmentIndexDataRequest.segmentsIDs)
  return _internal_mutable_segmentsids();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DescribeSegmentIndexDataResponse

// .milvus.proto.common.Status status = 1;
inline bool DescribeSegmentIndexDataResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DescribeSegmentIndexDataResponse::has_status() const {
  return _internal_has_status();
}
inline const ::milvus::proto::common::Status& DescribeSegmentIndexDataResponse::_internal_status() const {
  const ::milvus::proto::common::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline const ::milvus::proto::common::Status& DescribeSegmentIndexDataResponse::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.DescribeSegmentIndexDataResponse.status)
  return _internal_status();
}
inline void DescribeSegmentIndexDataResponse::unsafe_arena_set_allocated_status(
    ::milvus::proto::common::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.feder.DescribeSegmentIndexDataResponse.status)
}
inline ::milvus::proto::common::Status* DescribeSegmentIndexDataResponse::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::Status* DescribeSegmentIndexDataResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.feder.DescribeSegmentIndexDataResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DescribeSegmentIndexDataResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::milvus::proto::common::Status* DescribeSegmentIndexDataResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.feder.DescribeSegmentIndexDataResponse.status)
  return _internal_mutable_status();
}
inline void DescribeSegmentIndexDataResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.feder.DescribeSegmentIndexDataResponse.status)
}

// map<int64, .milvus.proto.feder.SegmentIndexData> index_data = 2;
inline int DescribeSegmentIndexDataResponse::_internal_index_data_size() const {
  return index_data_.size();
}
inline int DescribeSegmentIndexDataResponse::index_data_size() const {
  return _internal_index_data_size();
}
inline void DescribeSegmentIndexDataResponse::clear_index_data() {
  index_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >&
DescribeSegmentIndexDataResponse::_internal_index_data() const {
  return index_data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >&
DescribeSegmentIndexDataResponse::index_data() const {
  // @@protoc_insertion_point(field_map:milvus.proto.feder.DescribeSegmentIndexDataResponse.index_data)
  return _internal_index_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >*
DescribeSegmentIndexDataResponse::_internal_mutable_index_data() {
  return index_data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::milvus::proto::feder::SegmentIndexData >*
DescribeSegmentIndexDataResponse::mutable_index_data() {
  // @@protoc_insertion_point(field_mutable_map:milvus.proto.feder.DescribeSegmentIndexDataResponse.index_data)
  return _internal_mutable_index_data();
}

// repeated .milvus.proto.common.KeyValuePair index_params = 3;
inline int DescribeSegmentIndexDataResponse::_internal_index_params_size() const {
  return index_params_.size();
}
inline int DescribeSegmentIndexDataResponse::index_params_size() const {
  return _internal_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* DescribeSegmentIndexDataResponse::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.feder.DescribeSegmentIndexDataResponse.index_params)
  return index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
DescribeSegmentIndexDataResponse::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.feder.DescribeSegmentIndexDataResponse.index_params)
  return &index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& DescribeSegmentIndexDataResponse::_internal_index_params(int index) const {
  return index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& DescribeSegmentIndexDataResponse::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.feder.DescribeSegmentIndexDataResponse.index_params)
  return _internal_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* DescribeSegmentIndexDataResponse::_internal_add_index_params() {
  return index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* DescribeSegmentIndexDataResponse::add_index_params() {
  // @@protoc_insertion_point(field_add:milvus.proto.feder.DescribeSegmentIndexDataResponse.index_params)
  return _internal_add_index_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
DescribeSegmentIndexDataResponse::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.feder.DescribeSegmentIndexDataResponse.index_params)
  return index_params_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feder
}  // namespace proto
}  // namespace milvus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_feder_2eproto
